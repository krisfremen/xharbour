#
# $Id: gcc.cf,v 1.3 2003/05/16 19:48:36 druzus Exp $
#

include $(TOP)$(ROOT)config/$(HB_ARCHITECTURE)/global.cf

OBJ_EXT = .o
EXE_EXT =
LIB_PREF = lib
LIB_EXT = .a

CC = gcc
CC_IN = -c
CC_OUT = -o
CPPFLAGS = -I. -Iinclude -I$(HB_INC_COMPILE)
ifeq ($(HB_LEX),SIMPLEX)
CFLAGS = -Wall -g -DHB_OS_BSD -DSIMPLEX
else
CFLAGS = -Wall -g -DHB_OS_BSD
endif

LD = gcc
LD_OUT = -o

# Add all libraries specified in CONTRIBS and LIBS.
ifeq ($(HB_LIB_COMPILE),)
LINKPATHS += $(foreach lib, $(CONTRIBS), -L$(TOP)$(ROOT)contrib/$(lib)/$(ARCH))
LINKPATHS += $(foreach lib, $(CONTRIBS), -L$(TOP)$(ROOT)contrib/lib$(lib)/$(ARCH))
LINKPATHS += $(foreach lib, $(LIBS), -L$(TOP)$(ROOT)source/$(lib)/$(ARCH))
else
LINKPATHS += -L$(HB_LIB_COMPILE)
endif
LINKLIBS += -Wl,--start-group
LINKLIBS += $(foreach lib, $(CONTRIBS), -l$(lib))
LINKLIBS += $(foreach lib, $(LIBS), -l$(lib))

# If LIBS specifies the rdd library, add all DB drivers.
ifeq ($(findstring rdd,$(LIBS)),rdd)
LINKPATHS += $(foreach drv, $(HB_DB_DRIVERS), -L$(TOP)$(ROOT)source/rdd/$(drv)/$(ARCH))
LINKLIBS += $(foreach drv, $(HB_DB_DRIVERS), -l$(drv))
endif

# Add the specified GT driver library
ifeq ($(findstring rtl,$(LIBS)),rtl)
LINKPATHS += -L$(TOP)$(ROOT)source/rtl/$(HB_GT_LIB)/$(ARCH)
LINKLIBS += -l$(HB_GT_LIB)
ifeq ($(HB_MULTI_GT),yes)
LINKPATHS += -L$(TOP)$(ROOT)source/rtl/gtnul/$(ARCH)
LINKLIBS += -lgtnul
endif
endif

# HB_SCREEN_LIB: empty, or one of ncurses, slang
ifeq ($(HB_GT_LIB),gtcrs)
HB_SCREEN_LIB:=ncurses
else
ifeq ($(HB_GT_LIB),gtsln)
HB_SCREEN_LIB:=slang
endif
endif

ifneq ($(HB_SCREEN_LIB),)
LINKPATHS += -L/usr/local/lib
LINKLIBS += -l$(HB_SCREEN_LIB)
endif

LINKLIBS += -lm -Wl,--end-group

LDFLAGS +=  $(LINKPATHS)

AR = ar
ARFLAGS = $(A_USR)
AR_RULE = $(AR) $(ARFLAGS) r $@ $^ || $(RM) $@

include $(TOP)$(ROOT)config/rules.cf





#
# $Id: rules.cf,v 1.6 2003/09/24 01:20:34 druzus Exp $
#

# How to run yacc.
YACC = bison
YACC_FLAGS := -d $(YACC_FLAGS)

# How to run lex.
LEX = flex
LEX_FLAGS := -i -8 $(LEX_FLAGS)

#
# How to run Harbour.
#
HB := $(notdir $(HB_BIN_COMPILE))
ifneq ($(HB),)
# there is no slash at the end
HB := $(HB_BIN_COMPILE)/
endif
HB := $(HB)harbour$(EXE_EXT)

HB_FLAGS = -n -q0 -w -es2 -gc0 -I$(TOP) -I$(TOP)include -I$(HB_INC_COMPILE) $(HB_MT_FLAGS)

# The rule to link an executable.
ifeq ($(LD_RULE),)
# Use default rule if architecture/compiler specific rule is not defined
LD_RULE = $(LD) $(CFLAGS) $(LD_OUT)$@ $^ $(LDFLAGS) $(L_USR) $(LINKLIBS)
endif

# Eliminate these rules.

%.c : %.y

%.c : %.l

# Location of source C files
# Some DOS compilers doesn't like '/' in filenames - however the MAKE system
# requires '/' in filenames - this trick allows to solve this conflict
SOURCE_DIR := $($(HB_ARCHITECTURE)_$(HB_COMPILER)_GRANDP)
ifeq ($(SOURCE_DIR),)
SOURCE_DIR = $(GRANDP)
endif

# .C
# BCC (at least version 3.1) requires that the output file be listed ahead of the input file
ifeq ($(CC),bcc)
# Rule to generate an object file from a C source file in the parent.
%$(OBJ_EXT) : $(SOURCE_DIR)%.c
	$(CC) $(CPPFLAGS) $(CFLAGS) $(C_USR) $(CC_OUT)$(subst .c,$(OBJ_EXT),$(subst $(SOURCE_DIR),,$?)) $(CC_IN) $?

# Rule to generate an object file from a C source file.
%$(OBJ_EXT) : %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) $(C_USR) $(CC_OUT)$(?:.c=$(OBJ_EXT)) $(CC_IN) $?
else
# Rule to generate an object file from a C source file in the parent.
%$(OBJ_EXT) : $(SOURCE_DIR)%.c
	$(CC) $(CPPFLAGS) $(CFLAGS) $(C_USR) $(CC_IN) $? $(CC_OUT)$(subst .c,$(OBJ_EXT),$(subst $(SOURCE_DIR),,$?))

# Rule to generate an object file from a C source file.
%$(OBJ_EXT) : %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) $(C_USR) $(CC_IN) $? $(CC_OUT)$(?:.c=$(OBJ_EXT))
endif

#rules for CPP files
%$(OBJ_EXT) : $(SOURCE_DIR)%.cpp
	$(CC) $(CPPFLAGS) $(CFLAGS) $(C_USR) $(CC_IN) $? $(CC_OUT)$(subst .cpp,$(OBJ_EXT),$(subst $(SOURCE_DIR),,$?))

%$(OBJ_EXT) : %.cpp
	$(CC) $(CPPFLAGS) $(CFLAGS) $(C_USR) $(CC_IN) $? $(CC_OUT)$(?:.cpp=$(OBJ_EXT))

# Rule to generate an executable file from an object file.
%$(EXE_EXT) : %$(OBJ_EXT)
	$(LD_RULE)

# Rule to generate a C file from a PRG file.
%.c : $(GRANDP)%.prg
	$(HB) $? $(PRG_USR) $(HB_FLAGS)

ifeq ($(SHLVL),) # COMMAND.COM
# Do nothing. the $(hb_architecture)/global.cf will handle clean up.
else
# Generic rule to clean up.
clean::
	-$(RM) *.bak *.obj core *.core *~ *.o
endif
