#
# $Id: makefile.vc,v 1.2 2003/10/09 05:31:55 paultucker Exp $
#

#
# Makefile for Harbour Project for Microsoft C++
#

#
# NOTE: You can use these envvars to configure the make process:
#       (note that these are all optional)
#
#       CFLAGS       - Extra C compiler options for libraries and for 
#                      executables
#       C_USR        - Extra C compiler options for libraries and for 
#                      executables (GNU make compatible envvar)
#       CLIBFLAGS    - Extra C compiler options for the libraries
#       HARBOURFLAGS - Extra Harbour compiler options
#       PRG_USR      - Extra Harbour compiler options
#                      (GNU make compatible envvar)
#

CC = cl

MK_FILE      =makefile.vc
MK_FLAGS     =$(MAKEFLAGS: =)

BIN_DIR = ..\..\bin
LIB_DIR = ..\..\lib\vc
OBJ_DIR = obj\vc

#
# Directory macros. These should never have to change.
#

INCLUDE_DIR  = ..\..\include
INTERNET_DIR = source

#
# C compiler definition and C flags. These should never have to change.
#

C_FLAGS        =-G6 -Ogtyb2 -FD -Gs -GA -TP -W3 -nologo $(HB_MT) -I$(INCLUDE_DIR) -DHB_OS_WIN_32 -DSIMPLEX $(C_USR) $(CFLAGS)
CLIBFLAGS      =-c $(C_FLAGS) $(CLIBFLAGS)
CLIBFLAGSDEBUG =-v $(CLIBFLAGS)
HARBOURFLAGS   =-i..\what32\include -i$(INCLUDE_DIR) -n -q -w0 -gc0 $(PRG_USR) $(HARBOURFLAGS)
LDFLAGS        =$(LDFLAGS)

#
# Macros to access our library names
#

INTERNET_LIB    = $(LIB_DIR)\Internet.lib

HARBOUR_EXE  = $(BIN_DIR)\harbour.exe

#
# Rules
#

.SUFFIXES: .prg .lib .c .obj .asm

# override builtin

.c.obj::
   $(CC) $(CLIBFLAGS) -Fo$(OBJ_DIR)\ $<

.cpp.obj::
   $(CC) $(CLIBFLAGS) -Fo$(OBJ_DIR)\ $<

#
# INTERNET.LIB rules
#
# how this works:
#
#  {target>.prg{objdir}.obj
#  Harbour (flags) -oobjdir\ $<
#    The list of dependant prgs is sent to the harbour compiler
#    Since the rule is .prg to .obj and the compiler spits out
#    C code (as we use it), we need to get those into obj format.
#    Since $(<:.prg=.c) doesn't work, we execute this script again
#    with a specific target via:
#  nMake /fmakefile.vc target.lib2
#    If you view that target at the bottom of this file, all it does
#    is cause make to evaluate the obj list of dependants which then
#    causes the .c.obj rule above to fire. (by inference)

{$(INTERNET_DIR)}.c{$(OBJ_DIR)}.obj::
   $(CC) $(CLIBFLAGS) -Fo$(OBJ_DIR)\ $<

{$(INTERNET_DIR)}.prg{$(OBJ_DIR)}.c::
   $(HARBOUR_EXE) $(HARBOURFLAGS) -o$(OBJ_DIR)\ $<

{$(INTERNET_DIR)}.prg{$(OBJ_DIR)}.obj::
   $(HARBOUR_EXE) $(HARBOURFLAGS) -o$(OBJ_DIR)\ $<
   $(MAKE) -nologo /$(MK_FLAGS)f$(MK_FILE) $(INTERNET_LIB)2

INTERNET_LIB_OBJS = \
    $(OBJ_DIR)\xhftp.obj

#
# Our default target
#

all: \
   $(INTERNET_LIB)

CLEAN:
   @if exist $(INTERNET_LIB) del $(INTERNET_LIB) >nul
   @if exist $(OBJ_DIR)\*.obj del $(OBJ_DIR)\*.obj >nul
   @if exist $(OBJ_DIR)\*.c del $(OBJ_DIR)\*.c >nul

$(INTERNET_LIB) : $(INTERNET_LIB_OBJS)
   lib /out:$@ $**

$(INTERNET_LIB)2    : $(INTERNET_LIB_OBJS)
