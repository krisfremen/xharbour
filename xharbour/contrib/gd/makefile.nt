#
# $Id: makefile.nt,v 1.6 2005/12/07 19:22:10 laverson Exp $
#

#
# Makefile.nt - This file is identical to makefile.vc, except that
# under something higher than Win9x, you should see overall improved
# speed of building Harbour.
#

#
# Makefile for Harbour Project for Microsoft Visual C (32 bit)
#

# ---------------------------------------------------------------
# If you need to set additional compiler/linker options use the
# environment variables below, but please DON'T MODIFY THIS FILE
# for this purpose.
# ---------------------------------------------------------------

#
# NOTE: You can use these envvars to configure the make process:
#       (note that these are all optional)
#
#       CFLAGS       - Extra C compiler options for libraries and for
#                      executables
#       CLIBFLAGS    - Extra C compiler options for the libraries
#       C_USR        - Extra C compiler options for libraries and for
#                      executables (GNU make compatible envvar)
#       HARBOURFLAGS - Extra Harbour compiler options
#       HB_DOC_PDF   - Turns on the .PDF file support in the HBDOC utility.
#                      Note that this will require the pdflib contrib.
#       HB_GT_LIB    - To override the default GT driver
#                      (search for HB_GT_LIBS for a list of values)
#       PRG_USR      - Extra Harbour compiler options
#                      (GNU make compatible envvar)
#

#
# Notes about this makefile:
#
# 1. To add new files to a dependancy list, add an obj name to one of the
#    OBJ lists for the appropriate library.
#    NOTE: put .prg related obj's last in the lib list.
#
# 2. This is a recursive script.  If you change the name of this file,
#    be sure to change MK_FILE (a few lines down) to the new name as well.
#
# 3. Recurrsion rules are quite simple:
#     If you specifiy /a on the command line, files in the obj\vc dir
#     will be deleted, and when nmake recurses, it's without the /a flag
#
#     If a .prg.obj rule is fired, nmake will execute this script with
#     a specific target as a parameter immediatley after compiling a given
#     set of prg files.
#      ie: Harbour $<
#          nmake /fmakefile.nt obj\vc\rtl.lib2
#     which will simply get make to re-evaluate the dependancy list for the
#     lib, and as a result, it will execute the C compiler using the .c.obj
#     rule below to create the obj's for the prg's that were created just
#     prior to the recurrsive call. Once the obj's are created, the
#     recurrsion is complete.
#     See additional notes under RTL.LIB below.
#

# ---------------------------------------------------------------
# "echo." intentionally used instead of "echo", to avoid conflicts
# with external commands named echo.
# using macros for ECHO and DEL to allow overiding such as:
#
#    set ECHO=cmd /c echo
#    set DEL=cmd /c del
#
# The above might be needed on Windows 2000 and XP.
# The macros are referenced in makefile.bc
# ---------------------------------------------------------------

!ifndef ECHO
# don't indent definitions
ECHO = echo.
!endif
!ifndef DEL
# You might need to set 'ECHO=echo.' - but don't set 'DEL=del.' !!!
DEL = del
!endif


MK_FILE      =makefile.nt
MK_FLAGS     =$(MAKEFLAGS: =)

BIN_DIR      =..\..\bin
LIB_DIR      =..\..\lib\vc
OBJ_DIR      =obj\vc

#
# Directory macros. These should never have to change.
#

INCLUDE_DIR  =include
SOURCE_DIR   =source
GD_DIR      =$(SOURCE_DIR) # ??

#
# C compiler definition and C flags. These should never have to change.
#

AS           =ML
#C_FLAGS      =-Ogt2yb1p -FD -GA -GB -Gs -TP -W3 -nologo -I$(INCLUDE_DIR) -I$(GD_DIR) -DWIN32 -D_WIN32 -D__WIN32__ -DHB_OS_WIN_32 $(C_USR) $(CFLAGS)
#CLIBFLAGS    =-c $(C_FLAGS) $(CLIBFLAGS)
#HARBOURFLAGS =-i$(INCLUDE_DIR) -i..\..\include -n -q0 -w -es2 -gc0 $(PRG_USR) $(HARBOURFLAGS)
#LFLAGS       =/MACHINE:IX86 /SUBSYSTEM:CONSOLE
#L_DFLAGS     =$(LFLAGS) /NODEFAULTLIB:LIBCMT /NODEFAULTLIB:LIBCPMT $(LDFLAGS)

AS             = ML
CFLAGS         = -Ogt2yb1p -FD -GA -GB -Gs -TP -W3 -nologo $(HB_MT) -I$(INCLUDE_DIR) -I..\..\include  -DWIN32 -D_WIN32 -D__WIN32__ -DHB_OS_WIN_32_USED $(C_USR) $(CFLAGS)
CLIBFLAGS      = -c $(CFLAGS) $(CLIBFLAGS)
CLIBFLAGSDEBUG = -Zi $(CLIBFLAGS)
HARBOURFLAGS   = -i$(INCLUDE_DIR) -i..\..\include -n -q0 -w -es2 -gc0 $(PRG_USR) $(HARBOURFLAGS)
LDFLAGS        =  $(LDFLAGS)

#
# Macros to access our library names
#

GD_LIB =$(LIB_DIR)\gdlib.lib

HARBOUR_EXE  =$(BIN_DIR)\harbour.exe

#
# Rules
#

.SUFFIXES: .prg .lib .c .obj .asm

# override builtin

.c.obj::
   $(CC) $(CLIBFLAGS) -Fo$(OBJ_DIR)$(MT)\ $<

.cpp.obj::
   $(CC) $(CLIBFLAGS) -Fo$(OBJ_DIR)$(MT)\ $<

#
#
#

# TODO: Add GTSLN and GTCRS

LIBLIST = \
   $(GD_LIB)


#
# XWT.LIB rules
#
# how this works:
#
#  {target>.prg{objdir}.obj
#  Harbour (flags) -oobjdir\ $<
#    The list of dependant prgs is sent to the harbour compiler
#    Since the rule is .prg to .obj and the compiler spits out
#    C code (as we use it), we need to get those into obj format.
#    Since $(<:.prg=.c) doesn't work, we execute this script again
#    with a specific target via:
#  nMake /fmakefile.vc target.lib2
#    If you view that target at the bottom of this file, all it does
#    is cause make to evaluate the obj list of dependants which then
#    causes the .c.obj rule above to fire. (by inference)

{$(GD_DIR)}.c{$(OBJ_DIR)}.obj::
   $(CC) $(CLIBFLAGS) -Fo$(OBJ_DIR)\ $<

{$(SOURCE_DIR)}.c{$(OBJ_DIR)}.obj::
   $(CC) $(CLIBFLAGS) -Fo$(OBJ_DIR)\ $<

{$(SOURCE_DIR)}.prg{$(OBJ_DIR)}.c::
   $(HARBOUR_EXE) $(HARBOURFLAGS) -o$(OBJ_DIR)\ $<

{$(SOURCE_DIR)}.prg{$(OBJ_DIR)}.obj::
   $(HARBOUR_EXE) $(HARBOURFLAGS) -o$(OBJ_DIR)\ $<
   $(MAKE) -nologo /$(MK_FLAGS)f$(MK_FILE) $(GD_LIB)2

# List C modules first, then PRG modules

GD_LIB_OBJS = \
   $(OBJ_DIR)\gdwrp.obj \
   \
   $(OBJ_DIR)\gd.obj \
   $(OBJ_DIR)\gdimage.obj \
   $(OBJ_DIR)\gdchart.obj \
   $(OBJ_DIR)\gdbar.obj \
   $(OBJ_DIR)\gdbarcode.obj


#
# Our default target
#
TARGETS= \
   $(GD_LIB)

!if ( "$(MK_FLAGS:Y=)"=="A" )

all: \
   CLEAN \
   $(TARGETS)

MK_FLAGS = $(MK_FLAGS:A=)

!else

all: \
   $(TARGETS)

!endif

CLEAN:
   -@if exist $(OBJ_DIR)\*.obj $(DEL) $(OBJ_DIR)\*.obj >nul
   -@if exist $(OBJ_DIR)\*.c $(DEL) $(OBJ_DIR)\*.c >nul
   -@if exist $(GD_LIB) $(DEL) $(GD_LIB) > nul


#
# Library dependencies and build rules
#

$(GD_LIB) : $(GD_LIB_OBJS)
   lib /out:$@ $**


# dummy targets used for prg to c creation

$(GD_LIB)2    : $(GD_LIB_OBJS)
