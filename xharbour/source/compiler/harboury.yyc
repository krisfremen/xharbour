/*
 * $Id$
 */

/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 1 "source\\compiler\\harbour.sly"

/*
 * $Id$
 */

/*
 * Harbour Project source code:
 * Compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 * www - http://www.harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA (or visit
 * their web site at http://www.gnu.org/).
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */

#include "hbcomp.h"

#include "hbexemem.h"

/* Compile using: bison -d -v harbour.y */

/* to pacify some warnings in BCC */
#if ( defined( __BORLANDC__ ) || defined( _MSC_VER ) ) && !defined( __STDC__ )
#  define __STDC__
#endif

#undef alloca
#define alloca  malloc

#ifdef FORCE_MEM_STD
   #undef  hb_xgrab
   #define hb_xgrab malloc

   #undef  hb_xrealloc
   #define hb_xrealloc realloc

   #undef  hb_xfree
   #define hb_xfree free
#else
   #undef malloc
   #define malloc  hb_xgrab
   #undef realloc
   #define realloc hb_xrealloc
   #undef free
   #define free    hb_xfree
#endif

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE free
#undef YYMALLOC
#define YYMALLOC malloc

extern FILE *yyin;      /* currently yacc parsed file */
extern char *yytext;

#ifdef __cplusplus
typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE yy_create_buffer( FILE *, int ); /* yacc functions to manage multiple files */
extern void yy_switch_to_buffer( YY_BUFFER_STATE ); /* yacc functions to manage multiple files */
extern void yy_delete_buffer( YY_BUFFER_STATE ); /* yacc functions to manage multiple files */
#else
extern void * yy_create_buffer( FILE *, int ); /* yacc functions to manage multiple files */
extern void yy_switch_to_buffer( void * ); /* yacc functions to manage multiple files */
extern void yy_delete_buffer( void * ); /* yacc functions to manage multiple files */
#endif

/* lex & yacc related prototypes */
extern int yyparse( void );    /* main yacc parsing function */
extern void yyerror( char * ); /* parsing error management function */
extern int yylex( void );      /* main lex token function, called by yyparse() */
#ifdef __cplusplus
extern "C" int yywrap( void );
#else
extern int yywrap( void );     /* manages the EOF of current processed file */
#endif

static void hb_compLoopStart( BOOL );
static long hb_compLoopCount( void );
static void hb_compLoopEnd( void );
static void hb_compLoopLoop( void );
static void hb_compLoopExit( void );
static void hb_compLoopHere( void );

static void * hb_compElseIfGen( void * pFirstElseIf, ULONG ulOffset ); /* generates a support structure for elseifs pcode fixups */
static void hb_compElseIfFix( void * pIfElseIfs ); /* implements the ElseIfs pcode fixups */

static void hb_compRTVariableAdd( HB_EXPR_PTR, BOOL );
static void hb_compRTVariableGen( char * );

static void hb_compVariableDim( char *, HB_EXPR_PTR );

#ifdef HARBOUR_YYDEBUG
   #define YYDEBUG        1 /* Parser debug information support */
#endif

typedef struct __ELSEIF
{
   ULONG ulOffset;
   struct __ELSEIF * pNext;
   struct __ELSEIF * pPrevGroup;
} _ELSEIF, * PELSEIF;      /* support structure for else if pcode fixups */

typedef struct _LOOPEXIT
{
   ULONG              ulOffset;
   BOOL               fCanLoop;
   int                iLine;
   USHORT             wSeqCounter;
   USHORT             wWithObjCounter;
   USHORT             wFinallyCounter;
   struct _LOOPEXIT * pLoopList;
   struct _LOOPEXIT * pExitList;
   struct _LOOPEXIT * pNext;
} LOOPEXIT, * PTR_LOOPEXIT;  /* support structure for EXIT and LOOP statements */

typedef struct HB_RTVAR_
{
   HB_EXPR_PTR pVar;
   BOOL bPopValue;
   struct HB_RTVAR_ *pNext;
   struct HB_RTVAR_ *pPrev;
} HB_RTVAR, *HB_RTVAR_PTR; /* support structure for PUBLIC and PRIVATE statements */

USHORT hb_comp_wSeqCounter      = 0;
USHORT hb_comp_wForCounter      = 0;
USHORT hb_comp_wIfCounter       = 0;
USHORT hb_comp_wWhileCounter    = 0;
USHORT hb_comp_wCaseCounter     = 0;
USHORT hb_comp_wWithObjCounter  = 0;
USHORT hb_comp_wFinallyCounter  = 0;

ULONG  hb_comp_alLastSwitchPos[ HB_MAX_SWITCHES ];
USHORT hb_comp_wSwitchCounter   = 0;

char * hb_comp_buffer; /* yacc input buffer */

static HB_RTVAR_PTR hb_comp_rtvars   = NULL;
static PTR_LOOPEXIT hb_comp_pLoops   = NULL;
static PELSEIF      hb_comp_pElseIfs = NULL;

static BOOL bTrancuateBaseArray = FALSE;
static HB_EXPR_PTR pGetArgList, pBaseArrayName = NULL, pGetVarArray, pGetFunction;

static BOOL s_bBlockMacro = FALSE, s_bBlockDeclared = FALSE;
static HB_EXPR_PTR pBlockSimple;

static int s_iLastControlLine = 0, s_iControlLevel = 0;

extern char * hb_comp_SLX_LastBlock( BOOL bReset );

extern HB_COMP_IDS hb_compExpr_IDs;

char * hb_comp_szAnnounce = NULL;    /* ANNOUNCEd procedure */

BOOL   hb_comp_bVarParams = FALSE;

typedef struct _LOCALPARAM
{
  char *szName;
  char cType;
  struct _LOCALPARAM *pNext;
} LOCALPARAM, *PLOCALPARAM;

PLOCALPARAM hb_comp_LocalParams = NULL;

typedef struct _BLOCKSLIST
{
  HB_EXPR_PTR pBlock;
  struct _BLOCKSLIST *pOuter;
} BLOCKSLIST, *PBLOCKSLIST;

PBLOCKSLIST hb_comp_BlocksList = NULL;

static void hb_compDebugStart( void ) { };



/* Line 189 of yacc.c  */
#line 272 "obj\\63\\harboury.c"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     FUNCTION = 258,
     PROCEDURE = 259,
     IDENTIFIER = 260,
     RETURN = 261,
     NIL = 262,
     NUM_DOUBLE = 263,
     INASSIGN = 264,
     NUM_INTEGER = 265,
     NUM_LONG = 266,
     LOCAL = 267,
     STATIC = 268,
     GLOBAL = 269,
     EXTERNGLOBAL = 270,
     IIF = 271,
     IF = 272,
     ELSE = 273,
     ELSEIF = 274,
     END = 275,
     ENDIF = 276,
     LITERAL = 277,
     TRUEVALUE = 278,
     FALSEVALUE = 279,
     NULLVALUE = 280,
     ANNOUNCE = 281,
     DYNAMIC = 282,
     EXTERN = 283,
     INIT = 284,
     EXIT = 285,
     AND = 286,
     OR = 287,
     NOT = 288,
     PUBLIC = 289,
     EQ = 290,
     NE1 = 291,
     NE2 = 292,
     INC = 293,
     DEC = 294,
     ALIASOP = 295,
     DOCASE = 296,
     CASE = 297,
     OTHERWISE = 298,
     ENDCASE = 299,
     ENDDO = 300,
     MEMVAR = 301,
     WHILE = 302,
     LOOP = 303,
     FOR = 304,
     NEXT = 305,
     TO = 306,
     STEP = 307,
     LE = 308,
     GE = 309,
     FIELD = 310,
     IN = 311,
     PARAMETERS = 312,
     H12AM = 313,
     H12PM = 314,
     PLUSEQ = 315,
     MINUSEQ = 316,
     MULTEQ = 317,
     DIVEQ = 318,
     POWER = 319,
     EXPEQ = 320,
     MODEQ = 321,
     PRIVATE = 322,
     BEGINSEQ = 323,
     BREAK = 324,
     RECOVER = 325,
     RECOVERUSING = 326,
     DO = 327,
     WITH = 328,
     SELF = 329,
     LINE = 330,
     MACROVAR = 331,
     MACROTEXT = 332,
     AS_ARRAY = 333,
     AS_BLOCK = 334,
     AS_CHARACTER = 335,
     AS_CLASS = 336,
     AS_DATE = 337,
     AS_LOGICAL = 338,
     AS_NUMERIC = 339,
     AS_OBJECT = 340,
     AS_ENUM = 341,
     AS_VARIANT = 342,
     DECLARE = 343,
     OPTIONAL = 344,
     DECLARE_CLASS = 345,
     DECLARE_MEMBER = 346,
     AS_ARRAY_ARRAY = 347,
     AS_BLOCK_ARRAY = 348,
     AS_CHARACTER_ARRAY = 349,
     AS_CLASS_ARRAY = 350,
     AS_DATE_ARRAY = 351,
     AS_LOGICAL_ARRAY = 352,
     AS_NUMERIC_ARRAY = 353,
     AS_OBJECT_ARRAY = 354,
     AS_ENUM_ARRAY = 355,
     PROCREQ = 356,
     GET = 357,
     WITHOBJ = 358,
     FOREACH = 359,
     EPSILON = 360,
     ENUM = 361,
     TRY = 362,
     CATCH = 363,
     SWITCH = 364,
     DEFAULT = 365,
     ENDSWITCH = 366,
     CRITICAL = 367,
     CRITICAL_STATIC = 368,
     CBMARKER = 369,
     BITAND = 370,
     BITOR = 371,
     BITXOR = 372,
     BITSHIFTR = 373,
     BITSHIFTL = 374,
     FINALLY = 375,
     HASHOP = 376,
     UTILITY = 377,
     DIVERT = 378,
     OF = 379,
     FLAGS = 380,
     NAMESPACE = 381,
     RUNTIME_NAMESPACE = 382,
     OPTIONAL_NAMESPACE = 383,
     EXTERNAL_NAMESPACE = 384,
     EXTERNAL_NAMESPACE_MEMBER = 385,
     IMPLEMENTS_NAMESPACE = 386,
     DEFINE_NAMESPACE = 387,
     DEFINE_NAMESPACEMEMBER = 388,
     USING_NAMESPACE = 389,
     WITH_NAMESPACE = 390,
     STARTUP = 391,
     POST = 392,
     MATCH = 393,
     LIKE = 394,
     UNARY = 395,
     PRE = 396
   };
#endif



#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 200 "source\\compiler\\harbour.sly"

   char *  string;      /* to hold a string returned by lex */
   int     iNumber;     /* to hold a temporary integer number */
   HB_LONG lNumber;     /* to hold a temporary long number */
   HB_EXPR_PTR asExpr;
   void * pVoid;        /* to hold any memory structure we may need */
   struct
   {
      int    iNumber;      /* to hold a number returned by lex */
      char * szValue;
   } valInteger;
   struct
   {
      HB_LONG   lNumber;   /* to hold a long number returned by lex */
      char *    szValue;
   } valLong;
   struct
   {
      double   dNumber;    /* to hold a double number returned by lex */
      /* NOTE: Intentionally using "unsigned char" instead of "BYTE" */
      UCHAR    bWidth;     /* to hold the width of the value */
      UCHAR    bDec;       /* to hold the number of decimal points in the value */
      char * szValue;
   } valDouble;
   struct
   {
      char *   string;
      int      length;
      BOOL     dealloc;
   } valChar;



/* Line 214 of yacc.c  */
#line 483 "obj\\63\\harboury.c"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */


/* Line 264 of yacc.c  */
#line 495 "obj\\63\\harboury.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  3
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   10043

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  164
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  281
/* YYNRULES -- Number of rules.  */
#define YYNRULES  905
/* YYNRULES -- Number of states.  */
#define YYNSTATES  1580

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   396

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     153,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,   141,   148,   151,     2,
     157,   156,   146,   144,   155,   145,   161,   147,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   160,   154,
     139,   138,   140,     2,   152,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   163,     2,   162,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   158,     2,   159,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   142,   143,   149,   150
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     4,     7,     8,    10,    12,    14,    16,
      18,    20,    22,    24,    26,    28,    30,    32,    34,    36,
      38,    41,    44,    47,    50,    53,    56,    59,    62,    65,
      68,    71,    74,    77,    80,    83,    88,    95,   100,   102,
     106,   107,   108,   117,   118,   119,   128,   129,   131,   133,
     135,   138,   140,   142,   144,   146,   147,   150,   151,   156,
     160,   161,   163,   165,   167,   169,   171,   173,   175,   178,
     181,   183,   185,   187,   189,   191,   193,   195,   197,   199,
     201,   204,   207,   210,   215,   216,   219,   220,   224,   227,
     230,   233,   236,   239,   242,   245,   248,   251,   254,   257,
     260,   263,   266,   269,   270,   275,   276,   280,   281,   285,
     288,   289,   294,   295,   296,   302,   303,   304,   310,   314,
     318,   319,   324,   325,   329,   330,   335,   340,   347,   348,
     351,   352,   355,   357,   359,   361,   363,   365,   371,   377,
     378,   380,   382,   384,   386,   388,   390,   393,   395,   398,
     402,   407,   409,   412,   416,   421,   423,   425,   427,   429,
     432,   435,   438,   440,   443,   445,   448,   451,   453,   455,
     458,   460,   463,   472,   475,   489,   501,   516,   529,   544,
     557,   566,   573,   583,   591,   601,   609,   612,   616,   620,
     622,   626,   632,   635,   638,   641,   644,   646,   649,   651,
     653,   655,   658,   661,   664,   667,   671,   674,   677,   680,
     683,   686,   689,   692,   695,   698,   701,   704,   707,   710,
     713,   715,   717,   719,   722,   725,   728,   731,   734,   737,
     740,   743,   746,   749,   752,   755,   758,   761,   764,   767,
     770,   773,   776,   779,   782,   785,   788,   791,   794,   797,
     800,   803,   806,   809,   812,   815,   818,   821,   824,   827,
     830,   833,   836,   839,   842,   845,   848,   851,   854,   857,
     861,   866,   872,   877,   882,   884,   886,   888,   892,   894,
     897,   899,   903,   905,   908,   914,   917,   919,   921,   923,
     927,   931,   935,   939,   943,   947,   951,   955,   959,   963,
     967,   971,   975,   979,   983,   987,   991,   995,   999,  1003,
    1007,  1011,  1015,  1018,  1021,  1026,  1031,  1034,  1036,  1038,
    1040,  1042,  1044,  1046,  1048,  1050,  1052,  1053,  1057,  1059,
    1061,  1063,  1065,  1067,  1069,  1071,  1073,  1074,  1078,  1080,
    1081,  1085,  1087,  1088,  1092,  1094,  1095,  1099,  1101,  1102,
    1106,  1108,  1110,  1112,  1114,  1116,  1118,  1120,  1122,  1124,
    1126,  1128,  1130,  1131,  1135,  1136,  1140,  1141,  1143,  1145,
    1147,  1149,  1151,  1153,  1155,  1157,  1159,  1161,  1163,  1166,
    1169,  1172,  1175,  1178,  1181,  1184,  1187,  1190,  1193,  1196,
    1199,  1202,  1205,  1208,  1211,  1214,  1217,  1220,  1223,  1226,
    1229,  1232,  1235,  1238,  1241,  1244,  1247,  1251,  1255,  1259,
    1263,  1267,  1271,  1275,  1279,  1283,  1287,  1291,  1295,  1299,
    1303,  1307,  1311,  1315,  1319,  1323,  1327,  1331,  1335,  1339,
    1343,  1347,  1351,  1355,  1359,  1363,  1367,  1371,  1375,  1379,
    1383,  1387,  1391,  1395,  1399,  1403,  1407,  1411,  1415,  1419,
    1423,  1427,  1431,  1435,  1439,  1443,  1447,  1451,  1455,  1459,
    1463,  1467,  1471,  1475,  1479,  1483,  1487,  1491,  1495,  1499,
    1503,  1507,  1511,  1515,  1519,  1523,  1527,  1531,  1535,  1539,
    1543,  1547,  1551,  1555,  1559,  1563,  1567,  1571,  1575,  1579,
    1583,  1587,  1591,  1595,  1599,  1603,  1607,  1611,  1615,  1619,
    1623,  1627,  1631,  1635,  1639,  1643,  1647,  1651,  1655,  1659,
    1663,  1667,  1671,  1675,  1679,  1683,  1687,  1691,  1695,  1699,
    1703,  1707,  1711,  1715,  1719,  1723,  1727,  1731,  1735,  1739,
    1743,  1747,  1751,  1755,  1759,  1763,  1767,  1771,  1775,  1779,
    1783,  1787,  1791,  1795,  1799,  1803,  1807,  1811,  1815,  1819,
    1823,  1827,  1831,  1835,  1839,  1843,  1847,  1851,  1855,  1859,
    1863,  1867,  1871,  1875,  1879,  1883,  1887,  1891,  1895,  1899,
    1903,  1907,  1911,  1915,  1919,  1923,  1927,  1931,  1935,  1939,
    1943,  1947,  1951,  1955,  1959,  1963,  1967,  1971,  1975,  1979,
    1983,  1985,  1987,  1989,  1991,  1993,  1995,  1999,  2003,  2007,
    2011,  2015,  2019,  2023,  2027,  2031,  2035,  2039,  2043,  2047,
    2051,  2055,  2059,  2063,  2067,  2071,  2075,  2079,  2083,  2087,
    2091,  2094,  2097,  2101,  2106,  2108,  2109,  2110,  2111,  2112,
    2113,  2131,  2133,  2137,  2138,  2141,  2142,  2150,  2152,  2153,
    2162,  2163,  2165,  2167,  2171,  2174,  2175,  2180,  2183,  2186,
    2189,  2192,  2195,  2197,  2199,  2201,  2203,  2206,  2209,  2213,
    2217,  2221,  2225,  2228,  2229,  2234,  2235,  2240,  2241,  2246,
    2247,  2252,  2254,  2258,  2260,  2264,  2266,  2269,  2274,  2277,
    2281,  2282,  2286,  2287,  2288,  2295,  2298,  2302,  2305,  2308,
    2312,  2317,  2318,  2323,  2326,  2331,  2335,  2336,  2341,  2344,
    2349,  2350,  2359,  2360,  2366,  2370,  2374,  2375,  2383,  2385,
    2389,  2391,  2394,  2396,  2399,  2400,  2407,  2408,  2412,  2413,
    2415,  2417,  2421,  2424,  2428,  2434,  2439,  2445,  2453,  2457,
    2462,  2469,  2475,  2482,  2491,  2492,  2498,  2500,  2504,  2506,
    2508,  2510,  2512,  2514,  2516,  2518,  2520,  2523,  2527,  2531,
    2536,  2537,  2539,  2540,  2541,  2548,  2549,  2554,  2555,  2556,
    2563,  2564,  2565,  2573,  2575,  2577,  2581,  2585,  2588,  2593,
    2595,  2597,  2598,  2602,  2604,  2607,  2608,  2609,  2616,  2617,
    2618,  2626,  2627,  2628,  2634,  2635,  2641,  2645,  2650,  2652,
    2654,  2656,  2657,  2663,  2664,  2666,  2668,  2670,  2673,  2676,
    2677,  2678,  2685,  2686,  2687,  2695,  2697,  2700,  2702,  2705,
    2709,  2713,  2717,  2721,  2725,  2727,  2728,  2732,  2733,  2734,
    2742,  2744,  2746,  2748,  2749,  2750,  2751,  2764,  2766,  2768,
    2769,  2772,  2775,  2779,  2782,  2786,  2787,  2788,  2789,  2799,
    2800,  2807,  2808,  2809,  2810,  2819,  2820,  2824,  2828,  2830,
    2833,  2834,  2835,  2836,  2837,  2848,  2849,  2853,  2855,  2856,
    2860,  2863,  2865,  2867,  2869,  2871,  2874,  2879,  2883,  2885,
    2888,  2890,  2893,  2897,  2899,  2902,  2908,  2915,  2917,  2919,
    2920,  2928,  2930,  2931,  2939,  2943,  2947,  2949,  2951,  2953,
    2955,  2956,  2964,  2966,  2968,  2970,  2972,  2975,  2978,  2981,
    2984,  2988,  2992,  2994,  2998,  3000
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     165,     0,    -1,    -1,   166,   167,    -1,    -1,   444,    -1,
     314,    -1,   328,    -1,   331,    -1,   334,    -1,   347,    -1,
     171,    -1,   184,    -1,   168,    -1,   169,    -1,   434,    -1,
     436,    -1,   438,    -1,   442,    -1,   431,    -1,   167,   444,
      -1,   167,   314,    -1,   167,   328,    -1,   167,   331,    -1,
     167,   334,    -1,   167,   347,    -1,   167,   171,    -1,   167,
     184,    -1,   167,   168,    -1,   167,   169,    -1,   167,   434,
      -1,   167,   436,    -1,   167,   438,    -1,   167,   442,    -1,
     167,   431,    -1,    75,    10,    22,   444,    -1,    75,    10,
      22,   152,    22,   444,    -1,   101,   170,   156,   444,    -1,
      22,    -1,    22,   144,    22,    -1,    -1,    -1,   176,     3,
     206,   172,   177,   183,   173,   444,    -1,    -1,    -1,   176,
       4,   206,   174,   177,   183,   175,   444,    -1,    -1,    13,
      -1,   122,    -1,   136,    -1,   122,    13,    -1,    29,    -1,
      30,    -1,   112,    -1,   113,    -1,    -1,   157,   156,    -1,
      -1,   157,   178,   182,   156,    -1,   157,   105,   156,    -1,
      -1,   180,    -1,    84,    -1,    80,    -1,    82,    -1,    83,
      -1,    79,    -1,    85,    -1,    81,   206,    -1,    86,   206,
      -1,    87,    -1,   181,    -1,    78,    -1,    98,    -1,    94,
      -1,    96,    -1,    97,    -1,    92,    -1,    93,    -1,    99,
      -1,    95,   206,    -1,   100,   206,    -1,   206,   179,    -1,
     182,   155,   206,   179,    -1,    -1,   131,   206,    -1,    -1,
     350,   185,   198,    -1,   409,   198,    -1,   243,   198,    -1,
     239,   198,    -1,   253,   198,    -1,   254,   198,    -1,   230,
     198,    -1,   233,   198,    -1,   307,   198,    -1,   270,   198,
      -1,   269,   198,    -1,   280,   198,    -1,   273,   198,    -1,
     272,   198,    -1,   428,   198,    -1,    69,   198,    -1,    -1,
      69,   186,   263,   444,    -1,    -1,    30,   187,   198,    -1,
      -1,    48,   188,   198,    -1,     6,   198,    -1,    -1,     6,
     189,   263,   444,    -1,    -1,    -1,    34,   190,   320,   191,
     444,    -1,    -1,    -1,    67,   192,   320,   193,   444,    -1,
      28,   204,   444,    -1,    27,   205,   444,    -1,    -1,    26,
     206,   194,   444,    -1,    -1,     1,   195,   444,    -1,    -1,
      57,   196,   333,   444,    -1,   123,   263,   197,   198,    -1,
     123,   263,   124,   263,   197,   198,    -1,    -1,   125,   263,
      -1,    -1,   199,   444,    -1,   444,    -1,   168,    -1,   184,
      -1,   334,    -1,   201,    -1,   202,     3,   206,   177,   444,
      -1,   202,     4,   206,   177,   444,    -1,    -1,    13,    -1,
      29,    -1,    30,    -1,   112,    -1,   113,    -1,   200,    -1,
     203,   200,    -1,   206,    -1,   242,   206,    -1,   204,   155,
     206,    -1,   204,   155,   242,   206,    -1,   206,    -1,   242,
     206,    -1,   205,   155,   206,    -1,   205,   155,   242,   206,
      -1,     5,    -1,     8,    -1,    10,    -1,    11,    -1,    10,
      40,    -1,    11,    40,    -1,     8,    40,    -1,     7,    -1,
     209,    40,    -1,    22,    -1,   211,    40,    -1,   295,    40,
      -1,    23,    -1,    24,    -1,   214,    40,    -1,    74,    -1,
     216,    40,    -1,   158,    64,   207,   147,   207,   147,   207,
     159,    -1,   218,    40,    -1,   158,    64,   207,   147,   207,
     147,   207,   207,   160,   207,   160,   207,   159,    -1,   158,
      64,   207,   147,   207,   147,   207,   207,   160,   207,   159,
      -1,   158,    64,   207,   147,   207,   147,   207,   207,   160,
     207,   160,   207,    58,   159,    -1,   158,    64,   207,   147,
     207,   147,   207,   207,   160,   207,    58,   159,    -1,   158,
      64,   207,   147,   207,   147,   207,   207,   160,   207,   160,
     207,    59,   159,    -1,   158,    64,   207,   147,   207,   147,
     207,   207,   160,   207,    59,   159,    -1,   158,    64,   207,
     160,   207,   160,   207,   159,    -1,   158,    64,   207,   160,
     207,   159,    -1,   158,    64,   207,   160,   207,   160,   207,
      58,   159,    -1,   158,    64,   207,   160,   207,    58,   159,
      -1,   158,    64,   207,   160,   207,   160,   207,    59,   159,
      -1,   158,    64,   207,   160,   207,    59,   159,    -1,   220,
      40,    -1,   158,   244,   159,    -1,   158,   224,   159,    -1,
     121,    -1,   263,   121,   266,    -1,   224,   155,   263,   121,
     266,    -1,   222,    40,    -1,   222,   284,    -1,   211,   284,
      -1,   226,    40,    -1,   206,    -1,   206,    40,    -1,    76,
      -1,   231,    -1,    77,    -1,   230,    40,    -1,   151,   307,
      -1,   233,    40,    -1,    55,    40,    -1,    55,    40,   235,
      -1,   235,   229,    -1,   235,   208,    -1,   235,   308,    -1,
     235,   232,    -1,   235,   234,    -1,   235,   210,    -1,   235,
     212,    -1,   235,   215,    -1,   235,   219,    -1,   235,   221,
      -1,   235,   213,    -1,   235,   217,    -1,   235,   225,    -1,
     235,   227,    -1,   206,    -1,   230,    -1,   233,    -1,   208,
     237,    -1,   232,   237,    -1,   234,   237,    -1,   308,   237,
      -1,   210,   237,    -1,   212,   237,    -1,   215,   237,    -1,
     219,   237,    -1,   221,   237,    -1,   213,   237,    -1,   217,
     237,    -1,   225,   237,    -1,   227,   237,    -1,   241,   237,
      -1,   248,   237,    -1,   252,   237,    -1,   255,   237,    -1,
     229,   237,    -1,   235,   237,    -1,   236,   237,    -1,   208,
     307,    -1,   229,   307,    -1,   232,   307,    -1,   234,   307,
      -1,   308,   307,    -1,   235,   307,    -1,   209,   284,    -1,
     295,   284,    -1,   214,   284,    -1,   218,   284,    -1,   220,
     284,    -1,   216,   284,    -1,   228,   284,    -1,   238,   284,
      -1,   239,   284,    -1,   230,   284,    -1,   233,   284,    -1,
     250,   284,    -1,   253,   284,    -1,   251,   284,    -1,   254,
     284,    -1,   243,   284,    -1,   307,   284,    -1,   223,   284,
      -1,   240,    40,    -1,   433,   161,    -1,   242,   206,   161,
      -1,   206,   157,   244,   156,    -1,   242,   206,   157,   244,
     156,    -1,   230,   157,   244,   156,    -1,   233,   157,   244,
     156,    -1,   287,    -1,   313,    -1,   245,    -1,   244,   155,
     245,    -1,   266,    -1,   152,   263,    -1,   247,    -1,   246,
     155,   247,    -1,   266,    -1,   152,   206,    -1,   152,   206,
     157,   246,   156,    -1,   243,    40,    -1,   206,    -1,   230,
      -1,   233,    -1,   207,   160,   249,    -1,   209,   160,   249,
      -1,   211,   160,   249,    -1,   295,   160,   249,    -1,   214,
     160,   249,    -1,   218,   160,   249,    -1,   220,   160,   249,
      -1,   216,   160,   249,    -1,   222,   160,   249,    -1,   223,
     160,   249,    -1,   226,   160,   249,    -1,   228,   160,   249,
      -1,   238,   160,   249,    -1,   239,   160,   249,    -1,   230,
     160,   249,    -1,   233,   160,   249,    -1,   243,   160,   249,
      -1,   307,   160,   249,    -1,   240,   160,   249,    -1,   253,
     160,   249,    -1,   250,   160,   249,    -1,   254,   160,   249,
      -1,   251,   160,   249,    -1,   160,   249,    -1,   250,    40,
      -1,   250,   157,   244,   156,    -1,   251,   157,   244,   156,
      -1,   253,    40,    -1,   207,    -1,   209,    -1,   211,    -1,
     295,    -1,   298,    -1,   214,    -1,   218,    -1,   220,    -1,
     216,    -1,    -1,   216,   257,   180,    -1,   222,    -1,   223,
      -1,   226,    -1,   238,    -1,   230,    -1,   233,    -1,   240,
      -1,   243,    -1,    -1,   243,   258,   180,    -1,   250,    -1,
      -1,   250,   259,   180,    -1,   253,    -1,    -1,   253,   260,
     180,    -1,   251,    -1,    -1,   251,   261,   180,    -1,   254,
      -1,    -1,   254,   262,   180,    -1,   239,    -1,   272,    -1,
     280,    -1,   269,    -1,   270,    -1,   271,    -1,   281,    -1,
     282,    -1,   283,    -1,   228,    -1,   256,    -1,   307,    -1,
      -1,   228,   264,   180,    -1,    -1,   307,   265,   180,    -1,
      -1,   263,    -1,   206,    -1,   238,    -1,   230,    -1,   233,
      -1,   250,    -1,   251,    -1,   240,    -1,   307,    -1,    38,
      -1,    39,    -1,   207,   268,    -1,   209,   268,    -1,   211,
     268,    -1,   295,   268,    -1,   214,   268,    -1,   218,   268,
      -1,   220,   268,    -1,   216,   268,    -1,   222,   268,    -1,
     223,   268,    -1,   226,   268,    -1,   228,   268,    -1,   230,
     268,    -1,   233,   268,    -1,   238,   268,    -1,   239,   268,
      -1,   240,   268,    -1,   307,   268,    -1,   243,   268,    -1,
     250,   268,    -1,   253,   268,    -1,   251,   268,    -1,   254,
     268,    -1,    38,   263,    -1,    39,   263,    -1,    33,   263,
      -1,   145,   263,    -1,   144,   263,    -1,   207,     9,   263,
      -1,   209,     9,   263,    -1,   211,     9,   263,    -1,   295,
       9,   263,    -1,   214,     9,   263,    -1,   218,     9,   263,
      -1,   220,     9,   263,    -1,   216,     9,   263,    -1,   222,
       9,   263,    -1,   223,     9,   263,    -1,   226,     9,   263,
      -1,   228,     9,   263,    -1,   230,     9,   263,    -1,   233,
       9,   263,    -1,   238,     9,   263,    -1,   239,     9,   263,
      -1,   240,     9,   263,    -1,   307,     9,   263,    -1,   243,
       9,   263,    -1,   250,     9,   263,    -1,   251,     9,   263,
      -1,   253,     9,   263,    -1,   254,     9,   263,    -1,   207,
     138,   263,    -1,   209,   138,   263,    -1,   211,   138,   263,
      -1,   295,   138,   263,    -1,   214,   138,   263,    -1,   218,
     138,   263,    -1,   220,   138,   263,    -1,   216,   138,   263,
      -1,   222,   138,   263,    -1,   223,   138,   263,    -1,   226,
     138,   263,    -1,   228,   138,   263,    -1,   230,   138,   263,
      -1,   233,   138,   263,    -1,   238,   138,   263,    -1,   239,
     138,   263,    -1,   240,   138,   263,    -1,   307,   138,   263,
      -1,   243,   138,   263,    -1,   250,   138,   263,    -1,   251,
     138,   263,    -1,   253,   138,   263,    -1,   254,   138,   263,
      -1,   207,    60,   263,    -1,   209,    60,   263,    -1,   211,
      60,   263,    -1,   295,    60,   263,    -1,   214,    60,   263,
      -1,   218,    60,   263,    -1,   220,    60,   263,    -1,   216,
      60,   263,    -1,   222,    60,   263,    -1,   223,    60,   263,
      -1,   226,    60,   263,    -1,   228,    60,   263,    -1,   230,
      60,   263,    -1,   233,    60,   263,    -1,   238,    60,   263,
      -1,   239,    60,   263,    -1,   240,    60,   263,    -1,   307,
      60,   263,    -1,   243,    60,   263,    -1,   250,    60,   263,
      -1,   251,    60,   263,    -1,   253,    60,   263,    -1,   254,
      60,   263,    -1,   207,    61,   263,    -1,   209,    61,   263,
      -1,   211,    61,   263,    -1,   295,    61,   263,    -1,   214,
      61,   263,    -1,   218,    61,   263,    -1,   220,    61,   263,
      -1,   216,    61,   263,    -1,   222,    61,   263,    -1,   223,
      61,   263,    -1,   226,    61,   263,    -1,   228,    61,   263,
      -1,   230,    61,   263,    -1,   233,    61,   263,    -1,   238,
      61,   263,    -1,   239,    61,   263,    -1,   240,    61,   263,
      -1,   307,    61,   263,    -1,   243,    61,   263,    -1,   250,
      61,   263,    -1,   251,    61,   263,    -1,   253,    61,   263,
      -1,   254,    61,   263,    -1,   207,    62,   263,    -1,   209,
      62,   263,    -1,   211,    62,   263,    -1,   295,    62,   263,
      -1,   214,    62,   263,    -1,   218,    62,   263,    -1,   220,
      62,   263,    -1,   216,    62,   263,    -1,   222,    62,   263,
      -1,   223,    62,   263,    -1,   226,    62,   263,    -1,   228,
      62,   263,    -1,   230,    62,   263,    -1,   233,    62,   263,
      -1,   238,    62,   263,    -1,   239,    62,   263,    -1,   240,
      62,   263,    -1,   307,    62,   263,    -1,   243,    62,   263,
      -1,   250,    62,   263,    -1,   251,    62,   263,    -1,   253,
      62,   263,    -1,   254,    62,   263,    -1,   207,    63,   263,
      -1,   209,    63,   263,    -1,   211,    63,   263,    -1,   295,
      63,   263,    -1,   214,    63,   263,    -1,   218,    63,   263,
      -1,   220,    63,   263,    -1,   216,    63,   263,    -1,   222,
      63,   263,    -1,   223,    63,   263,    -1,   226,    63,   263,
      -1,   228,    63,   263,    -1,   230,    63,   263,    -1,   233,
      63,   263,    -1,   238,    63,   263,    -1,   239,    63,   263,
      -1,   240,    63,   263,    -1,   307,    63,   263,    -1,   243,
      63,   263,    -1,   250,    63,   263,    -1,   251,    63,   263,
      -1,   253,    63,   263,    -1,   254,    63,   263,    -1,   207,
      66,   263,    -1,   209,    66,   263,    -1,   211,    66,   263,
      -1,   295,    66,   263,    -1,   214,    66,   263,    -1,   218,
      66,   263,    -1,   220,    66,   263,    -1,   216,    66,   263,
      -1,   222,    66,   263,    -1,   223,    66,   263,    -1,   226,
      66,   263,    -1,   228,    66,   263,    -1,   230,    66,   263,
      -1,   233,    66,   263,    -1,   238,    66,   263,    -1,   239,
      66,   263,    -1,   240,    66,   263,    -1,   307,    66,   263,
      -1,   243,    66,   263,    -1,   250,    66,   263,    -1,   251,
      66,   263,    -1,   253,    66,   263,    -1,   254,    66,   263,
      -1,   207,    65,   263,    -1,   209,    65,   263,    -1,   211,
      65,   263,    -1,   295,    65,   263,    -1,   214,    65,   263,
      -1,   218,    65,   263,    -1,   220,    65,   263,    -1,   216,
      65,   263,    -1,   222,    65,   263,    -1,   223,    65,   263,
      -1,   226,    65,   263,    -1,   228,    65,   263,    -1,   230,
      65,   263,    -1,   233,    65,   263,    -1,   238,    65,   263,
      -1,   239,    65,   263,    -1,   240,    65,   263,    -1,   307,
      65,   263,    -1,   243,    65,   263,    -1,   250,    65,   263,
      -1,   251,    65,   263,    -1,   253,    65,   263,    -1,   254,
      65,   263,    -1,   274,    -1,   275,    -1,   276,    -1,   277,
      -1,   278,    -1,   279,    -1,   263,   144,   263,    -1,   263,
     145,   263,    -1,   263,   146,   263,    -1,   263,   147,   263,
      -1,   263,   148,   263,    -1,   263,    64,   263,    -1,   263,
     115,   263,    -1,   263,   116,   263,    -1,   263,   117,   263,
      -1,   263,   118,   263,    -1,   263,   119,   263,    -1,   263,
      31,   263,    -1,   263,    32,   263,    -1,   263,    35,   263,
      -1,   263,   139,   263,    -1,   263,   140,   263,    -1,   263,
      53,   263,    -1,   263,    54,   263,    -1,   263,    36,   263,
      -1,   263,    37,   263,    -1,   263,   141,   263,    -1,   263,
     138,   263,    -1,   263,   143,   263,    -1,   263,   142,   263,
      -1,   285,   162,    -1,   163,   263,    -1,   285,   155,   263,
      -1,   285,   162,   163,   263,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    -1,   286,   267,   155,   288,   266,   289,   155,
     266,   290,   155,   266,   291,   155,   266,   292,   294,   156,
      -1,   245,    -1,   293,   155,   245,    -1,    -1,   155,   293,
      -1,    -1,   158,   114,   296,   297,   114,   301,   159,    -1,
     302,    -1,    -1,   139,   116,   299,   300,   116,   444,   167,
     140,    -1,    -1,   182,    -1,   263,    -1,   301,   155,   263,
      -1,   206,   179,    -1,    -1,   302,   155,   206,   179,    -1,
     302,   155,    -1,   309,   156,    -1,   310,   156,    -1,   311,
     156,    -1,   312,   156,    -1,   303,    -1,   304,    -1,   305,
      -1,   306,    -1,   307,    40,    -1,   157,   245,    -1,   309,
     155,   245,    -1,   310,   155,   245,    -1,   311,   155,   245,
      -1,   312,   155,   245,    -1,    16,   305,    -1,    -1,    12,
     315,   319,   444,    -1,    -1,    13,   316,   319,   444,    -1,
      -1,    14,   317,   319,   444,    -1,    -1,    15,   318,   319,
     444,    -1,   322,    -1,   319,   155,   322,    -1,   321,    -1,
     320,   155,   321,    -1,   322,    -1,   230,   179,    -1,   230,
     179,     9,   263,    -1,   230,   326,    -1,   230,   326,   181,
      -1,    -1,   206,   179,   323,    -1,    -1,    -1,   206,   179,
     324,     9,   325,   263,    -1,   206,   326,    -1,   206,   326,
     181,    -1,   327,   162,    -1,   163,   263,    -1,   327,   155,
     263,    -1,   327,   162,   163,   263,    -1,    -1,    55,   329,
     330,   444,    -1,   206,   179,    -1,   330,   155,   206,   179,
      -1,   330,    56,   206,    -1,    -1,    46,   332,   333,   444,
      -1,   206,   179,    -1,   333,   155,   206,   179,    -1,    -1,
      88,   206,   157,   335,   344,   156,   179,   444,    -1,    -1,
      88,   206,   336,   339,   444,    -1,    90,   206,   444,    -1,
      91,   340,   444,    -1,    -1,    91,   158,   179,   337,   338,
     159,   444,    -1,   342,    -1,   338,   155,   342,    -1,   340,
      -1,   339,   340,    -1,   342,    -1,   339,   342,    -1,    -1,
     206,   157,   341,   344,   156,   179,    -1,    -1,   206,   343,
     179,    -1,    -1,   345,    -1,   346,    -1,   345,   155,   346,
      -1,   206,   179,    -1,   152,   206,   179,    -1,   152,   206,
     157,   246,   156,    -1,   345,   155,   206,   179,    -1,   345,
     155,   152,   206,   179,    -1,   345,   155,   152,   206,   157,
     246,   156,    -1,    89,   206,   179,    -1,    89,   152,   206,
     179,    -1,    89,   152,   206,   157,   246,   156,    -1,   346,
     155,    89,   206,   179,    -1,   346,   155,    89,   152,   206,
     179,    -1,   346,   155,    89,   152,   206,   157,   246,   156,
      -1,    -1,   106,   206,   348,     9,   349,    -1,   206,    -1,
     349,   155,   206,    -1,   351,    -1,   364,    -1,   378,    -1,
     393,    -1,   398,    -1,   405,    -1,   411,    -1,   418,    -1,
     353,   363,    -1,   353,   356,   363,    -1,   353,   358,   363,
      -1,   353,   358,   356,   363,    -1,    -1,   203,    -1,    -1,
      -1,    17,   263,   354,   444,   355,   352,    -1,    -1,    18,
     444,   357,   352,    -1,    -1,    -1,    19,   359,   263,   444,
     360,   352,    -1,    -1,    -1,   358,    19,   361,   263,   444,
     362,   352,    -1,    21,    -1,    20,    -1,   368,   369,   365,
      -1,   368,   374,   365,    -1,   368,   365,    -1,   368,   369,
     374,   365,    -1,    44,    -1,    20,    -1,    -1,    41,   367,
     444,    -1,   366,    -1,   366,   203,    -1,    -1,    -1,    42,
     370,   263,   444,   371,   352,    -1,    -1,    -1,   369,    42,
     372,   263,   444,   373,   352,    -1,    -1,    -1,    43,   375,
     444,   376,   352,    -1,    -1,   374,    43,   377,   444,   352,
      -1,   381,   385,   379,    -1,   381,   385,   391,   379,    -1,
     380,    -1,   111,    -1,    20,    -1,    -1,   109,   263,   382,
     444,   383,    -1,    -1,   384,    -1,   444,    -1,   168,    -1,
     384,   444,    -1,   384,   168,    -1,    -1,    -1,    42,   386,
     390,   444,   387,   352,    -1,    -1,    -1,   385,    42,   388,
     390,   444,   389,   352,    -1,    10,    -1,   145,    10,    -1,
      11,    -1,   145,    11,    -1,   390,   144,   390,    -1,   390,
     145,   390,    -1,   390,   116,   390,    -1,   390,   115,   390,
      -1,   157,   390,   156,    -1,    22,    -1,    -1,   110,   392,
     352,    -1,    -1,    -1,   396,   263,   444,   394,   352,   395,
     397,    -1,    47,    -1,    20,    -1,    45,    -1,    -1,    -1,
      -1,    49,   267,   402,   263,   399,    51,   263,   403,   400,
     444,   401,   404,    -1,   138,    -1,     9,    -1,    -1,    52,
     263,    -1,   352,    50,    -1,   352,    50,   206,    -1,   352,
      20,    -1,   352,    20,   206,    -1,    -1,    -1,    -1,   104,
     206,   406,    56,   263,   407,   444,   408,   404,    -1,    -1,
     103,   263,   444,   410,   352,    20,    -1,    -1,    -1,    -1,
      68,   412,   444,   352,   413,   415,   414,    20,    -1,    -1,
     416,   444,   352,    -1,   417,   444,   352,    -1,    70,    -1,
      71,   206,    -1,    -1,    -1,    -1,    -1,   107,   419,   444,
     352,   420,   425,   421,   423,   422,    20,    -1,    -1,   424,
     444,   352,    -1,   120,    -1,    -1,   426,   444,   352,    -1,
     108,   206,    -1,   108,    -1,   206,    -1,   230,    -1,   233,
      -1,    72,   427,    -1,    72,   427,    73,   429,    -1,    47,
      73,   429,    -1,   155,    -1,   155,   430,    -1,   430,    -1,
     429,   155,    -1,   429,   155,   430,    -1,   206,    -1,   152,
     206,    -1,   152,   206,   157,   246,   156,    -1,   152,   242,
     206,   157,   246,   156,    -1,   256,    -1,   307,    -1,    -1,
     135,   433,   444,   432,   167,    20,   444,    -1,   206,    -1,
      -1,   437,   206,   444,   435,   167,    20,   444,    -1,   129,
     206,   444,    -1,   130,   206,   444,    -1,   126,    -1,   127,
      -1,   128,    -1,   131,    -1,    -1,   132,   206,   444,   439,
     440,    20,   444,    -1,   444,    -1,   168,    -1,   438,    -1,
     441,    -1,   440,   444,    -1,   440,   168,    -1,   440,   438,
      -1,   440,   441,    -1,   133,   206,   444,    -1,   134,   443,
     444,    -1,   206,    -1,   443,   155,   206,    -1,   153,    -1,
     154,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   355,   355,   355,   356,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   391,   392,   395,   398,   406,
     424,   430,   423,   467,   473,   466,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   522,   523,   524,   524,   525,
     528,   529,   532,   533,   534,   535,   536,   537,   538,   539,
     540,   541,   544,   545,   546,   547,   548,   549,   550,   551,
     552,   553,   556,   564,   577,   578,   606,   606,   607,   608,
     609,   610,   611,   612,   617,   622,   623,   624,   625,   626,
     627,   628,   629,   631,   631,   635,   635,   636,   636,   637,
     651,   651,   675,   677,   675,   678,   680,   678,   682,   683,
     685,   684,   706,   706,   707,   707,   718,   724,   733,   734,
     737,   737,   740,   741,   742,   743,   744,   747,   748,   751,
     752,   753,   754,   755,   756,   759,   760,   763,   764,   765,
     766,   769,   770,   771,   772,   775,   780,   781,   782,   785,
     786,   787,   797,   800,   805,   824,   829,   834,   835,   838,
     843,   846,   851,   859,   862,   876,   889,   903,   916,   930,
     943,   954,   964,   975,   985,   996,  1008,  1014,  1017,  1020,
    1021,  1022,  1025,  1030,  1031,  1034,  1039,  1068,  1073,  1086,
    1092,  1198,  1203,  1206,  1213,  1214,  1219,  1220,  1221,  1222,
    1223,  1224,  1225,  1226,  1227,  1228,  1229,  1230,  1231,  1232,
    1235,  1236,  1237,  1240,  1241,  1242,  1243,  1244,  1245,  1246,
    1247,  1248,  1249,  1250,  1251,  1252,  1253,  1254,  1255,  1256,
    1257,  1258,  1259,  1268,  1269,  1270,  1271,  1272,  1273,  1278,
    1279,  1280,  1281,  1282,  1283,  1284,  1285,  1286,  1287,  1288,
    1289,  1290,  1291,  1292,  1293,  1294,  1295,  1298,  1302,  1303,
    1321,  1322,  1323,  1324,  1325,  1326,  1329,  1330,  1333,  1334,
    1399,  1400,  1403,  1404,  1405,  1408,  1413,  1414,  1415,  1418,
    1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,
    1429,  1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,
    1439,  1440,  1443,  1455,  1461,  1464,  1473,  1481,  1482,  1483,
    1484,  1485,  1486,  1487,  1488,  1489,  1490,  1490,  1491,  1492,
    1493,  1494,  1495,  1496,  1497,  1498,  1499,  1499,  1500,  1501,
    1501,  1502,  1503,  1503,  1504,  1505,  1505,  1506,  1507,  1507,
    1508,  1509,  1510,  1511,  1512,  1513,  1514,  1515,  1516,  1519,
    1520,  1521,  1522,  1522,  1523,  1523,  1526,  1527,  1530,  1531,
    1532,  1533,  1534,  1535,  1536,  1537,  1543,  1544,  1551,  1552,
    1553,  1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,
    1573,  1576,  1577,  1580,  1581,  1582,  1589,  1590,  1591,  1592,
    1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,
    1603,  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1611,  1614,
    1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
    1625,  1626,  1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,  1658,  1659,  1660,  1661,  1664,  1665,  1666,  1667,  1668,
    1669,  1670,  1671,  1672,  1673,  1674,  1675,  1676,  1677,  1678,
    1679,  1680,  1681,  1682,  1683,  1684,  1685,  1686,  1689,  1690,
    1691,  1692,  1693,  1694,  1695,  1696,  1697,  1698,  1699,  1700,
    1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,
    1711,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,
    1733,  1734,  1735,  1736,  1739,  1740,  1741,  1742,  1743,  1744,
    1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,
    1755,  1756,  1757,  1758,  1759,  1760,  1761,  1764,  1765,  1766,
    1767,  1768,  1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,
    1777,  1778,  1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,
    1789,  1790,  1791,  1792,  1793,  1794,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,  1805,  1806,  1807,  1810,  1811,  1814,
    1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,
    1827,  1833,  1834,  1835,  1838,  1842,  1955,  2020,  2025,  2030,
    1841,  2076,  2077,  2080,  2081,  2086,  2084,  2152,  2176,  2176,
    2184,  2185,  2201,  2202,  2209,  2210,  2211,  2212,  2222,  2225,
    2228,  2231,  2234,  2235,  2236,  2237,  2240,  2243,  2246,  2249,
    2252,  2253,  2256,  2259,  2259,  2260,  2260,  2261,  2261,  2262,
    2262,  2265,  2266,  2269,  2270,  2278,  2279,  2281,  2285,  2292,
    2301,  2301,  2327,  2330,  2327,  2367,  2368,  2374,  2377,  2378,
    2379,  2383,  2383,  2386,  2387,  2388,  2391,  2391,  2394,  2395,
    2398,  2398,  2422,  2422,  2423,  2424,  2425,  2425,  2428,  2429,
    2432,  2433,  2434,  2435,  2438,  2438,  2460,  2460,  2514,  2515,
    2516,  2517,  2520,  2521,  2522,  2523,  2524,  2525,  2528,  2529,
    2530,  2531,  2532,  2533,  2536,  2536,  2539,  2540,  2543,  2544,
    2545,  2546,  2547,  2548,  2549,  2550,  2553,  2554,  2555,  2556,
    2559,  2560,  2563,  2572,  2563,  2579,  2579,  2583,  2584,  2583,
    2593,  2594,  2593,  2604,  2605,  2608,  2612,  2616,  2619,  2625,
    2631,  2639,  2639,  2652,  2653,  2661,  2662,  2661,  2673,  2674,
    2673,  2686,  2687,  2686,  2694,  2694,  2698,  2707,  2718,  2769,
    2770,  2773,  2773,  2788,  2789,  2792,  2793,  2794,  2795,  2798,
    2799,  2798,  2818,  2819,  2818,  2844,  2845,  2846,  2847,  2848,
    2853,  2858,  2863,  2868,  2869,  2883,  2882,  2945,  2958,  2944,
    2974,  2987,  2988,  2992,  2999,  3011,  2991,  3093,  3094,  3097,
    3098,  3101,  3105,  3109,  3113,  3120,  3128,  3136,  3119,  3156,
    3155,  3172,  3184,  3192,  3172,  3216,  3217,  3218,  3221,  3232,
    3245,  3253,  3262,  3270,  3244,  3320,  3321,  3324,  3333,  3334,
    3337,  3347,  3365,  3366,  3367,  3370,  3374,  3376,  3380,  3381,
    3382,  3383,  3384,  3387,  3398,  3399,  3400,  3401,  3402,  3406,
    3405,  3459,  3463,  3462,  3490,  3507,  3529,  3530,  3531,  3532,
    3536,  3535,  3546,  3547,  3548,  3549,  3550,  3552,  3554,  3556,
    3560,  3567,  3577,  3594,  3614,  3615
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "FUNCTION", "PROCEDURE", "IDENTIFIER",
  "RETURN", "NIL", "NUM_DOUBLE", "INASSIGN", "NUM_INTEGER", "NUM_LONG",
  "LOCAL", "STATIC", "GLOBAL", "EXTERNGLOBAL", "IIF", "IF", "ELSE",
  "ELSEIF", "END", "ENDIF", "LITERAL", "TRUEVALUE", "FALSEVALUE",
  "NULLVALUE", "ANNOUNCE", "DYNAMIC", "EXTERN", "INIT", "EXIT", "AND",
  "OR", "NOT", "PUBLIC", "EQ", "NE1", "NE2", "INC", "DEC", "ALIASOP",
  "DOCASE", "CASE", "OTHERWISE", "ENDCASE", "ENDDO", "MEMVAR", "WHILE",
  "LOOP", "FOR", "NEXT", "TO", "STEP", "LE", "GE", "FIELD", "IN",
  "PARAMETERS", "H12AM", "H12PM", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ",
  "POWER", "EXPEQ", "MODEQ", "PRIVATE", "BEGINSEQ", "BREAK", "RECOVER",
  "RECOVERUSING", "DO", "WITH", "SELF", "LINE", "MACROVAR", "MACROTEXT",
  "AS_ARRAY", "AS_BLOCK", "AS_CHARACTER", "AS_CLASS", "AS_DATE",
  "AS_LOGICAL", "AS_NUMERIC", "AS_OBJECT", "AS_ENUM", "AS_VARIANT",
  "DECLARE", "OPTIONAL", "DECLARE_CLASS", "DECLARE_MEMBER",
  "AS_ARRAY_ARRAY", "AS_BLOCK_ARRAY", "AS_CHARACTER_ARRAY",
  "AS_CLASS_ARRAY", "AS_DATE_ARRAY", "AS_LOGICAL_ARRAY",
  "AS_NUMERIC_ARRAY", "AS_OBJECT_ARRAY", "AS_ENUM_ARRAY", "PROCREQ", "GET",
  "WITHOBJ", "FOREACH", "EPSILON", "ENUM", "TRY", "CATCH", "SWITCH",
  "DEFAULT", "ENDSWITCH", "CRITICAL", "CRITICAL_STATIC", "CBMARKER",
  "BITAND", "BITOR", "BITXOR", "BITSHIFTR", "BITSHIFTL", "FINALLY",
  "HASHOP", "UTILITY", "DIVERT", "OF", "FLAGS", "NAMESPACE",
  "RUNTIME_NAMESPACE", "OPTIONAL_NAMESPACE", "EXTERNAL_NAMESPACE",
  "EXTERNAL_NAMESPACE_MEMBER", "IMPLEMENTS_NAMESPACE", "DEFINE_NAMESPACE",
  "DEFINE_NAMESPACEMEMBER", "USING_NAMESPACE", "WITH_NAMESPACE", "STARTUP",
  "POST", "'='", "'<'", "'>'", "'$'", "MATCH", "LIKE", "'+'", "'-'", "'*'",
  "'/'", "'%'", "UNARY", "PRE", "'&'", "'@'", "'\\n'", "';'", "','", "')'",
  "'('", "'{'", "'}'", "':'", "'.'", "']'", "'['", "$accept", "Main",
  "$@1", "Source", "Line", "ProcReq", "CompTimeStr", "Function", "$@2",
  "$@3", "$@4", "$@5", "FunScope", "Params", "$@6", "AsType", "StrongType",
  "AsArray", "ParamList", "ImplementsNamespace", "Statement", "$@7", "$@8",
  "$@9", "$@10", "$@11", "$@12", "$@13", "$@14", "$@15", "$@16", "$@17",
  "$@18", "DivertFlags", "CrlfStmnt", "$@19", "LineStat", "ControlError",
  "FunScope2", "Statements", "ExtList", "DynList", "IdentName", "NumValue",
  "NumAlias", "NilValue", "NilAlias", "LiteralValue", "LiteralAlias",
  "CodeBlockAlias", "Logical", "LogicalAlias", "SelfValue", "SelfAlias",
  "Date", "DateAlias", "DateTime", "DateTimeAlias", "Array", "Hash",
  "HashList", "ArrayAlias", "ArrayAt", "ArrayAtAlias", "Variable",
  "VarAlias", "MacroVar", "MacroText", "MacroVarAlias", "MacroExpr",
  "MacroExprAlias", "FieldAlias", "FieldVarAlias", "AliasId", "AliasVar",
  "AliasExpr", "VariableAt", "VariableAtAlias", "NamespacePath", "FunCall",
  "ArgList", "Argument", "DummyArgList", "DummyArgument", "FunCallAlias",
  "SendId", "ObjectData", "WithData", "ObjectDataAlias", "ObjectMethod",
  "WithMethod", "ObjectMethodAlias", "SimpleExpression", "$@20", "$@21",
  "$@22", "$@23", "$@24", "$@25", "Expression", "$@26", "$@27",
  "EmptyExpression", "LValue", "PostOp", "ExprPostOp", "ExprPreOp",
  "ExprUnary", "ExprAssign", "ExprEqual", "ExprPlusEq", "ExprMinusEq",
  "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq", "ExprOperEq",
  "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex", "IndexList",
  "_Get_", "Get", "$@28", "$@29", "$@30", "$@31", "$@32", "GetArgList",
  "GetAExt", "CodeBlock", "@33", "BlockParams", "CodeBlock2", "$@34",
  "ExtBlockParams", "BlockExpList", "BlockVarList", "PareExpList1",
  "PareExpList2", "PareExpList3", "PareExpListN", "PareExpList",
  "PareExpListAlias", "ExpList1", "ExpList2", "ExpList3", "ExpList",
  "IIFInline", "VarDefs", "$@35", "$@36", "$@37", "$@38", "VarList",
  "ExtVarList", "ExtVarDef", "VarDef", "$@39", "@40", "$@41", "DimList",
  "DimIndex", "FieldsDef", "$@42", "FieldList", "MemvarDef", "$@43",
  "MemvarList", "Declaration", "$@44", "$@45", "$@46", "DecDataList",
  "ClassInfo", "DecMethod", "$@47", "DecData", "$@48", "DecList",
  "FormalList", "OptList", "EnumDef", "$@49", "EnumMembers", "ExecFlow",
  "IfEndif", "EmptyStats", "IfBegin", "$@50", "@51", "IfElse", "$@52",
  "IfElseIf", "$@53", "@54", "$@55", "@56", "EndIf", "DoCase", "EndCase",
  "DoCaseStart", "$@57", "DoCaseBegin", "Cases", "$@58", "@59", "$@60",
  "@61", "Otherwise", "$@62", "$@63", "$@64", "Switch", "EndSwitch",
  "EndSwitchID", "SwitchBegin", "$@65", "WhiteSpace", "EmptyLines",
  "SwitchCases", "$@66", "@67", "$@68", "@69", "Constant", "Default",
  "$@70", "DoWhile", "@71", "$@72", "WhileBegin", "EndWhile", "ForNext",
  "@73", "@74", "@75", "ForAssign", "StepExpr", "ForStatements", "ForEach",
  "$@76", "@77", "@78", "WithObject", "$@79", "BeginSeq", "@80", "@81",
  "$@82", "RecoverSeq", "RecoverEmpty", "RecoverUsing", "Try", "@83",
  "@84", "$@85", "$@86", "FinallyTry", "Finally", "Catch", "CatchError",
  "DoName", "DoProc", "DoArgList", "DoArgument", "WithNamespace", "$@87",
  "NamespaceName", "Namespace", "$@88", "ExtNamespace", "NamespaceType",
  "NamespaceDefinition", "$@89", "NamespaceDefinitions",
  "NamespaceMemberDefinition", "NamespaceUsing", "UsedPath", "Crlf", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    61,    60,
      62,    36,   393,   394,    43,    45,    42,    47,    37,   395,
     396,    38,    64,    10,    59,    44,    41,    40,   123,   125,
      58,    46,    93,    91
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   164,   166,   165,   165,   167,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
     167,   167,   167,   167,   167,   168,   168,   169,   170,   170,
     172,   173,   171,   174,   175,   171,   176,   176,   176,   176,
     176,   176,   176,   176,   176,   177,   177,   178,   177,   177,
     179,   179,   180,   180,   180,   180,   180,   180,   180,   180,
     180,   180,   181,   181,   181,   181,   181,   181,   181,   181,
     181,   181,   182,   182,   183,   183,   185,   184,   184,   184,
     184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
     184,   184,   184,   186,   184,   187,   184,   188,   184,   184,
     189,   184,   190,   191,   184,   192,   193,   184,   184,   184,
     194,   184,   195,   184,   196,   184,   184,   184,   197,   197,
     199,   198,   200,   200,   200,   200,   200,   201,   201,   202,
     202,   202,   202,   202,   202,   203,   203,   204,   204,   204,
     204,   205,   205,   205,   205,   206,   207,   207,   207,   208,
     208,   208,   209,   210,   211,   212,   213,   214,   214,   215,
     216,   217,   218,   219,   220,   220,   220,   220,   220,   220,
     220,   220,   220,   220,   220,   220,   221,   222,   223,   224,
     224,   224,   225,   226,   226,   227,   228,   229,   230,   230,
     231,   232,   233,   234,   235,   235,   236,   236,   236,   236,
     236,   236,   236,   236,   236,   236,   236,   236,   236,   236,
     237,   237,   237,   238,   238,   238,   238,   238,   238,   238,
     238,   238,   238,   238,   238,   238,   238,   238,   238,   238,
     238,   238,   238,   239,   239,   239,   239,   239,   239,   240,
     240,   240,   240,   240,   240,   240,   240,   240,   240,   240,
     240,   240,   240,   240,   240,   240,   240,   241,   242,   242,
     243,   243,   243,   243,   243,   243,   244,   244,   245,   245,
     246,   246,   247,   247,   247,   248,   249,   249,   249,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
     250,   250,   250,   250,   250,   250,   250,   250,   250,   250,
     250,   250,   251,   252,   253,   254,   255,   256,   256,   256,
     256,   256,   256,   256,   256,   256,   257,   256,   256,   256,
     256,   256,   256,   256,   256,   256,   258,   256,   256,   259,
     256,   256,   260,   256,   256,   261,   256,   256,   262,   256,
     256,   256,   256,   256,   256,   256,   256,   256,   256,   263,
     263,   263,   264,   263,   265,   263,   266,   266,   267,   267,
     267,   267,   267,   267,   267,   267,   268,   268,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   269,   269,   269,   269,   269,   269,   269,   269,   269,
     269,   270,   270,   271,   271,   271,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   272,
     272,   272,   272,   272,   272,   272,   272,   272,   272,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   273,   273,   273,   273,   273,   273,   273,   273,
     273,   273,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   274,   274,   274,   274,   274,
     274,   274,   274,   274,   274,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
     275,   275,   275,   275,   275,   275,   275,   275,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   276,   276,   276,   276,   276,   276,   276,   276,   276,
     276,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   277,   277,   277,   277,   277,   277,
     277,   277,   277,   277,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   278,   278,   278,
     278,   278,   278,   278,   278,   278,   278,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     279,   279,   279,   279,   279,   279,   279,   279,   279,   279,
     280,   280,   280,   280,   280,   280,   281,   281,   281,   281,
     281,   281,   281,   281,   281,   281,   281,   282,   282,   283,
     283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
     284,   285,   285,   285,   286,   288,   289,   290,   291,   292,
     287,   293,   293,   294,   294,   296,   295,   297,   299,   298,
     300,   300,   301,   301,   302,   302,   302,   302,   303,   304,
     305,   306,   307,   307,   307,   307,   308,   309,   310,   311,
     312,   312,   313,   315,   314,   316,   314,   317,   314,   318,
     314,   319,   319,   320,   320,   321,   321,   321,   321,   321,
     323,   322,   324,   325,   322,   322,   322,   326,   327,   327,
     327,   329,   328,   330,   330,   330,   332,   331,   333,   333,
     335,   334,   336,   334,   334,   334,   337,   334,   338,   338,
     339,   339,   339,   339,   341,   340,   343,   342,   344,   344,
     344,   344,   345,   345,   345,   345,   345,   345,   346,   346,
     346,   346,   346,   346,   348,   347,   349,   349,   350,   350,
     350,   350,   350,   350,   350,   350,   351,   351,   351,   351,
     352,   352,   354,   355,   353,   357,   356,   359,   360,   358,
     361,   362,   358,   363,   363,   364,   364,   364,   364,   365,
     365,   367,   366,   368,   368,   370,   371,   369,   372,   373,
     369,   375,   376,   374,   377,   374,   378,   378,   379,   380,
     380,   382,   381,   383,   383,   384,   384,   384,   384,   386,
     387,   385,   388,   389,   385,   390,   390,   390,   390,   390,
     390,   390,   390,   390,   390,   392,   391,   394,   395,   393,
     396,   397,   397,   399,   400,   401,   398,   402,   402,   403,
     403,   404,   404,   404,   404,   406,   407,   408,   405,   410,
     409,   412,   413,   414,   411,   415,   415,   415,   416,   417,
     419,   420,   421,   422,   418,   423,   423,   424,   425,   425,
     426,   426,   427,   427,   427,   428,   428,   428,   429,   429,
     429,   429,   429,   430,   430,   430,   430,   430,   430,   432,
     431,   433,   435,   434,   436,   436,   437,   437,   437,   437,
     439,   438,   440,   440,   440,   440,   440,   440,   440,   440,
     441,   442,   443,   443,   444,   444
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     0,     2,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     4,     6,     4,     1,     3,
       0,     0,     8,     0,     0,     8,     0,     1,     1,     1,
       2,     1,     1,     1,     1,     0,     2,     0,     4,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     2,     4,     0,     2,     0,     3,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     0,     4,     0,     3,     0,     3,     2,
       0,     4,     0,     0,     5,     0,     0,     5,     3,     3,
       0,     4,     0,     3,     0,     4,     4,     6,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     5,     5,     0,
       1,     1,     1,     1,     1,     1,     2,     1,     2,     3,
       4,     1,     2,     3,     4,     1,     1,     1,     1,     2,
       2,     2,     1,     2,     1,     2,     2,     1,     1,     2,
       1,     2,     8,     2,    13,    11,    14,    12,    14,    12,
       8,     6,     9,     7,     9,     7,     2,     3,     3,     1,
       3,     5,     2,     2,     2,     2,     1,     2,     1,     1,
       1,     2,     2,     2,     2,     3,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       1,     1,     1,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     3,
       4,     5,     4,     4,     1,     1,     1,     3,     1,     2,
       1,     3,     1,     2,     5,     2,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     4,     4,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     3,     1,     0,
       3,     1,     0,     3,     1,     0,     3,     1,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     3,     0,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     3,     4,     1,     0,     0,     0,     0,     0,
      17,     1,     3,     0,     2,     0,     7,     1,     0,     8,
       0,     1,     1,     3,     2,     0,     4,     2,     2,     2,
       2,     2,     1,     1,     1,     1,     2,     2,     3,     3,
       3,     3,     2,     0,     4,     0,     4,     0,     4,     0,
       4,     1,     3,     1,     3,     1,     2,     4,     2,     3,
       0,     3,     0,     0,     6,     2,     3,     2,     2,     3,
       4,     0,     4,     2,     4,     3,     0,     4,     2,     4,
       0,     8,     0,     5,     3,     3,     0,     7,     1,     3,
       1,     2,     1,     2,     0,     6,     0,     3,     0,     1,
       1,     3,     2,     3,     5,     4,     5,     7,     3,     4,
       6,     5,     6,     8,     0,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     3,     4,
       0,     1,     0,     0,     6,     0,     4,     0,     0,     6,
       0,     0,     7,     1,     1,     3,     3,     2,     4,     1,
       1,     0,     3,     1,     2,     0,     0,     6,     0,     0,
       7,     0,     0,     5,     0,     5,     3,     4,     1,     1,
       1,     0,     5,     0,     1,     1,     1,     2,     2,     0,
       0,     6,     0,     0,     7,     1,     2,     1,     2,     3,
       3,     3,     3,     3,     1,     0,     3,     0,     0,     7,
       1,     1,     1,     0,     0,     0,    12,     1,     1,     0,
       2,     2,     3,     2,     3,     0,     0,     0,     9,     0,
       6,     0,     0,     0,     8,     0,     3,     3,     1,     2,
       0,     0,     0,     0,    10,     0,     3,     1,     0,     3,
       2,     1,     1,     1,     1,     2,     4,     3,     1,     2,
       1,     2,     3,     1,     2,     5,     6,     1,     1,     0,
       7,     1,     0,     7,     3,     3,     1,     1,     1,     1,
       0,     7,     1,     1,     1,     1,     2,     2,     2,     2,
       3,     3,     1,     3,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       2,     0,     0,     1,   122,   155,   110,   162,   156,   157,
     158,   663,    47,   667,   669,     0,     0,   164,   167,   168,
       0,     0,     0,    51,    52,   112,     0,     0,   771,   696,
     820,   107,     0,   691,   124,   115,   841,   103,     0,   170,
       0,   198,   200,     0,     0,     0,     0,   624,     0,     0,
       0,   850,     0,    53,    54,    48,     0,   886,   887,   888,
       0,     0,   889,     0,     0,     0,    49,     0,   904,   905,
     366,   366,     0,     0,    13,    14,    11,     0,    12,   196,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   130,   199,     0,   130,     0,     0,     0,     0,
     130,     0,     0,     0,   130,     0,     0,     0,     0,   130,
     130,     0,   130,   130,   130,   130,   590,   591,   592,   593,
     594,   595,   130,     0,   274,     0,   652,   653,   654,   655,
     130,     0,     0,     0,     0,     0,   275,     6,     7,     8,
       9,    10,    86,   738,     0,   739,     0,     0,   740,     0,
     741,     0,   742,   743,   130,   744,   745,   130,    19,     0,
      15,    16,     0,    17,    18,     5,     0,     0,   109,     0,
     161,   159,   160,     0,     0,     0,     0,   662,     0,     0,
       0,     0,     0,     0,     0,     0,   317,   318,   319,   322,
     325,   323,   324,   328,   329,   330,   359,   332,   333,   331,
     350,   334,   335,   338,   344,   341,   347,   360,   752,   353,
     354,   355,   351,   352,   356,   357,   358,   320,   321,   361,
     120,     0,   151,     0,     0,   147,     0,   130,     0,   401,
     402,     0,     0,     0,   130,   368,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   370,   371,   369,
       0,   374,     0,   372,   373,     0,     0,     0,     0,   375,
     204,     0,     0,     0,     0,     0,   102,   862,   863,   864,
     865,     0,   702,     0,    60,     0,     0,    38,     0,     0,
     835,   734,     0,   791,    50,   128,     0,     0,     0,   902,
       0,   881,     0,   202,     0,   657,   367,   278,     0,   635,
     189,     0,     0,   276,   367,   286,   287,   288,   312,    28,
      29,    26,    27,    21,    22,    23,    24,    25,    34,    30,
      31,    32,    33,    20,     0,     0,   197,   366,     0,   376,
     377,     0,     0,     0,     0,     0,     0,     0,     0,   378,
     220,   221,   222,   223,   243,     0,   163,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   379,   249,     0,   227,
       0,   165,     0,     0,     0,     0,     0,     0,     0,     0,
     380,   194,   228,   232,     0,   169,     0,     0,     0,     0,
       0,     0,     0,     0,   382,   251,   229,     0,   171,     0,
       0,     0,     0,     0,     0,     0,     0,   385,   254,   233,
       0,   173,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   252,   230,     0,   186,     0,     0,     0,     0,     0,
       0,     0,     0,   384,   253,   231,     0,   192,     0,     0,
       0,     0,     0,     0,     0,     0,   386,   193,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   387,   266,   234,
       0,   195,     0,     0,     0,     0,     0,     0,     0,     0,
     388,   235,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   389,   255,   240,   244,     0,   201,     0,     0,     0,
       0,     0,     0,     0,   366,     0,    93,   390,   258,   224,
     245,     0,   203,     0,     0,     0,     0,     0,     0,     0,
     366,     0,    94,   391,   259,   225,   246,     0,     0,     0,
     366,   220,   207,     0,   211,     0,   212,   216,     0,   213,
       0,   217,     0,   214,     0,   215,     0,   218,     0,   219,
     206,   221,   209,   222,   210,   241,     0,   248,   208,   242,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   392,
     256,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      90,   393,   257,     0,   267,     0,     0,     0,     0,     0,
       0,     0,     0,   394,   236,     0,     0,   285,     0,     0,
       0,     0,     0,     0,     0,     0,    89,   396,   264,   237,
       0,   313,     0,     0,     0,     0,     0,     0,     0,   366,
       0,   397,   260,     0,     0,     0,     0,     0,     0,     0,
       0,   366,     0,   399,   262,   238,     0,   316,     0,     0,
       0,     0,     0,     0,     0,     0,    91,   398,   261,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,   400,
     263,   239,    97,    96,   100,    99,    98,     0,     0,   166,
       0,     0,     0,     0,     0,     0,     0,     0,   381,   250,
       0,   656,     0,     0,     0,     0,     0,     0,     0,     0,
      95,   395,   265,   226,   247,   366,   648,   366,   649,   366,
     650,   366,   651,   130,     0,   757,   764,   763,     0,     0,
     746,   140,   141,   105,   143,   144,   133,   134,   145,   136,
       0,     0,   135,   132,   770,   775,   781,   769,   767,     0,
       0,   799,     0,     0,    88,   101,   268,     0,   123,     0,
     131,    60,     0,   671,     0,     0,     0,   403,   638,   405,
     404,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   152,     0,   118,
     148,   106,    60,   113,   673,   675,   772,    60,     0,     0,
     868,   196,   360,     0,   361,   867,   870,   108,   828,   827,
       0,   205,    60,     0,     0,   116,     0,     0,     0,     0,
     700,     0,   704,    72,    66,    63,     0,    64,    65,    62,
      67,     0,    70,    77,    78,    74,     0,    75,    76,    73,
      79,     0,   706,    61,    71,   714,   705,     0,     0,   839,
       0,     0,     0,     0,     0,     0,   130,   884,   885,   890,
       0,   901,   879,   279,   156,   157,   158,     0,   645,     0,
     188,   366,   187,   366,    40,    43,     0,   406,   452,   475,
     498,   521,   567,   544,   429,   289,   407,   453,   476,   499,
     522,   568,   545,   430,   290,   621,     0,   620,   408,   454,
     477,   500,   523,   569,   546,   431,   291,   410,   456,   479,
     502,   525,   571,   548,   433,   293,   413,   459,   482,   505,
     528,   574,   551,   436,   296,   411,   457,   480,   503,   526,
     572,   549,   434,   294,   412,   458,   481,   504,   527,   573,
     550,   435,   295,   414,   460,   483,   506,   529,   575,   552,
     437,   297,   415,   461,   484,   507,   530,   576,   553,   438,
     298,   416,   462,   485,   508,   531,   577,   554,   439,   299,
     417,   463,   486,   509,   532,   578,   555,   440,   300,   418,
     464,   487,   510,   533,   579,   556,   441,     0,   303,   419,
     465,   488,   511,   534,   580,   557,   442,     0,   304,   420,
     466,   489,   512,   535,   581,   558,   443,   301,   421,   467,
     490,   513,   536,   582,   559,   444,   302,   422,   468,   491,
     514,   537,   583,   560,   445,   307,   366,   269,   424,   470,
     493,   516,   539,   585,   562,   447,   305,   425,   471,   494,
     517,   540,   586,   563,   448,     0,   309,   426,   472,   495,
     518,   541,   587,   564,   449,     0,   311,   427,   473,   496,
     519,   542,   588,   565,   450,   308,   428,   474,   497,   520,
     543,   589,   566,   451,   310,   625,   409,   455,   478,   501,
     524,   570,   547,   432,   292,   423,   469,   492,   515,   538,
     584,   561,   446,   306,   658,   659,   660,   661,    87,   755,
       0,   747,   760,     0,   748,     0,     0,   146,     0,     0,
     778,   765,     0,   784,   766,     0,   790,   802,   815,   789,
     786,   788,     0,   817,   882,   111,     0,   680,   685,     0,
       0,   664,   666,   668,   670,   640,   327,   363,   337,   340,
     346,   343,   349,   607,   608,   609,   614,   615,   612,   613,
     601,   602,   603,   604,   605,   606,   617,   610,   611,   616,
     619,   618,   596,   597,   598,   599,   600,   753,   365,   121,
     153,     0,   149,     0,   676,   678,     0,     0,   698,     0,
     697,   874,     0,   869,   871,   823,   693,     0,     0,   692,
     125,     0,     0,   842,   104,   866,     0,    35,   718,   716,
       0,   710,   712,    68,    69,    80,    81,     0,   718,    39,
      37,     0,     0,     0,   851,   793,   128,   129,   126,     0,
     903,     0,     0,     0,    60,     0,   637,     0,   277,   190,
      55,    55,   270,   622,     0,   272,   273,     0,   314,   315,
     366,     0,     0,     0,   749,    55,    55,     0,   782,     0,
     768,     0,   805,   807,   814,     0,     0,     0,     0,     0,
     787,     0,     0,   688,   681,     0,   686,     0,   687,   672,
     641,    60,     0,     0,   154,   150,     0,   679,   674,   114,
      60,   366,     0,   872,     0,   695,    60,   117,   845,     0,
       0,     0,    60,     0,   719,   720,    60,   711,   713,   703,
     716,     0,   708,     0,     0,   836,   736,   735,   858,   796,
     792,   794,   795,   130,     0,   893,   894,     0,   895,   892,
       0,     0,     0,   644,     0,   647,   366,    57,    84,    84,
     623,   271,   626,   756,   758,     0,     0,     0,   776,     0,
       0,     0,   806,   808,     0,     0,     0,     0,     0,   800,
       0,   816,   818,     0,   683,   689,     0,     0,    82,     0,
     754,   677,   699,     0,     0,   280,   282,   366,     0,   694,
     848,     0,   843,     0,     0,    36,     0,    60,    60,   722,
      60,     0,     0,   717,     0,     0,    60,   840,     0,     0,
     861,   852,     0,   798,   797,   127,     0,     0,   897,   898,
     899,   896,     0,     0,     0,     0,   181,     0,   642,     0,
      60,   191,     0,    56,     0,     0,    41,    44,     0,     0,
     761,   137,   138,     0,   783,   779,   785,   813,   812,   811,
     809,   810,     0,   803,     0,     0,     0,   690,    60,     0,
     283,   366,   875,     0,   829,   849,     0,     0,     0,    60,
     728,   366,   723,     0,     0,    60,   721,     0,   709,   707,
     715,   837,   737,   860,   855,     0,   900,   891,   880,     0,
     183,   185,     0,     0,   636,   646,    59,     0,    85,     0,
       0,   366,   759,     0,   777,     0,   801,     0,   821,   822,
     819,   883,   684,    83,     0,   366,   281,   876,     0,   824,
     844,   846,   847,   366,   729,     0,   701,    60,   725,     0,
      60,     0,   857,   853,     0,   859,   172,     0,     0,     0,
     180,   643,    58,    42,    45,   627,   762,   780,   804,   639,
       0,   830,     0,     0,   724,   366,   726,    60,   731,     0,
     838,     0,     0,     0,   182,   184,     0,   284,   825,   730,
       0,   366,   732,   833,   831,   854,   856,     0,   366,     0,
     727,     0,   834,   832,     0,     0,   175,     0,   628,   826,
     733,   177,   179,     0,     0,     0,     0,   174,   366,   176,
     178,   629,   633,   366,     0,   631,   634,   630,   366,   632
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     1,     2,    73,   706,    75,   288,    76,  1220,  1469,
    1221,  1470,    77,  1318,  1404,   832,   833,   834,  1260,  1406,
     707,   693,   275,   237,   244,   177,   238,  1167,   273,  1181,
     774,   176,   272,   846,   178,   179,   708,   709,   710,  1182,
     234,   231,    79,   196,    81,   197,    83,   198,    85,    86,
     199,    88,   200,    90,   201,    92,   202,    94,   203,   204,
     311,    97,   205,    99,   206,   101,   207,   103,   104,   208,
     106,   107,   108,   353,   209,   210,   211,   112,   113,   212,
     312,   313,  1354,  1355,   115,   318,   213,   214,   118,   215,
     216,   121,   217,   741,   743,   744,   746,   745,   747,   306,
     742,   773,   307,   267,   681,   219,   220,   221,   222,   125,
     126,   127,   128,   129,   130,   131,   223,   224,   225,   226,
     381,   368,   133,   134,  1230,  1408,  1536,  1564,  1572,  1576,
    1574,   227,   858,  1215,   228,  1125,  1262,  1399,  1216,   136,
     137,   138,   139,   229,   141,   142,   143,   144,   145,   146,
     147,   183,   184,   185,   186,   732,   783,   784,   733,  1254,
    1255,  1426,  1118,  1119,   148,   271,   803,   149,   242,   788,
     712,  1188,   811,  1197,  1291,  1190,   286,  1198,  1192,  1286,
    1283,  1284,  1285,   151,   841,  1297,   152,   153,  1529,   154,
     772,  1263,   698,  1231,   699,  1090,  1409,  1233,  1473,   700,
     155,   718,   156,   241,   157,   719,  1098,  1413,  1239,  1475,
     720,  1099,  1329,  1241,   158,  1110,  1111,   159,   843,  1300,
    1301,   722,  1105,  1422,  1248,  1477,  1247,  1112,  1249,   160,
    1251,  1424,   161,  1480,   162,  1274,  1522,  1549,   800,  1489,
    1530,   163,   840,  1378,  1501,   164,  1201,   165,   274,  1278,
    1436,  1362,  1363,  1364,   166,   292,  1298,  1454,  1531,  1503,
    1504,  1381,  1382,   280,   167,   795,   796,   168,  1211,   169,
     170,  1252,   171,   172,   173,  1209,  1307,  1308,   174,   300,
     713
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -1329
static const yytype_int16 yypact[] =
{
      64,    70,  7247, -1329, -1329, -1329,   231, -1329,    56,    66,
      82, -1329,    76, -1329, -1329,   -23,  5133, -1329, -1329, -1329,
     157,   157,   157, -1329,   270, -1329,  5133,  5133, -1329, -1329,
      68, -1329,   279,   116, -1329, -1329, -1329,   231,    74, -1329,
     154, -1329, -1329,   157,   157,    17,   172, -1329,  5133,   157,
     157, -1329,  5133, -1329, -1329,   201,  5133, -1329, -1329, -1329,
     157,   157, -1329,   157,   157,   157, -1329,   -23, -1329, -1329,
    4744,   995,    74,  5620, -1329, -1329, -1329,   262, -1329,   170,
     259,    50,  1028,    74,  1314,    74,    74,  1561,    74,  1710,
      74,  2023,    74,  2253,    74,  2379,  1099,    74,  3894,    74,
    1674,    50,   694, -1329,    50,   901,    50,   634,    74,  1936,
    2846,  3901,    74,   157,  2600,    74,  1162,   885,    74,  2637,
    2913,    74, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329,   279, -1329,  2670, -1329, -1329, -1329, -1329,
    2716,    50,   295,   302,   305,   313, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329, -1329,   575, -1329,  7544,   450, -1329,   169,
   -1329,  5133, -1329, -1329, -1329, -1329, -1329, -1329, -1329,    55,
   -1329, -1329,   157, -1329, -1329, -1329,   374,  5133, -1329,   374,
   -1329, -1329, -1329,   157,   157,   157,   157, -1329,    81,   125,
      67,  5133,   116,   155,  5133,  5133,  2804,  3196,  3283,  3417,
    3784,  3457,  3489,  3501,  2528,  1066,  9582,  2445,  2786,  3548,
    3580,  2372,  5420,  1827,  5786,  6561,  9632, -1329,  9765, -1329,
   -1329, -1329, -1329, -1329, -1329, -1329, -1329,  3534, -1329,  9490,
   -1329,   251,   133,   157,   352,   133,   157, -1329,   318, -1329,
   -1329,   374,   157,  4323, -1329,    95,   150,     9,    13,    29,
      52,   112,   166,   180,   -80,    28,   -46,    21,    90,    39,
     144,    45,   189,   151,   128,   198,   149,     1,   206,   230,
     241,   157,   157,   318,   374,  5133, -1329, -1329, -1329, -1329,
     245,   326,   178,   374,  7729,   219,   374,   218,   233,  4379,
   -1329, -1329,   374,  9765, -1329,  3981,   374,   374,   374, -1329,
     429, -1329,   374, -1329,  5133, -1329,  9765, -1329,   360, -1329,
   -1329,    24,   104, -1329,  5413, -1329, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329, -1329,   157,   157, -1329,  4744,  5133, -1329,
   -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,    74, -1329,
   -1329, -1329, -1329, -1329, -1329,  5133, -1329,  5133,  5133,  5133,
    5133,  5133,  5133,  5133,    74,  5133, -1329, -1329,   -61, -1329,
    5133, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,    74,
   -1329, -1329, -1329, -1329,  5133, -1329,  5133,  5133,  5133,  5133,
    5133,  5133,  5133,    74, -1329, -1329, -1329,  5133, -1329,  5133,
    5133,  5133,  5133,  5133,  5133,  5133,    74, -1329, -1329, -1329,
    5133, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,    74,
   -1329, -1329, -1329,  5133, -1329,  5133,  5133,  5133,  5133,  5133,
    5133,  5133,    74, -1329, -1329, -1329,  5133, -1329,  5133,  5133,
    5133,  5133,  5133,  5133,  5133,    74, -1329, -1329,  5133,  5133,
    5133,  5133,  5133,  5133,  5133,  5133,    74, -1329, -1329, -1329,
    5133, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,    74,
   -1329, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,
      74, -1329, -1329, -1329, -1329,  5133, -1329,  5133,  5133,  5133,
    5133,  5133,  5133,  5133,  4744,    74, -1329, -1329, -1329, -1329,
   -1329,  5133, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,
    4744,    74, -1329, -1329, -1329, -1329, -1329,    56,    66,    82,
    3175,   347, -1329,   368, -1329,    14, -1329, -1329,   371, -1329,
     376, -1329,   380, -1329,   389, -1329,    33, -1329,   394, -1329,
   -1329,   400, -1329,   413, -1329, -1329,   423,   426, -1329, -1329,
    5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,    74, -1329,
   -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,    74,
   -1329, -1329, -1329,  5133, -1329,  5133,  5133,  5133,  5133,  5133,
    5133,  5133,    74, -1329, -1329,    88,  5133, -1329,  5133,  5133,
    5133,  5133,  5133,  5133,  5133,    74, -1329, -1329, -1329, -1329,
    5133, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,  4744,
      74, -1329, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,
    5133,  4744,    74, -1329, -1329, -1329,  5133, -1329,  5133,  5133,
    5133,  5133,  5133,  5133,  5133,    74, -1329, -1329, -1329,  5133,
    5133,  5133,  5133,  5133,  5133,  5133,  5133,    74, -1329, -1329,
   -1329, -1329, -1329, -1329, -1329, -1329, -1329,   237,  5133, -1329,
    5133,  5133,  5133,  5133,  5133,  5133,  5133,    74, -1329, -1329,
    5133, -1329,  5133,  5133,  5133,  5133,  5133,  5133,  5133,    74,
   -1329, -1329, -1329, -1329, -1329,  4744, -1329,  4744, -1329,  4744,
   -1329,  4744, -1329, -1329,   374, -1329, -1329, -1329,   512,   581,
   -1329, -1329, -1329,   570, -1329, -1329, -1329, -1329, -1329, -1329,
     573,  7683, -1329, -1329, -1329, -1329, -1329, -1329, -1329,   521,
     358, -1329,   317,  4379, -1329, -1329, -1329,   374, -1329,  4379,
   -1329,  4508,   453, -1329,   453,   453,   453,  9895, -1329, -1329,
   -1329,  7729,  7729,  7729,  7729,  7729,  7729,  7729,  5133,  5133,
    5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,
    5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,  5133,
    5133,  5133,   374,  7729,   374,   157, -1329,   315,   157, -1329,
     315, -1329,  4508,   324, -1329, -1329, -1329,  7729,   456,   157,
    4934,   260,   479,  9765,   821,   335, -1329, -1329, -1329, -1329,
    5133, -1329,  7729,   162,   456,   324,  8258,  4379,  4323,   511,
   -1329,   157, -1329, -1329, -1329, -1329,   157, -1329, -1329, -1329,
   -1329,   157, -1329, -1329, -1329, -1329,   157, -1329, -1329, -1329,
   -1329,   157, -1329, -1329, -1329, -1329, -1329,   465,   374, -1329,
     439,   490,  8397,   374,  5133,  5133, -1329, -1329, -1329, -1329,
     157, -1329, -1329,  9765, -1329, -1329, -1329,   -82,   157,  5133,
   -1329,  4744, -1329,  5133, -1329, -1329,   431,  9765,  9765,  9765,
    9765,  9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,  9765,
    9765,  9765,  9765,  9765, -1329,  9765,  5133,   339,  9765,  9765,
    9765,  9765,  9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,
    9765,  9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,  9765,
    9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,  9765,  9765,
    9765,  9765,  9765, -1329,  9765,  9765,  9765,  9765,  9765,  9765,
    9765,  9765, -1329,  9765,  9765,  9765,  9765,  9765,  9765,  9765,
    9765, -1329,  9765,  9765,  9765,  9765,  9765,  9765,  9765,  9765,
   -1329,  9765,  9765,  9765,  9765,  9765,  9765,  9765,  9765, -1329,
    9765,  9765,  9765,  9765,  9765,  9765,  9765,  9765, -1329,  9765,
    9765,  9765,  9765,  9765,  9765,  9765,  9765,   474, -1329,  9765,
    9765,  9765,  9765,  9765,  9765,  9765,  9765,   480, -1329,  9765,
    9765,  9765,  9765,  9765,  9765,  9765,  9765, -1329,  9765,  9765,
    9765,  9765,  9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,
    9765,  9765,  9765,  9765,  9765, -1329,  4744, -1329,  9765,  9765,
    9765,  9765,  9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,
    9765,  9765,  9765,  9765,  9765,   499, -1329,  9765,  9765,  9765,
    9765,  9765,  9765,  9765,  9765,   520, -1329,  9765,  9765,  9765,
    9765,  9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,  9765,
    9765,  9765,  9765,  9765, -1329, -1329,  9765,  9765,  9765,  9765,
    9765,  9765,  9765,  9765, -1329,  9765,  9765,  9765,  9765,  9765,
    9765,  9765,  9765, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
    5133, -1329, -1329,   512, -1329,   157,   157, -1329,  5133,   374,
   -1329, -1329,   358, -1329, -1329,    41, -1329, -1329, -1329, -1329,
   -1329, -1329,     5, -1329, -1329, -1329,  5133,   502,   893,   -50,
     157, -1329, -1329, -1329, -1329,   157, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329,  9861,  9765,  4241,  4241,  4241,   378,   378,
     449,  6114,  9895,  4788,   391,   391,  4241,   378,   378,   378,
     378,   378,   299,   299,   334,   334,   334, -1329, -1329, -1329,
     133,   157,   133,   157,   507,   893,   318,   374, -1329,   157,
   -1329,   171,   157, -1329,  4934,  9765, -1329,   157,   157, -1329,
   -1329,   374,  7405, -1329, -1329,   335,   518, -1329,    43,   219,
       7, -1329, -1329, -1329, -1329, -1329, -1329,   157,    43, -1329,
   -1329,  9389,  5133,   157, -1329,    78,  6076,  9765, -1329,   332,
   -1329,  7247,   360,   360,  7729,   433,   397,  9484, -1329, -1329,
     399,   399, -1329,  9765,  5133, -1329, -1329,   535, -1329, -1329,
    5133,  8694,  4379,  5133, -1329,   399,   399,  4379, -1329,  5133,
   -1329,   374, -1329, -1329, -1329,   686,    41,   585,    41,  8833,
   -1329,  8972,  7247,  9765, -1329,   545, -1329,  5133,   395, -1329,
     412,  7729,   454,  7841,   315,   315,  5133, -1329, -1329, -1329,
    7729,  5007,   185, -1329,   529, -1329,  7729, -1329,   628,   374,
      18,   157,  7729,   435,   442,   459,  7729, -1329, -1329, -1329,
   -1329,   195, -1329,   448,   598,  9765, -1329,   469,   481, -1329,
   -1329,    78, -1329, -1329,   157, -1329, -1329,   129, -1329, -1329,
    6740,   473,   215, -1329,  5133,   157,  5133,   -33,   495,   495,
    9765, -1329, -1329, -1329, -1329,  4379,   374,   374, -1329,  8536,
    4379,  8536, -1329, -1329,   434,    41,    41,    41,    41, -1329,
     585, -1329, -1329,  6905, -1329,  9765,  5133,   157, -1329,   374,
   -1329,  9765, -1329,   157,   551, -1329, -1329,  5007,  5133, -1329,
   -1329,   157, -1329,   374,   374, -1329,   157,  7729,  5166, -1329,
    7729,    51,   554, -1329,   157,   374,  7729, -1329,   374,   157,
     157, -1329,   374, -1329, -1329, -1329,   374,   374, -1329, -1329,
   -1329, -1329,   374,   360,   487,   489, -1329,   360,  9765,   205,
    7729, -1329,   505, -1329,   157,   157, -1329, -1329,   496,  7841,
   -1329, -1329, -1329,  7980, -1329, -1329, -1329, -1329,   -25,   415,
     578,   578,  8119, -1329,    54,   374,  5133,  9765,  7729,  7247,
     509,  5007, -1329,   569,  9669, -1329,   649,  9389,  9389,  5307,
   -1329,  5007, -1329,   374,   157,  7729,   459,    19, -1329, -1329,
   -1329, -1329, -1329, -1329,   553,  9111, -1329, -1329, -1329,    34,
   -1329, -1329,    -1,  5133, -1329, -1329, -1329,   580, -1329,   374,
     374,  5133, -1329,  7841, -1329,  7980, -1329,  8119, -1329, -1329,
   -1329, -1329,  9765, -1329,  7073,  5007, -1329, -1329,  5133, -1329,
   -1329, -1329, -1329,  5007, -1329,   586, -1329,  5949, -1329,   157,
    7729,  9250, -1329, -1329,   374, -1329, -1329,   519,   524,   533,
   -1329,  9765, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
     592,  9765,   374,   595, -1329,  5007, -1329,  6370, -1329,    27,
   -1329,   651,  9389,   360, -1329, -1329,   547, -1329, -1329, -1329,
     606,  5007, -1329,   157,   157, -1329, -1329,   220,  5133,  9250,
   -1329,   622, -1329, -1329,   561,   567, -1329,   360, -1329, -1329,
   -1329, -1329, -1329,     8,   549,   584,   593, -1329,  5133, -1329,
   -1329, -1329,   557,  4744,   572, -1329,   590, -1329,  4744, -1329
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -1329, -1329, -1329, -1190,    35,   -62, -1329,   -54, -1329, -1329,
   -1329, -1329, -1329,  -891, -1329,  -602,    75, -1078,  -664,  -556,
      25, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329,  -437,    23, -1329,  -705, -1329, -1329,   617,
   -1329, -1329,  4620,    -2,   668,   345,   672,   401,   673,   675,
     620,   677,   717,   679,   804,   680,   947,   681,  1049,  1558,
   -1329,   682,  1146,   687,  1693,   688,     3, -1329,   689,   136,
     690,   530, -1329,  5819,  1809,  1938,  1944, -1329,    -8,  2250,
    -328,   -68, -1328,  -632, -1329,    -7,  2293,  2498, -1329,  2585,
    2741, -1329,  -242, -1329, -1329, -1329, -1329, -1329, -1329,  5932,
   -1329, -1329,  -804,   669,  9659,  2826,  3009, -1329,  3142, -1329,
   -1329, -1329, -1329, -1329, -1329, -1329,  3238, -1329, -1329, -1329,
    5103, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
   -1329,  1361, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
   -1329,   786, -1329,   232,   698,   792,   793,   795, -1329, -1329,
     -53, -1329, -1329, -1329, -1329,   501,   538,  -354,  -235, -1329,
   -1329, -1329,    31, -1329,   -47, -1329, -1329,   -45, -1329,   542,
      30, -1329, -1329, -1329, -1329, -1329,  -807, -1329, -1147, -1329,
    -375, -1329,  -546,   -42, -1329, -1329, -1329, -1329,  -760, -1329,
   -1329, -1329,   130, -1329, -1329, -1329, -1329, -1329, -1329,  -683,
   -1329,  -702, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
     108, -1329, -1329, -1329, -1329,  -284, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329, -1329, -1329, -1329,  -792, -1329, -1329, -1329,
   -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
    -718, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329, -1329,
   -1329, -1329, -1329, -1329, -1329,    26,  -783,   -40, -1329,   768,
     -39, -1329,   -37, -1329,   -65, -1329, -1329,  -472,   -34, -1329,
    4761
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -882
static const yytype_int16 yytable[] =
{
      80,   792,   305,   785,  1191,   102,  1097,  1173,   331,   866,
     798,   320,     5,   233,   236,  1091,  1094,  1101,  1104,   321,
     323,  1310,     5,     5,     5,  1106,   324,    78,   325,  1433,
     246,   327,   150,   328,   329,   257,   330,    74,   785,   332,
    1256,   278,   854,  1288,   855,   856,  1183,  1543,     5,   356,
    1292,  1242,  1243,   371,   371,     5,     5,  1508,  1509,  1219,
     276,   486,  1343,  1244,    -4,  1212,  1565,  1566,   461,   385,
       3,    80,  1402,   437,  1478,   316,   102,  1544,  1213,     5,
     456,  -665,  1204,   365,   351,   574,   351,  1267,   351,   351,
    1335,   351,   398,   351,   886,   351,   180,   351,   322,  1479,
     351,   887,   351,   326,   351,  1257,   181,   351,   319,   351,
     541,   351,  1258,  1495,   480,   351,  1109,   365,   351,  1337,
    1338,   351,   182,  1403,   351,   496,    41,    42,   512,  1117,
     502,   246,  1280,   570,    70,   336,   257,   596,   105,   799,
    1280,   243,   636,   648,   351,   652,   653,   654,   655,  1387,
      41,    42,   411,    40,    80,   656,   270,  1520,  1510,   102,
      68,    69,     5,   680,   281,  1523,   977,  1567,   258,   364,
    1366,  1499,   365,   379,   279,   284,   365,   365,   494,   859,
    1164,   495,   987,   860,   365,  1168,  1245,   724,   469,   393,
     725,   601,   365,  1506,   287,  1281,   365,  1540,  1246,   558,
    1176,    67,   365,  1444,    40,   582,   424,    70,   317,   105,
     336,   721,   406,  1551,   294,   365,   726,   352,  1177,   352,
     437,   352,   352,   690,   352,    67,   352,  1448,   352,   587,
     352,    68,    69,   352,   140,   352,   685,   352,   627,  1484,
     352,   782,   352,   543,   352,  1016,   659,   510,   352,  1017,
     511,   352,   337,   365,   352,  -196,  -881,   352,  -196,   861,
     781,    63,  1304,   862,   269,   334,   335,   797,   338,   258,
     671,   738,   419,  1394,  1395,   365,   782,   352,  1554,  1555,
     687,  1035,    68,    69,     5,   621,     7,     8,   622,     9,
      10,   365,   105,  1045,  -881,    15,   192,   339,   340,   303,
     336,    17,    18,    19,   569,   140,   857,   365,   609,   647,
     348,   610,   365,   354,   365,    68,    69,  1178,   808,   341,
     342,   343,   344,     5,   345,   346,   432,   337,  1271,   365,
    1319,  -881,  -881,   484,   192,   810,   500,  1106,   516,   547,
     445,   875,  1357,   365,  1326,  1327,  1017,    82,   809,   595,
    1374,   316,   365,    39,  1375,    41,    42,   884,   635,  1107,
    1463,   365,   837,   755,  1464,   269,   667,   316,   854,   365,
     855,   856,   896,   684,  1396,  1397,   835,   247,   714,  1556,
    1557,    47,   316,  1287,  -130,  -130,   905,   336,   140,   838,
     679,  1273,  1065,   365,    41,    42,   316,   347,   755,   914,
    1240,  1103,   717,    84,    68,    69,   775,    40,   356,   316,
    1234,   385,   923,  -873,  -873,  -873,   398,   337,    82,   348,
     411,  -881,   316,  -105,  -105,   932,  1322,  1108,  1109,   424,
      67,   753,   754,   248,   461,   316,    70,    71,   941,    72,
     486,  1294,   755,   767,   768,   769,   770,   771,   316,   950,
     685,   686,   523,   502,  1334,   755,  1340,   687,   688,   316,
     689,   690,   959,   659,    63,  1304,   671,  1356,   691,   692,
     714,  1323,   316,   968,    84,   794,  1017,  1097,   247,  1166,
     769,   770,   771,   316,   317,    68,    69,  1199,   978,  1341,
    1174,  1342,   715,   716,   717,  1202,   759,   760,   316,  1203,
     317,    82,  1224,  1350,   988,    68,    69,   778,   525,   759,
     760,  -682,  1401,   755,   316,   317,  1266,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,    68,    69,   317,
    1335,  1336,   696,   697,   248,   767,   768,   769,   770,   771,
    1279,   714,   317,  1418,  1419,  1420,  1421,  1314,   792,  1335,
    1336,   997,  1315,  1356,  1344,   317,  1317,    84,  1346,  1337,
    1338,   316,  1006,  1100,   716,   717,   792,  1347,   317,  1414,
    1349,  1416,   316,  -142,  -142,  1015,  1095,  1096,  1337,  1338,
    1358,   317,    68,    69,   850,   316,   861,  1222,  1026,  1380,
    1417,  1370,   317,   694,   695,   696,   697,  1371,   316,   694,
    1092,   696,   697,  1036,  1376,   317,    68,    69,  1120,    68,
      69,  1169,  1313,   316,  1372,  1046,   317,  1084,  1377,  1085,
    1393,  1086,    87,  1087,  1379,   316,  1405,  1356,  1055,   861,
    1225,   317,  -877,  -877,  -877,   861,  1226,  1356,   316,     5,
    1064,     7,   517,  1447,   518,   519,  1460,   317,  1461,  1472,
     316,  1471,   249,  1474,   861,  1228,    17,    18,    19,  1348,
    1074,  1466,  1476,  1186,    68,    69,  1485,  1515,  1352,  1490,
     316,  1545,  1083,  1502,  1359,   861,  1229,  1491,  1492,  1533,
    1369,  1356,   316,  1534,  1373,   734,   735,   736,  1227,  1356,
     861,  1321,  1535,    87,   317,  1505,  1332,  1333,  1360,  1361,
    1335,  1336,  1548,   485,  1568,   317,  1431,  1432,    39,    80,
      41,    42,  1573,  1516,   102,  1517,  1088,  1518,   317,    89,
    1561,  1356,  1337,  1338,  1431,  1487,  1562,   528,  1577,  1337,
    1338,   317,   339,   340,   486,  1347,  1512,  1356,    68,    69,
    1467,  1431,  1524,  1569,  1558,  1578,   317,  1431,  1537,   250,
    1431,  1539,  1570,   249,   487,   488,   489,   490,   317,   491,
     492,  1431,  1550,  1407,  1571,  1440,  1442,  1161,  1443,  1303,
    1163,   317,  1546,   711,  1450,   522,    87,  1431,  1560,   524,
     526,  1172,   527,   317,   529,    67,   531,   533,   535,   537,
      89,    70,   520,  1218,   539,   540,   542,   544,  1465,  1486,
     801,   187,   657,   317,    80,   548,    91,   188,   189,   102,
     190,   805,  1268,  1165,   804,   317,  1126,  1127,  1128,  1129,
    1130,  1131,  1132,  1293,   530,  1446,  1483,  1102,  1250,  1093,
     670,  1559,   493,   302,  1185,  1390,   251,  1494,     0,     0,
      80,     0,     0,  1498,     0,   102,     0,   105,  1158,     0,
     250,   494,     0,     0,   495,     0,     0,   365,     0,   339,
     340,   671,     0,     0,     0,     0,     0,     0,     0,  1208,
       0,     0,     0,    89,     0,     0,     0,    91,     0,     0,
       0,   672,   673,   674,   675,  1259,   676,   677,     0,     0,
       0,     0,     0,     0,   613,  1526,     0,     0,  1528,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,
     501,   532,     0,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,  -364,     0,   339,   340,  1542,     0,     0,     0,     0,
       0,   785,   792,     0,     0,     0,     0,   251,     0,   339,
     340,   502,   105,   140,     0,   614,   615,   616,   617,    93,
     618,   619,     0,     0,     0,     0,     0,     0,     0,     0,
      91,   503,   504,   505,   506,     0,   507,   508,     0,     0,
       0,   813,     0,     0,  -878,  -878,  -878,     0,   105,   252,
       0,   679,     0,     0,   365,   823,   824,   825,   826,   827,
     828,   829,   830,   831,     0,     0,     0,     0,     0,     0,
       5,     0,     7,     8,     0,     9,    10,     0,     0,     0,
       0,    15,     0,     0,     0,     0,     0,    17,    18,    19,
      93,     0,   794,   620,     0,     0,     0,     0,   191,     0,
       0,     0,     0,    26,    27,     0,     0,   355,   140,   509,
     794,     0,   621,     0,     0,   622,     0,     0,   365,     0,
     192,    95,     0,     0,   534,     0,    82,     0,   510,   308,
       0,   511,     0,     0,   365,     0,   339,   340,   356,    39,
       0,    41,    42,     0,   140,   460,     0,     0,     0,     0,
     252,   253,     0,     0,     0,     0,     0,     0,   357,   358,
     359,   360,     0,   361,   362,     0,     0,    47,     0,     0,
       0,     0,     0,    93,   339,   340,   461,     0,   448,   309,
       0,     0,    84,     0,     0,     0,   310,     0,     0,     0,
       0,     0,    95,     0,     0,     0,   462,   463,   464,   465,
       0,   466,   467,     0,   193,     0,     0,   339,   340,   194,
     195,     0,     0,     0,  1306,     0,    67,   304,    98,     0,
       0,    82,    70,    71,     0,    72,   536,     0,     0,   449,
     450,   451,   452,     0,   453,   454,   363,     0,     0,   782,
       0,   600,     0,     0,     0,     0,     0,     0,   255,     0,
      80,     0,   253,     0,     0,   102,     0,    82,   364,     0,
       0,   365,     0,     0,     0,     0,     0,     0,     0,    80,
     339,   340,   601,     0,   102,    95,     0,    84,     0,    80,
    1311,  1312,     0,     0,   102,     0,     0,     0,     0,    98,
       0,     0,   602,   603,   604,   605,   469,   606,   607,    80,
       0,     0,     0,     0,   102,     0,    78,   455,     0,     0,
    1299,   150,  1389,    84,  1305,   331,    74,    80,   320,    80,
      80,     0,   102,   538,   102,   102,   321,   323,     0,   456,
       0,    80,   365,   324,     0,   325,   102,     0,   327,     0,
     328,   329,     0,   330,     0,     0,   332,    78,   331,   255,
       0,   320,   150,     0,     0,     0,     0,    74,     0,   321,
     323,     0,     0,     0,     0,     0,   324,     0,   325,     0,
     608,   327,    98,   328,   329,     0,   330,     0,    80,   332,
       0,     0,     0,   102,     0,     0,     0,     0,   105,   609,
       0,     0,   610,   370,     0,   365,  1385,    80,     0,    80,
       0,    87,   102,     0,   102,   322,  1383,   105,     0,     0,
     326,    80,  1388,     0,     0,   319,   102,   105,     0,     0,
       0,     0,   339,   340,   371,     0,     0,     0,     0,     0,
       0,     0,     0,   135,     0,     0,     0,   105,   322,     0,
       0,     0,     0,   326,   372,   373,   374,   375,   319,   376,
     377,     0,     0,     0,     0,   105,     0,   105,   105,     0,
       0,  1459,     0,   268,     0,  1462,     0,     0,     0,   105,
       0,     0,     0,     0,     0,     0,   794,    80,     0,     0,
       0,    80,   102,     0,   140,     0,   102,     0,     0,   331,
      80,     0,   320,     0,     0,   102,    87,    80,    89,     0,
     321,   323,   102,   140,   135,    80,    80,   324,     0,   325,
     102,   102,   327,   140,   328,   329,   105,   330,     0,     0,
     332,     0,   378,    80,    78,     0,     0,  1507,   102,   150,
       0,     0,    87,   140,    74,   105,     0,   105,   546,     0,
       0,    80,     0,    80,   379,    80,   102,   365,   102,   105,
     102,   140,    80,   140,   140,     0,     0,   102,     0,     0,
       0,     0,     0,     0,   268,   140,     0,     0,     0,    80,
       0,     0,     0,     0,   102,  1575,     0,     0,     0,   322,
    1579,     0,     0,     0,   326,    91,     0,   135,     0,   319,
       0,     0,     0,    89,     0,     0,     0,    82,     0,     0,
      80,  1547,     0,     0,     0,   102,     0,     0,     0,     0,
       0,     0,   140,     0,     0,   105,    82,    80,     0,   105,
       0,     0,   102,     0,     0,  1563,    82,     0,   105,    89,
      96,   140,     0,   140,     0,   105,     0,     0,     0,     0,
     384,     0,     0,   105,   105,   140,    82,     0,     0,     0,
       0,     0,     0,    84,     0,     0,     0,     0,     0,     0,
     254,   105,     0,     0,    82,     0,    82,    82,     0,   339,
     340,   385,    84,     0,     0,     0,     0,     0,    82,   105,
      91,   105,    84,   105,     0,     0,     0,     0,     0,     0,
     105,   386,   387,   388,   389,     0,   390,   391,     0,     0,
       0,    96,    84,     0,     0,     0,     0,   105,     0,     0,
       0,   140,     0,     0,     0,   140,    91,     0,     0,     0,
      84,     0,    84,    84,   140,    82,     0,     0,    93,     0,
       0,   140,     0,     0,    84,     0,     0,     0,   105,   140,
     140,     0,     0,     0,    82,     0,    82,     0,     0,     0,
       0,     0,     0,   472,     0,   105,     0,   140,    82,     0,
       0,   254,     0,     0,     0,   100,     0,     0,     0,   392,
       0,     0,     0,     0,     0,   140,     0,   140,     0,   140,
       0,    84,   339,   340,    96,     0,   140,     0,     0,   397,
       0,   393,     0,     0,   365,   256,     0,     0,     0,     0,
      84,     0,    84,   140,   473,   474,   475,   476,     0,   477,
     478,     0,     0,     0,    84,     0,     0,     0,   339,   340,
     398,     0,     0,    93,    82,     0,     0,     0,    82,     0,
      95,     0,     0,     0,   140,     0,   100,    82,     0,     0,
     399,   400,   401,   402,    82,   403,   404,     0,     0,     0,
       0,   140,    82,    82,     0,     0,     0,     0,     0,    93,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      82,     0,    87,     0,     0,     0,     0,     0,     0,     0,
      84,   109,   479,     0,    84,     0,     0,     0,    82,     0,
      82,    87,    82,    84,     0,     0,   256,     0,     0,    82,
      84,    87,     0,     0,   480,     0,   600,   365,    84,    84,
       0,   259,     0,     0,     0,     0,    82,     0,   405,   100,
       0,    87,     0,     0,     0,    95,    84,    98,     0,     0,
       0,     0,     0,     0,     0,   339,   340,   601,     0,    87,
     406,    87,    87,   365,    84,     0,    84,    82,    84,     0,
       0,     0,   109,    87,     0,    84,     0,   602,   603,   604,
     605,    95,   606,   607,    82,     0,     0,     0,     0,    89,
       0,     0,    84,     0,     0,  -339,  -339,  -339,  -339,  -339,
    -339,  -339,  -339,  -339,  -339,     0,     0,     0,    89,  -339,
    -339,  -339,  -339,  -339,  -339,  -339,  -339,  -339,    89,     0,
      87,     0,     0,    84,     0,     0,     0,     0,     0,     0,
     110,     0,   259,     0,     0,   550,   111,     0,    89,    87,
      84,    87,    98,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    87,     0,   109,    89,     0,    89,    89,
     260,     0,     0,     0,   339,   340,   261,     0,     0,     0,
      89,     0,     0,     0,   609,     0,    91,   610,    98,     0,
     365,     0,     0,     0,     0,     0,   551,   552,   553,   554,
       0,   555,   556,     0,     0,    91,     0,     0,     0,     0,
       0,   110,     0,     0,     0,    91,     0,   111,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    89,     0,    87,
       0,     0,   410,    87,     0,    91,     0,     0,     0,     0,
       0,     0,    87,     0,     0,     0,    89,     0,    89,    87,
       0,     0,     0,    91,     0,    91,    91,    87,    87,     0,
      89,   339,   340,   411,     0,     0,     0,    91,     0,     0,
       0,   260,   135,     0,   557,    87,     0,   261,     0,     0,
       0,     0,     0,   412,   413,   414,   415,     0,   416,   417,
       0,     0,     0,    87,   110,    87,   558,    87,     0,   365,
     111,     0,     0,     0,    87,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    91,     0,     0,     0,     0,     0,
       0,    87,     0,     0,     0,     0,    89,     0,     0,    93,
      89,     0,     0,    91,     0,    91,     0,     0,     0,    89,
       0,     0,     0,     0,     0,     0,    89,    91,    93,     0,
       0,     0,    87,     0,    89,    89,     0,     0,    93,     0,
       0,   418,     0,     0,     0,     0,     0,   135,     0,    87,
       0,     0,    89,     0,     0,     0,     0,     0,    93,     0,
       0,     0,     0,   419,     0,     0,   365,     0,     0,     0,
      89,     0,    89,     0,    89,     0,    93,     0,    93,    93,
       0,    89,     0,   135,     0,     0,     0,     0,     0,     0,
      93,     0,     0,    91,     0,     0,     0,    91,    89,     0,
       0,     0,     0,     0,     0,     0,    91,     0,     0,     0,
       0,    95,     0,    91,     0,     0,     0,     0,     0,     0,
       0,    91,    91,     0,     0,     0,     0,     0,     0,    89,
      95,     0,   114,     0,     0,     0,     0,    93,     0,    91,
      95,     0,   423,     0,     0,     0,    89,     0,     0,    96,
       0,     0,     0,     0,     0,     0,    93,    91,    93,    91,
      95,    91,   262,     0,     0,     0,     0,     0,    91,     0,
      93,   339,   340,   424,     0,   116,     0,     0,    95,     0,
      95,    95,     0,     0,     0,    91,     0,     0,     0,     0,
       0,     0,    95,   425,   426,   427,   428,     0,   429,   430,
       0,     0,     0,   114,     0,   263,     0,     0,    98,     0,
       0,     0,     0,     0,     0,     0,    91,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    98,     0,     0,
       0,     0,     0,    91,     0,     0,    93,    98,     0,    95,
      93,     0,     0,     0,    96,     0,   116,     0,     0,    93,
       0,     0,     0,     0,     0,     0,    93,    98,    95,     0,
      95,   573,     0,   262,    93,    93,     0,     0,   436,     0,
       0,   431,    95,     0,     0,    98,     0,    98,    98,     0,
      96,     0,    93,     0,   100,     0,   114,     0,     0,    98,
     339,   340,   574,   432,     0,     0,   365,   339,   340,   437,
      93,     0,    93,     0,    93,     0,   263,     0,     0,     0,
       0,    93,   575,   576,   577,   578,     0,   579,   580,   438,
     439,   440,   441,     0,   442,   443,     0,     0,    93,   116,
       0,     0,     0,     0,   485,     0,    98,     0,    95,     0,
       0,     0,    95,     0,     0,     0,     0,     0,     0,     0,
       0,    95,     0,     0,     0,    98,     0,    98,    95,    93,
       0,     0,     0,   339,   340,   486,    95,    95,     0,    98,
       0,     0,     0,     0,     0,     0,    93,     0,     0,   100,
     117,     0,     0,     0,    95,   487,   488,   489,   490,     0,
     491,   492,     0,     0,     0,     0,     0,   444,     0,     0,
     109,     0,    95,     0,    95,     0,    95,     0,     0,     0,
     264,     0,   582,    95,     0,   100,     0,   448,     0,   445,
       0,     0,   365,   135,     0,     0,     0,     0,     0,     0,
      95,     0,     0,     0,     0,    98,     0,     0,     0,    98,
       0,     0,   135,     0,     0,     0,   339,   340,    98,     0,
       0,   117,   135,     0,     0,    98,     0,     0,     0,     0,
       0,    95,     0,    98,    98,     0,     0,   119,   449,   450,
     451,   452,   135,   453,   454,     0,     0,     0,    95,     0,
       0,    98,   494,     0,     0,   495,     0,     0,   365,   586,
     135,     0,   135,   135,     0,   109,     0,   265,     0,    98,
       0,    98,     0,    98,   135,     0,     0,     0,     0,     0,
      98,   264,     0,     0,     0,     0,     0,     0,   339,   340,
     587,     0,     0,     0,     0,     0,   626,    98,     0,   110,
       0,   109,     0,     0,   117,   111,     0,     0,   119,     0,
     588,   589,   590,   591,     0,   592,   593,     0,     0,     0,
       0,   135,     0,     0,     0,   339,   340,   627,    98,   658,
       0,     0,     0,     0,     0,     0,     0,     0,   456,     0,
     135,   365,   135,     0,     0,    98,     0,   628,   629,   630,
     631,     0,   632,   633,   135,     0,     0,     0,   339,   340,
     659,     0,     0,     0,     0,     0,     0,     0,   265,     0,
       0,     0,     0,     0,     0,   670,     0,     0,     0,     0,
     660,   661,   662,   663,     0,   664,   665,     0,   594,     0,
      96,   119,     0,   120,   110,     0,     0,     0,     0,     0,
     111,     0,     0,     0,   339,   340,   671,     0,     0,    96,
     595,     0,     0,   365,     0,     0,     0,     0,     0,    96,
     135,     0,     0,   266,   135,   634,   672,   673,   674,   675,
     110,   676,   677,   135,     0,     0,   111,     0,     0,    96,
     135,     0,     0,     0,     0,   501,     0,   635,   135,   135,
     365,     0,     0,     0,     0,     0,     0,    96,   666,    96,
      96,     0,     0,   338,   120,     0,   135,     0,     0,     0,
       0,    96,     0,     0,   339,   340,   502,     0,   122,     0,
     667,     0,     0,   365,   135,     0,   135,     0,   135,     0,
       0,     0,   339,   340,     0,   135,   503,   504,   505,   506,
       0,   507,   508,     0,   678,   561,     0,     0,     0,     0,
       0,     0,   135,     0,   341,   342,   343,   344,    96,   345,
     346,     0,     0,     0,   266,   100,   679,     0,     0,   365,
       0,     0,     0,     0,   339,   340,     0,    96,     0,    96,
       0,     0,     0,   135,   100,     0,     0,   120,     0,   122,
       0,    96,     0,     0,   100,     0,   562,   563,   564,   565,
     135,   566,   567,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   639,     0,   100,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   100,   510,   100,   100,   511,     0,     0,   365,
       0,   339,   340,     0,     0,     0,   100,     0,     0,     0,
       0,   114,     0,     0,   348,     0,     0,    96,     0,     0,
       0,    96,     0,   640,   641,   642,   643,     0,   644,   645,
      96,     0,   122,     0,   568,     0,     0,    96,     0,     0,
       0,   109,     0,     0,     0,    96,    96,     0,     0,     0,
       0,     0,     0,   100,   116,     0,   569,     0,     0,   365,
     109,   123,     0,    96,     0,     0,     0,     0,     0,     0,
     109,     0,   100,     0,   100,     0,     0,     0,     0,     0,
       0,    96,     0,    96,     0,    96,   100,     0,     0,     0,
     109,     0,    96,     0,     0,     0,     0,     0,     0,     0,
       0,   646,     0,     0,     0,     0,   114,     0,   109,    96,
     109,   109,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   109,   647,     0,     0,   365,     0,     0,     0,
       0,     0,   123,     0,     0,     0,     0,     0,     0,     0,
      96,     0,   114,     0,     0,     0,     0,     0,     0,   116,
       0,     0,   100,     0,     0,     0,   100,    96,     0,     0,
       0,     0,     0,     0,     0,   100,     0,     0,     0,   109,
     110,     0,   100,     0,     0,     0,   111,     0,     0,     0,
     100,   100,     0,     0,     0,   116,     0,     0,   109,   110,
     109,     0,     0,     0,   124,   111,     0,     0,   100,   110,
       0,     0,   109,     0,     0,   111,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   100,     0,   100,   110,
     100,     0,     0,     0,     0,   111,     0,   100,     0,     0,
       5,     0,     7,     8,     0,     9,    10,   110,     0,   110,
     110,    15,     0,   111,   100,   111,   111,    17,    18,    19,
       0,   110,     0,     0,     0,   355,     0,   111,   191,   117,
       0,     0,     0,    26,    27,   124,     0,     0,   109,     0,
       0,     0,   109,     0,     0,   100,     0,     0,     0,     0,
     192,   109,     0,     0,   339,   340,   356,     0,   109,   308,
     132,     0,   100,     0,     0,     0,   109,   109,   110,    39,
       0,    41,    42,     0,   111,     0,   357,   358,   359,   360,
       0,   361,   362,     0,   109,     0,     0,   110,     0,   110,
       0,     0,     0,   111,     0,   111,     0,    47,     0,     0,
       0,   110,   109,     0,   109,     0,   109,   111,     0,   309,
       0,     0,   370,   109,     0,     0,   119,     0,   124,     0,
       0,     0,     0,     0,   117,     0,     0,     0,     0,     0,
     109,   132,     0,     0,   193,     0,     0,     0,     0,   194,
     195,   339,   340,   371,     0,     0,    67,   304,     0,     0,
       0,     0,    70,    71,     0,    72,     0,     0,     0,     0,
     117,   109,     0,   372,   373,   374,   375,   110,   376,   377,
       0,   110,     0,   111,     0,     0,   364,   111,   109,   365,
     110,     0,     0,     0,     0,     0,   111,   110,     0,     0,
       0,     0,     0,   111,     0,   110,   110,     0,     0,     0,
       0,   111,   111,     0,     0,     0,     0,     0,     0,     0,
       0,   119,     0,   110,   132,     0,     0,     0,     0,   111,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   110,     0,   110,     0,   110,     0,   111,     0,   111,
       0,   111,   110,     0,     0,     0,   384,   119,   111,     0,
       0,     0,   114,     0,     0,     0,     0,     0,     0,   110,
       0,     0,     0,   379,     0,   111,   365,     0,     0,     0,
       0,   114,   120,     0,     0,   339,   340,   385,     0,     0,
       0,   114,     0,     0,     0,     0,   410,     0,     0,     0,
     110,     0,     0,     0,     0,   116,   111,   386,   387,   388,
     389,   114,   390,   391,     0,     0,     0,   110,     0,     0,
       0,     0,     0,   111,   116,   339,   340,   411,   423,   114,
       0,   114,   114,     0,   116,     0,     0,     0,     0,     0,
     436,     0,     0,   114,     0,     0,     0,   412,   413,   414,
     415,     0,   416,   417,   116,     0,     0,   339,   340,   424,
       0,     0,     0,     0,     0,     0,     0,   122,     0,   339,
     340,   437,   116,   658,   116,   116,     0,   120,     0,   425,
     426,   427,   428,     0,   429,   430,   116,   550,     0,     0,
     114,   438,   439,   440,   441,     0,   442,   443,     0,     0,
       0,     0,   339,   340,   659,     0,     0,   393,     0,   114,
     365,   114,     0,   120,     0,     0,   339,   340,     0,   561,
       0,     0,     0,   114,   660,   661,   662,   663,     0,   664,
     665,     0,     0,   116,     0,     0,     0,     0,   551,   552,
     553,   554,     0,   555,   556,     0,     0,   419,   339,   340,
     365,     0,   116,     0,   116,     0,     0,     0,     0,     0,
       0,     0,   122,     0,     0,     0,   116,     0,     0,     0,
     562,   563,   564,   565,     0,   566,   567,     0,     0,   432,
       0,     0,   365,     0,     0,     0,     0,     0,     0,   114,
       0,   445,     0,   114,   365,     0,     0,     0,   122,     0,
       0,     0,   114,     0,     0,     0,     0,     0,     0,   114,
     117,     0,     0,     0,     0,     0,     0,   114,   114,     0,
       0,     0,     0,     0,   667,     0,     0,   365,     0,   117,
       0,     0,   116,     0,     0,   114,   116,     0,   558,   117,
       0,   365,     0,     0,     0,   116,     0,     0,     0,     0,
     123,     0,   116,   114,     0,   114,     0,   114,     0,   117,
     116,   116,     0,     0,   114,     0,     0,     0,     0,     0,
     569,     0,     0,   365,     0,     0,     0,   117,   116,   117,
     117,   114,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   117,     0,     0,     0,     0,   116,   119,   116,     0,
     116,     0,     0,     0,     0,     0,     0,   116,     0,     0,
       0,     0,   114,     0,     0,     0,   119,     0,     0,     0,
       0,     0,     0,   397,   116,     0,   119,     0,     0,   114,
       0,     0,     0,     0,     0,     0,     0,     0,   117,     0,
       0,     0,     0,     0,     0,   123,   119,     0,     0,     0,
       0,     0,   339,   340,   398,   116,     0,   117,     0,   117,
       0,     0,     0,     0,   119,     0,   119,   119,     0,     0,
       0,   117,   116,     0,   399,   400,   401,   402,   119,   403,
     404,   123,     0,   124,     0,     0,     0,     0,     0,     0,
       0,     0,  -326,  -326,  -326,  -326,  -326,  -326,  -326,  -326,
    -326,  -326,     0,     0,     0,     0,  -326,  -326,  -326,  -326,
    -326,  -326,  -326,  -326,  -326,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,     0,     0,     0,     0,
       0,     0,     0,   460,     0,     0,     0,   117,     0,     0,
     573,   117,     0,     0,   119,     0,   119,     0,     0,     0,
     117,     0,     0,   120,     0,     0,     0,   117,   119,     0,
       0,     0,   339,   340,   461,   117,   117,     0,     0,   339,
     340,   574,   120,     0,   406,     0,     0,   365,   124,   132,
       0,     0,   120,   117,   462,   463,   464,   465,     0,   466,
     467,   575,   576,   577,   578,     0,   579,   580,     0,     0,
       0,   117,   120,   117,     0,   117,     0,     0,     0,     0,
       0,     0,   117,     0,   124,     0,     0,     0,     0,     0,
     120,     0,   120,   120,   119,     0,     0,     0,   119,   117,
       0,     0,     0,     0,   120,     0,     0,   119,   122,     0,
       0,     0,   748,   749,   119,     0,   750,   751,   752,     0,
       0,     0,   119,   119,     0,     0,     0,   122,     0,     0,
     117,     0,   468,     0,   753,   754,     0,   122,     0,   581,
     119,     0,     0,     0,   132,   755,     0,   117,     0,     0,
       0,   120,     0,     0,   469,     0,     0,   122,   119,     0,
     119,   582,   119,     0,     0,     0,     0,     0,     0,   119,
     120,     0,   120,     0,     0,   122,     0,   122,   122,     0,
     132,     0,     0,     0,   120,     0,   119,     0,     0,   122,
       0,     0,     0,     0,     0,     0,   756,   757,   758,   759,
     760,     0,     0,     0,     0,   844,   845,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,     0,   761,
     762,   763,   764,   765,   766,   767,   768,   769,   770,   771,
       0,     0,     0,     0,   119,     0,   122,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     120,     0,     0,     0,   120,   122,     0,   122,     0,     0,
       0,     0,     0,   120,     0,     0,     0,     0,     0,   122,
     120,     0,     0,     0,     0,     0,     0,     0,   120,   120,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,     0,     0,     0,     0,   120,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,     0,     0,     0,   120,     0,   120,     0,   120,     0,
     123,     0,     0,     0,     0,   120,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   122,     0,     0,     0,   122,
     123,     0,   120,     0,     0,     0,     0,     0,   122,     0,
       0,     0,     0,     0,     0,   122,     0,     0,   123,     0,
     123,   123,     0,   122,   122,     0,     0,     0,     0,     0,
       0,     0,   123,   120,     0,     0,   750,   751,   752,     0,
       0,   122,     0,     0,     0,     0,     0,     0,     0,     0,
     120,     0,     0,     0,   753,   754,     0,     0,     0,   122,
       0,   122,     0,   122,     0,   755,     0,     0,     0,     0,
     122,     0,     0,     0,     0,     0,     0,     0,     0,   123,
       0,     0,     0,     0,   124,     0,     0,   122,     5,     0,
       7,     8,     0,     9,    10,     0,     0,     0,   123,    15,
     123,     0,     0,   124,     0,    17,    18,    19,     0,     0,
       0,     0,   123,   124,     0,     0,   191,     0,   122,   759,
     760,    26,    27,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   124,     0,   122,     0,     0,   192,   761,
     762,   763,   764,   765,   766,   767,   768,   769,   770,   771,
       0,   124,     0,   124,   124,     0,     0,    39,     0,    41,
      42,     0,     0,     0,     0,   124,     0,     0,     0,     0,
     748,   749,     0,     0,   750,   751,   752,     0,   123,     0,
     132,     0,   123,     0,     0,    47,     0,     0,     0,     0,
       0,   123,   753,   754,     0,     0,     0,     0,   123,   132,
       0,     0,     0,   755,     0,     0,   123,   123,     0,   132,
       0,     0,   124,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   193,     0,   123,     0,     0,   194,   195,   132,
       0,   124,     0,   124,    67,   789,     0,     0,   790,     0,
      70,    71,   123,    72,   123,   124,   123,   132,     0,   132,
     132,     0,     0,   123,   756,   757,   758,   759,   760,     0,
       0,   132,     0,     0,     0,     0,     0,     0,     0,     0,
     123,     0,     0,     0,     0,     0,     0,   761,   762,   763,
     764,   765,   766,   767,   768,   769,   770,   771,     0,     0,
       0,     0,    68,    69,     0,     0,     0,     0,     0,     0,
       0,   123,     0,     0,     0,     0,     0,     0,   132,     0,
       0,   124,     0,     0,     0,   124,     0,     0,   123,     0,
       0,     0,     0,     0,   124,     0,     0,   132,     0,   132,
       0,   124,     0,     0,     0,     0,     0,     0,     0,   124,
     124,   132,     0,     0,     0,     0,   813,   814,   815,   816,
     817,   818,   819,   820,   821,   822,     0,   124,     0,     0,
     823,   824,   825,   826,   827,   828,   829,   830,   831,     0,
       0,     0,     0,     0,     0,   124,     0,   124,     0,   124,
       0,     0,     0,     0,     0,     0,   124,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     230,   232,   235,   124,     0,     0,     0,   132,     0,     0,
       0,   132,   245,     0,     0,     0,     0,     0,   277,     0,
     132,     0,     0,   282,   283,   285,     0,   132,     0,   290,
     291,  1116,     0,     0,   124,   132,   132,     0,     0,     0,
     296,   297,     0,   298,   299,   301,     0,     0,     0,     0,
       0,   124,   315,   132,     0,     0,     0,     0,     0,     0,
       0,   350,     0,   350,     0,   350,   350,     0,   350,     0,
     350,   132,   350,   132,   350,   132,     0,   350,     0,   350,
       0,   350,   132,     0,   350,     0,   350,   521,   350,     0,
       0,     0,   350,   585,     0,   350,     0,     0,   350,   132,
       0,   350,     0,     0,     0,     0,     0,     0,     0,     5,
       0,     7,     8,   245,     9,    10,     0,     0,     0,     0,
      15,   350,     0,   175,     0,     0,    17,    18,    19,     0,
     132,     0,     0,     0,     0,     0,     0,   191,     0,     0,
       0,     0,    26,    27,     0,     0,     0,   132,     0,     0,
       0,     0,   727,     0,     0,     0,     0,     0,     0,   192,
       0,     0,     0,   731,   731,   731,   731,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    39,     0,
      41,    42,     0,   750,   751,   752,     0,     0,     0,     0,
       0,     0,     0,     0,   333,     0,     0,     0,     0,     0,
       0,   753,   754,     0,     0,     0,    47,     0,     0,     0,
       0,     0,   755,   777,     0,     0,   780,     0,   731,     0,
       0,     0,   787,   791,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   193,     0,     0,     0,     0,   194,   195,
       0,   802,   787,   731,     0,    67,   304,     0,     0,     0,
       0,    70,    71,   756,    72,   758,   759,   760,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   728,     0,     5,
     730,     7,     8,     0,     9,    10,     0,     0,     0,     0,
      15,     0,     0,     0,   864,   865,    17,    18,    19,     0,
       0,     0,     0,     0,     0,     0,     0,   191,   315,     0,
       0,     0,    26,    27,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   315,     0,     0,     0,     0,   192,
       0,     0,   776,     0,     0,   779,     0,     0,     0,   315,
       0,     0,   786,     0,     0,     0,     0,     0,    39,     0,
      41,    42,     5,   315,     7,     8,     0,     9,    10,     0,
       0,     0,     0,    15,     0,     0,   315,     0,     0,    17,
      18,    19,     0,     0,     0,   806,    47,     0,     0,   315,
     191,     0,     0,     0,   812,    26,    27,   836,     0,     0,
     839,     0,   315,   842,     0,     0,     0,   847,   848,   849,
       0,   851,   192,   852,     0,   315,     0,     0,     0,     0,
       0,     0,     0,   193,     0,     0,   315,     0,   194,   195,
       0,    39,     0,    41,    42,    67,   789,     0,     0,   315,
       0,    70,    71,     0,    72,     0,     0,     0,     0,     0,
     315,     0,     0,     0,     0,     0,     0,     0,     0,    47,
       0,     0,     0,     0,     0,   315,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   315,     0,     0,     0,     0,     0,     0,     5,     0,
       7,     8,     0,     9,    10,     0,   193,     0,     0,    15,
       0,   194,   195,     0,     0,    17,    18,    19,    67,  1353,
       0,     0,     0,     0,    70,    71,   191,    72,     0,     0,
       0,    26,    27,     0,     0,     0,     0,     0,   315,     0,
       0,     0,     0,     0,     0,   367,     0,     0,   192,   315,
     395,     0,   408,     0,   421,     0,   434,     0,   447,   458,
       0,     0,   315,   482,     0,   498,     0,    39,   514,    41,
      42,     0,   560,   572,     0,   315,     0,   598,     0,   612,
     624,     0,   638,   650,     0,     0,     0,     0,     0,     0,
     315,     0,     0,     0,     0,    47,     0,     0,   669,     0,
       0,     0,   315,   682,   813,   814,   815,   816,   817,   818,
     819,   820,   821,   822,     0,   315,     0,     0,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   315,     0,     0,
       0,     0,   193,     0,     0,     0,     0,   194,   195,     0,
       0,     0,     0,     0,    67,     0,     0,   315,     0,     0,
      70,    71,     0,    72,     0,     0,     0,     0,     0,   315,
     367,     0,   395,   408,   421,   434,   447,   458,     0,   482,
     498,   514,   560,   572,     0,   598,   612,   624,   638,   650,
       0,     0,     0,  1441,     0,     0,     0,     0,     0,     0,
     669,     0,   682,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     367,     0,   395,   408,   421,   434,   447,   458,     0,   482,
     498,   514,   560,   572,     0,   598,   612,   624,   638,   650,
       0,   669,   682,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   813,   814,   815,   816,   817,
     818,   819,   820,   821,   822,  1160,     0,     0,  1162,   823,
     824,   825,   826,   827,   828,   829,   830,   831,     0,  1171,
     791,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   791,   586,
       0,  1189,     0,     0,     0,     0,  1193,     0,     0,     0,
       0,  1194,     0,     0,   748,   749,  1195,     0,   750,   751,
     752,  1196,     0,     0,     0,  1089,     0,     0,   339,   340,
     587,     0,     0,     0,  1493,     0,   753,   754,     0,     0,
    1210,     0,     0,     0,     0,     0,     0,   755,  1214,     0,
     588,   589,   590,   591,  1113,   592,   593,     0,  1114,     0,
    1115,     0,     0,  1121,     0,  1122,  1123,  1124,  -336,  -336,
    -336,  -336,  -336,  -336,  -336,  -336,  -336,  -336,     0,     0,
       0,     0,  -336,  -336,  -336,  -336,  -336,  -336,  -336,  -336,
    -336,     0,     0,     0,     0,     0,     0,     0,   756,   757,
     758,   759,   760,  1157,   863,  1159,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1170,
       0,   761,   762,   763,   764,   765,   766,   767,   768,   769,
     770,   771,     0,     0,  1179,  1180,     0,     0,  1184,     0,
    1187,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     595,     0,     0,   365,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1200,
       0,     0,     0,     0,  1205,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      -3,     4,     0,   -46,   -46,     5,     6,     7,     8,     0,
       9,    10,    11,    12,    13,    14,    15,    16,     0,   447,
       0,     0,    17,    18,    19,     0,    20,    21,    22,    23,
      24,     0,     0,     0,    25,     0,     0,     0,    26,    27,
       0,    28,     0,     0,     0,     0,    29,    30,    31,    32,
       0,     0,     0,     0,     0,    33,     0,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,    36,    37,
       0,     0,    38,     0,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
      44,    45,     0,     0,     0,  1235,  1236,     0,     0,     0,
       0,    46,    47,    48,    49,     0,    50,    51,     0,    52,
       0,     0,    53,    54,     0,     0,     0,     0,     0,     0,
     731,     0,    55,    56,     0,  1261,    57,    58,    59,    60,
      61,    62,    63,     0,    64,    65,    66,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    67,     0,    68,    69,     0,     0,    70,    71,     0,
      72,  1264,     0,  1265,     0,     0,   731,     0,     0,  1270,
       0,     0,  1272,     0,   791,   613,     0,  1275,  1276,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1282,     0,
    1189,     0,     0,     0,     0,     0,     0,  1290,  1282,     0,
       0,     0,     0,  1296,   339,   340,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   614,   615,   616,   617,
       0,   618,   619,     0,     0,     0,     0,     0,     0,     0,
    1238,     0,     0,     0,  -345,  -345,  -345,  -345,  -345,  -345,
    -345,  -345,  -345,  -345,     0,     0,     0,     0,  -345,  -345,
    -345,  -345,  -345,  -345,  -345,  -345,  -345,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   682,     0,     0,
    1367,  1368,   369,     0,   382,   383,     0,   396,     0,   409,
       0,   422,     0,   435,     0,     0,   459,     0,   471,     0,
     483,     0,     0,   499,  1386,   515,   545,   549,  1269,     0,
       0,   584,     0,     0,   599,  1400,     0,   625,     0,     0,
     651,     0,  1277,   621,     0,     0,   622,     0,   218,   365,
       0,  1289,     0,     0,     0,     0,     0,     0,   239,   240,
     683,     0,     0,     0,     0,     0,  1302,  1428,     0,     0,
    1309,     0,   175,  1430,     0,     0,     0,     0,     0,     0,
     289,  1435,     0,     0,   293,     0,  1439,     0,   295,     0,
       0,  1445,     0,  1324,  1290,     0,     0,     0,  1328,  1452,
    1453,     0,  1331,   314,     0,     0,     0,     0,  1339,     0,
       0,     0,     0,   175,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1261,  1468,     0,   813,   814,   815,
     816,   817,   818,   819,   820,   821,   822,     0,     0,     0,
    1365,   823,   824,   825,   826,   827,   828,   829,   830,   831,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1384,     0,  1497,     0,     0,  1500,  1391,     0,
       0,   333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1410,  1411,  1412,     0,
       0,  1415,     0,   723,     0,     0,     0,     0,     0,     0,
       0,  1423,     0,     0,   333,     0,  1525,   748,   749,   729,
    1429,   750,   751,   752,     0,     0,     0,     0,     0,  1527,
       0,     0,     0,   737,  1437,  1438,   739,   740,     0,   753,
     754,     0,     0,     0,     0,     0,  1449,     0,     0,  1451,
     755,     0,     0,  1455,     0,     0,     0,  1456,  1457,   750,
     751,   752,     0,  1458,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1552,  1553,     0,     0,   753,   754,     0,
       0,     0,     0,     0,     0,   793,     0,     0,   755,     0,
       0,     0,     0,     0,     0,     0,  1481,     0,     0,     0,
     175,   756,   757,   758,   759,   760,     0,     0,     0,     0,
       0,   845,     0,     0,  1496,     0,     0,   807,     0,     0,
       0,     0,     0,     0,   761,   762,   763,   764,   765,   766,
     767,   768,   769,   770,   771,     0,     0,     0,     0,   756,
    1513,  1514,   759,   760,     0,     0,   853,     0,     0,     0,
       0,     0,     0,     0,     0,   333,     0,     0,     0,     0,
       0,     0,   761,   762,   763,   764,   765,   766,   767,   768,
     769,   770,   771,     0,     0,  1532,     0,     0,     0,     0,
     867,     0,     0,   868,   869,   870,   871,   872,   873,   874,
       0,     0,     0,  1538,     0,     0,     0,   876,     0,   877,
     878,   879,   880,   881,   882,   883,     0,   885,     0,     0,
       0,     0,   888,     0,   889,   890,   891,   892,   893,   894,
     895,     0,     0,     0,     0,     0,   897,     0,   898,   899,
     900,   901,   902,   903,   904,     0,     0,     0,     0,   906,
       0,   907,   908,   909,   910,   911,   912,   913,     0,     0,
       0,     0,   915,     0,   916,   917,   918,   919,   920,   921,
     922,     0,     0,     0,     0,   924,     0,   925,   926,   927,
     928,   929,   930,   931,     0,     0,     0,     0,   933,     0,
     934,   935,   936,   937,   938,   939,   940,     0,     0,     0,
     942,   943,   944,   945,   946,   947,   948,   949,     0,     0,
       0,     0,   951,     0,   952,   953,   954,   955,   956,   957,
     958,     0,     0,     0,   960,   961,   962,   963,   964,   965,
     966,   967,     0,     0,     0,     0,     0,   969,     0,   970,
     971,   972,   973,   974,   975,   976,     0,     0,     0,     0,
       0,     0,     0,   979,     0,   980,   981,   982,   983,   984,
     985,   986,     0,     0,     0,     0,     0,     0,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,     0,     0,
       0,     0,   823,   824,   825,   826,   827,   828,   829,   830,
     831,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   989,   990,   991,   992,   993,   994,   995,   996,
       0,     0,     0,   998,   999,  1000,  1001,  1002,  1003,  1004,
    1005,     0,     0,     0,     0,  1007,     0,  1008,  1009,  1010,
    1011,  1012,  1013,  1014,     0,     0,     0,     0,  1018,     0,
    1019,  1020,  1021,  1022,  1023,  1024,  1025,  1541,     0,     0,
       0,     0,  1027,     0,  1028,  1029,  1030,  1031,  1032,  1033,
    1034,     0,     0,     0,     0,  1037,  1038,  1039,  1040,  1041,
    1042,  1043,  1044,     0,     0,     0,     0,     0,  1047,     0,
    1048,  1049,  1050,  1051,  1052,  1053,  1054,     0,     0,     0,
     626,  1056,  1057,  1058,  1059,  1060,  1061,  1062,  1063,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1066,     0,  1067,  1068,  1069,  1070,  1071,  1072,  1073,   339,
     340,   627,  1075,     0,  1076,  1077,  1078,  1079,  1080,  1081,
    1082,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   628,   629,   630,   631,     0,   632,   633,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  -342,
    -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,  -342,     0,
       0,     0,     0,  -342,  -342,  -342,  -342,  -342,  -342,  -342,
    -342,  -342,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1133,  1134,  1135,  1136,  1137,  1138,  1139,  1140,  1141,  1142,
    1143,  1144,  1145,  1146,  1147,  1148,  1149,  1150,  1151,  1152,
    1153,  1154,  1155,  1156,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   635,   793,     0,   365,     0,     0,     0,     0,     0,
       0,     0,  1175,     0,     0,     0,     0,     0,     0,     0,
     793,     4,     0,   -46,   -46,     5,     6,     7,     8,     0,
       9,    10,    11,    12,    13,    14,    15,    16,     0,     0,
    1392,     0,    17,    18,    19,     0,    20,    21,    22,    23,
      24,     0,     0,     0,    25,     0,  1206,  1207,    26,    27,
       0,    28,     0,     0,     0,     0,    29,    30,    31,    32,
       0,  1217,     0,     0,     0,    33,     0,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,    36,    37,
       0,     0,    38,     0,    39,    40,    41,    42,  1223,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
      44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    46,    47,    48,    49,     0,    50,    51,     0,    52,
       0,     0,    53,    54,     0,     0,     0,     0,     0,     0,
       0,     0,    55,    56,     0,     0,    57,    58,    59,    60,
      61,    62,    63,     0,    64,    65,    66,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    67,     0,    68,    69,     0,     0,    70,    71,     0,
      72,     0,     0,     0,     0,     0,     4,     0,   -46,   -46,
       5,     6,     7,     8,     0,     9,    10,    11,    12,    13,
      14,    15,    16,     0,     0,  1425,     0,    17,    18,    19,
       0,    20,    21,    22,    23,    24,     0,     0,     0,    25,
       0,     0,     0,    26,    27,     0,    28,     0,     0,     0,
       0,    29,    30,    31,    32,     0,     0,     0,     0,     0,
      33,     0,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,    36,    37,     0,     0,    38,     0,    39,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,    44,    45,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,    47,    48,    49,
       0,    50,    51,     0,    52,     0,     0,    53,    54,     0,
       0,     0,  1232,     0,     0,     0,     0,    55,    56,     0,
    1237,    57,    58,    59,    60,    61,    62,    63,     0,    64,
      65,    66,     0,     0,     0,     0,     0,     0,  1253,     0,
       0,     0,     0,     0,     0,     0,    67,     0,    68,    69,
       0,     0,    70,    71,     0,    72,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,   -46,   -46,     5,     6,
       7,     8,     0,     9,    10,    11,    12,    13,    14,    15,
      16,     0,     0,     0,     0,    17,    18,    19,     0,    20,
      21,    22,    23,    24,     0,     0,   793,    25,     0,     0,
       0,    26,    27,     0,    28,     0,     0,     0,     0,    29,
      30,    31,    32,     0,     0,     0,     0,     0,    33,     0,
      34,     0,     0,     0,  1295,     0,     0,     0,     0,     0,
      35,    36,    37,     0,     0,    38,     0,    39,    40,    41,
      42,     0,     0,     0,     0,     0,  1320,     0,     0,     0,
       0,    43,     0,    44,    45,  1325,     0,     0,     0,     0,
       0,  1330,     0,     0,    46,    47,    48,    49,     0,    50,
      51,     0,    52,     0,     0,    53,    54,     0,     0,  1345,
       0,     0,     0,     0,     0,    55,    56,     0,  1351,    57,
      58,    59,    60,    61,    62,    63,     0,    64,    65,    66,
       0,     0,     0,  1519,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    67,     0,    68,    69,     0,     0,
      70,    71,     0,    72,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1398,     0,     4,     0,
     -46,   -46,     5,     6,     7,     8,     0,     9,    10,    11,
      12,    13,    14,    15,    16,     0,     0,     0,     0,    17,
      18,    19,     0,    20,    21,    22,    23,    24,  1427,     0,
       0,    25,     0,     0,     0,    26,    27,     0,    28,     0,
    1434,     0,     0,    29,    30,    31,    32,     0,     0,     0,
       0,     0,    33,     0,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,    36,    37,     0,     0,    38,
       0,    39,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,    44,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,    47,
      48,    49,     0,    50,    51,     0,    52,     0,  1482,    53,
      54,     0,     0,     0,     0,     0,     0,     0,     0,    55,
      56,     0,     0,    57,    58,    59,    60,    61,    62,    63,
       0,    64,    65,    66,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1511,     0,     0,    67,     0,
      68,    69,     0,     0,    70,    71,     4,    72,  -139,  -139,
       5,     6,     7,     8,     0,     9,    10,     0,   701,     0,
    1521,    15,    16,  -751,  -751,  -751,  -751,    17,    18,    19,
       0,    20,    21,    22,   702,   703,     0,     0,     0,    25,
       0,     0,     0,    26,    27,     0,    28,  -751,  -751,  -751,
    -751,     0,    30,    31,    32,  -751,     0,     0,     0,     0,
     192,     0,    34,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    35,    36,    37,  -751,  -751,    38,     0,    39,
      40,    41,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    43,     0,    44,    45,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    47,    48,    49,
       0,     0,    51,  -751,    52,  -751,  -751,   704,   705,     0,
       0,     0,     0,     0,     0,  -751,     0,     0,    56,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     4,     0,  -139,  -139,     5,
       6,     7,     8,     0,     9,    10,    67,   701,    68,    69,
      15,    16,    70,    71,  -773,    72,    17,    18,    19,     0,
      20,    21,    22,   702,   703,     0,     0,     0,    25,     0,
       0,     0,    26,    27,     0,    28,  -773,  -773,  -773,     0,
       0,    30,    31,    32,     0,     0,     0,     0,     0,   192,
       0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,    36,    37,     0,     0,    38,     0,    39,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,    44,    45,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    47,    48,    49,     0,
       0,    51,     0,    52,     0,     0,   704,   705,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,  -139,  -139,     5,     6,
       7,     8,     0,     9,    10,    67,   701,    68,    69,    15,
      16,    70,    71,  -774,    72,    17,    18,    19,     0,    20,
      21,    22,   702,   703,     0,     0,     0,    25,     0,     0,
       0,    26,    27,     0,    28,  -774,  -774,  -774,     0,     0,
      30,    31,    32,     0,     0,     0,     0,     0,   192,     0,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      35,    36,    37,     0,     0,    38,     0,    39,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,    44,    45,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,    48,    49,     0,     0,
      51,     0,    52,     0,     0,   704,   705,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    56,   813,   814,   815,
     816,   817,   818,   819,   820,   821,   822,     0,     0,     0,
       0,   823,   824,   825,   826,   827,   828,   829,   830,   831,
       0,     0,     0,     0,    67,     0,    68,    69,     0,     0,
      70,    71,     4,    72,  -139,  -139,     5,     6,     7,     8,
       0,     9,    10,     0,   701,     0,     0,    15,    16,  -750,
    -750,  -750,  -750,    17,    18,    19,     0,    20,    21,    22,
     702,   703,     0,     0,     0,    25,     0,     0,     0,    26,
      27,     0,    28,     0,     0,     0,     0,     0,    30,    31,
      32,     0,     0,     0,     0,     0,   192,     0,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,    36,
      37,     0,     0,    38,     0,    39,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,    44,    45,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    47,    48,    49,     0,     0,    51,     0,
      52,     0,     0,   704,   705,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    56,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     4,     0,  -139,  -139,     5,     6,     7,     8,     0,
       9,    10,    67,   701,    68,    69,    15,    16,    70,    71,
    -750,    72,    17,    18,    19,     0,    20,    21,    22,   702,
     703,     0,     0,     0,    25,     0,     0,     0,    26,    27,
       0,    28,  -750,  -750,  -750,     0,     0,    30,    31,    32,
       0,     0,     0,     0,     0,   192,     0,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,    36,    37,
       0,     0,    38,     0,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
      44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    47,    48,    49,     0,     0,    51,     0,    52,
       0,     0,   704,   705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    56,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       4,     0,  -139,  -139,     5,     6,     7,     8,     0,     9,
      10,    67,   701,    68,    69,    15,    16,    70,    71,  -750,
      72,    17,    18,    19,     0,    20,    21,    22,   702,   703,
       0,     0,     0,    25,     0,     0,     0,    26,    27,     0,
      28,  -750,     0,     0,     0,     0,    30,    31,    32,     0,
       0,     0,     0,     0,   192,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,    36,    37,     0,
       0,    38,     0,    39,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,    44,
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,    48,    49,     0,     0,    51,     0,    52,  -750,
    -750,   704,   705,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
       0,  -139,  -139,     5,     6,     7,     8,     0,     9,    10,
      67,   701,    68,    69,    15,    16,    70,    71,  -750,    72,
      17,    18,    19,     0,    20,    21,    22,   702,   703,     0,
       0,     0,    25,     0,     0,     0,    26,    27,     0,    28,
       0,     0,     0,     0,     0,    30,    31,    32,     0,     0,
       0,     0,     0,   192,     0,    34,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,    36,    37,  -750,  -750,
      38,     0,    39,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,    44,    45,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      47,    48,    49,     0,     0,    51,     0,    52,     0,     0,
     704,   705,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    56,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     4,     0,
    -139,  -139,     5,     6,     7,     8,     0,     9,    10,    67,
     701,    68,    69,    15,    16,    70,    71,  -750,    72,    17,
      18,    19,     0,    20,    21,    22,   702,   703,     0,     0,
       0,    25,     0,     0,     0,    26,    27,     0,    28,     0,
       0,     0,     0,     0,    30,    31,    32,     0,     0,     0,
       0,     0,   192,     0,    34,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    35,    36,    37,     0,     0,    38,
       0,    39,    40,    41,    42,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    43,     0,    44,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    47,
      48,    49,     0,     0,    51,  -750,    52,     0,     0,   704,
     705,     0,     0,     0,     0,     0,     0,  -750,     0,     0,
      56,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     4,     0,  -139,
    -139,     5,     6,     7,     8,     0,     9,    10,    67,   701,
      68,    69,    15,    16,    70,    71,  -750,    72,    17,    18,
      19,     0,    20,    21,    22,   702,   703,     0,     0,     0,
      25,     0,     0,     0,    26,    27,     0,    28,     0,  -750,
    -750,     0,     0,    30,    31,    32,     0,     0,     0,     0,
       0,   192,     0,    34,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    35,    36,    37,     0,     0,    38,     0,
      39,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,     0,    44,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    47,    48,
      49,     0,     0,    51,     0,    52,     0,     0,   704,   705,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    56,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    67,     0,    68,
      69,     0,     0,    70,    71,     4,    72,  -139,  -139,     5,
       6,     7,     8,     0,     9,    10,     0,   701,     0,     0,
      15,    16,     0,     0,  -750,  -750,    17,    18,    19,     0,
      20,    21,    22,   702,   703,     0,     0,     0,    25,     0,
       0,     0,    26,    27,     0,    28,     0,     0,     0,     0,
       0,    30,    31,    32,     0,     0,     0,     0,     0,   192,
       0,    34,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    35,    36,    37,     0,     0,    38,     0,    39,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    43,     0,    44,    45,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    47,    48,    49,     0,
       0,    51,     0,    52,     0,     0,   704,   705,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    56,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     4,     0,  -139,  -139,     5,     6,
       7,     8,     0,     9,    10,    67,   701,    68,    69,    15,
      16,    70,    71,  -750,    72,    17,    18,    19,     0,    20,
      21,    22,   702,   703,     0,     0,     0,    25,     0,     0,
       0,    26,    27,     0,    28,     0,     0,     0,     0,     0,
      30,    31,    32,     0,     0,     0,     0,     0,   192,     0,
      34,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      35,    36,    37,     0,     0,    38,     0,    39,    40,    41,
      42,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    43,     0,    44,    45,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    47,    48,    49,     0,     0,
      51,     0,    52,     0,  -750,   704,   705,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    56,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     4,     0,  -139,  -139,     5,     6,     7,
       8,     0,     9,    10,    67,   701,    68,    69,    15,    16,
      70,    71,  -750,    72,    17,    18,    19,     0,    20,    21,
      22,   702,   703,     0,     0,     0,    25,     0,     0,     0,
      26,    27,     0,    28,     0,     0,     0,  -750,     0,    30,
      31,    32,     0,     0,     0,     0,     0,   192,     0,    34,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
      36,    37,     0,     0,    38,     0,    39,    40,    41,    42,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,    44,    45,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    47,    48,    49,     0,     0,    51,
       0,    52,     0,     0,   704,   705,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    56,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     4,     0,  -139,  -139,     5,     6,     7,     8,
       0,     9,    10,    67,   701,    68,    69,    15,    16,    70,
      71,  -750,    72,    17,    18,    19,     0,    20,    21,    22,
     702,   703,     0,     0,     0,    25,     0,     0,     0,    26,
      27,     0,    28,     0,     0,     0,     0,     0,    30,    31,
      32,     0,     0,     0,     0,     0,   192,     0,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    35,    36,
      37,     0,     0,    38,     0,    39,    40,    41,    42,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
       0,    44,    45,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    47,    48,    49,     0,     0,    51,     0,
      52,     0,     0,   704,   705,     0,     0,     0,     0,     0,
       0,  -750,     0,     0,    56,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     4,     0,  -139,  -139,     5,     6,     7,     8,     0,
       9,    10,    67,   701,    68,    69,    15,    16,    70,    71,
    -750,    72,    17,    18,    19,     0,    20,    21,    22,   702,
     703,     0,     0,     0,    25,     0,     0,     0,    26,    27,
       0,    28,     0,     0,     0,     0,     0,    30,    31,    32,
    -750,     0,     0,     0,     0,   192,     0,    34,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    35,    36,    37,
       0,     0,    38,     0,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
      44,    45,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    47,    48,    49,     0,     0,    51,     0,    52,
       0,     0,   704,   705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    56,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       4,     0,  -139,  -139,     5,     6,     7,     8,     0,     9,
      10,    67,   701,    68,    69,    15,    16,    70,    71,  -750,
      72,    17,    18,    19,     0,    20,    21,    22,   702,   703,
       0,     0,     0,    25,     0,     0,     0,    26,    27,     0,
      28,     0,     0,     0,     0,     0,    30,    31,    32,     0,
       0,     0,     0,     0,   192,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,    36,    37,     0,
       0,    38,     0,    39,    40,    41,    42,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    43,     0,    44,
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    47,    48,    49,     0,     0,    51,     0,    52,   670,
       0,   704,   705,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,   748,   749,     0,     0,   750,
     751,   752,     0,     0,     0,     0,     0,     0,   339,   340,
     671,     0,     0,     0,     0,     0,     0,   753,   754,     0,
      67,     0,    68,    69,     0,     0,    70,    71,   755,    72,
     672,   673,   674,   675,     0,   676,   677,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  -364,  -364,
    -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,     0,     0,
       0,     0,  -364,  -364,  -364,  -364,  -364,  -364,  -364,  -364,
    -364,   472,     0,     0,     0,     0,     0,     0,     0,   756,
     757,   758,   759,   760,     0,  1316,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     339,   340,   761,   762,   763,   764,   765,   766,   767,   768,
     769,   770,   771,     0,     0,     0,     0,     0,     0,     0,
       0,   639,   473,   474,   475,   476,     0,   477,   478,     0,
     679,     0,     0,   365,     0,     0,     0,     0,     0,     0,
    -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,  -362,
     339,   340,     0,     0,  -362,  -362,  -362,  -362,  -362,  -362,
    -362,  -362,  -362,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   640,   641,   642,   643,     0,   644,   645,     0,
     748,   749,     0,     0,   750,   751,   752,     0,     0,     0,
    -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,  -348,
       0,  1488,   753,   754,  -348,  -348,  -348,  -348,  -348,  -348,
    -348,  -348,  -348,   755,     0,     0,     0,     0,     0,   349,
       0,   366,   480,   380,     0,   365,   394,     0,   407,     0,
     420,     0,   433,     0,   446,   457,     0,   470,     0,   481,
       0,   497,     0,     0,   513,     0,     0,     0,   559,   571,
     583,     0,     0,   597,     0,   611,   623,     0,   637,   649,
       0,     0,     0,     0,   756,   757,   758,   759,   760,     0,
       0,     0,   647,     0,   668,   365,   748,   749,     0,     0,
     750,   751,   752,     0,     0,     0,     0,   761,   762,   763,
     764,   765,   766,   767,   768,   769,   770,   771,   753,   754,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   755,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   349,   366,   380,   394,   407,
     420,   433,   446,   457,   470,   481,   497,   513,   559,   571,
     583,   597,   611,   623,   637,   649,     0,     0,     0,     0,
     756,   757,   758,   759,   760,     0,   668,     0,     0,     0,
       0,     0,   748,     0,     0,     0,   750,   751,   752,     0,
       0,     0,     0,   761,   762,   763,   764,   765,   766,   767,
     768,   769,   770,   771,   753,   754,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   755,     0,     0,     0,     0,
     750,   751,   752,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   753,   754,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   755,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   756,   757,   758,   759,
     760,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   761,
     762,   763,   764,   765,   766,   767,   768,   769,   770,   771,
     756,   757,   758,   759,   760,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   761,   762,   763,   764,   765,   766,   767,
     768,   769,   770,   771
};

static const yytype_int16 yycheck[] =
{
       2,   243,    70,   238,   811,     2,   711,   790,    73,   337,
       9,    73,     5,    21,    22,   698,   699,   719,   720,    73,
      73,  1211,     5,     5,     5,    20,    73,     2,    73,  1357,
      32,    73,     2,    73,    73,    32,    73,     2,   273,    73,
    1118,    38,     8,  1190,    10,    11,   806,    20,     5,    40,
    1197,    10,    11,    40,    40,     5,     5,    58,    59,   863,
      37,    40,  1252,    22,     0,   147,    58,    59,    40,    40,
       0,    73,   105,    40,    20,    72,    73,    50,   160,     5,
     160,     5,   842,   163,    81,    40,    83,  1165,    85,    86,
     115,    88,    40,    90,   155,    92,    40,    94,    73,    45,
      97,   162,    99,    73,   101,   155,    40,   104,    73,   106,
     107,   108,   162,  1441,   160,   112,   111,   163,   115,   144,
     145,   118,    40,   156,   121,   102,    76,    77,   105,   731,
      40,   133,    89,   110,   157,    40,   133,   114,     2,   138,
      89,    73,   119,   120,   141,   122,   123,   124,   125,    20,
      76,    77,    40,    75,   156,   132,    40,  1485,   159,   156,
     153,   154,     5,   140,    10,  1493,   494,   159,    32,   160,
     152,   152,   163,   160,    38,   158,   163,   163,   157,   155,
     782,   160,   510,   159,   163,   787,   145,   164,   160,   160,
     167,    40,   163,   159,    22,   152,   163,  1525,   157,   160,
     802,   151,   163,   152,    75,   160,    40,   157,    72,    73,
      40,    42,   160,  1541,    13,   163,   161,    81,    56,    83,
      40,    85,    86,   156,    88,   151,    90,  1374,    92,    40,
      94,   153,   154,    97,     2,    99,   155,   101,    40,  1429,
     104,   238,   106,   107,   108,   157,    40,   157,   112,   161,
     160,   115,   157,   163,   118,   160,   161,   121,   163,   155,
     237,   132,   133,   159,    32,     3,     4,   244,     9,   133,
      40,   116,   160,    58,    59,   163,   273,   141,    58,    59,
     155,   609,   153,   154,     5,   157,     7,     8,   160,    10,
      11,   163,   156,   621,   161,    16,    55,    38,    39,    67,
      40,    22,    23,    24,   160,    73,   308,   163,   157,   160,
     160,   160,   163,    81,   163,   153,   154,   155,    73,    60,
      61,    62,    63,     5,    65,    66,   160,   157,   157,   163,
    1221,   161,   161,   101,    55,   157,   104,    20,   106,   107,
     160,   348,   157,   163,  1235,  1236,   161,     2,    22,   160,
     155,   348,   163,    74,   159,    76,    77,   364,   160,    42,
     155,   163,   144,    64,   159,   133,   160,   364,     8,   163,
      10,    11,   379,   141,   159,   160,   157,    32,    20,   159,
     160,   102,   379,  1190,   153,   154,   393,    40,   156,   156,
     160,  1174,   155,   163,    76,    77,   393,   138,    64,   406,
    1102,    43,    44,     2,   153,   154,   155,    75,    40,   406,
    1093,    40,   419,   153,   154,   155,    40,   157,    73,   160,
      40,   161,   419,   153,   154,   432,  1230,   110,   111,    40,
     151,    53,    54,    32,    40,   432,   157,   158,   445,   160,
      40,  1201,    64,   144,   145,   146,   147,   148,   445,   456,
     155,   156,   107,    40,  1246,    64,  1248,   155,   156,   456,
     155,   156,   469,    40,   132,   133,    40,  1271,   155,   156,
      20,  1231,   469,   480,    73,   243,   161,  1182,   133,   155,
     146,   147,   148,   480,   348,   153,   154,    22,   495,  1249,
     155,  1251,    42,    43,    44,    56,   118,   119,   495,     9,
     364,   156,   163,  1263,   511,   153,   154,   155,   107,   118,
     119,     9,  1316,    64,   511,   379,     9,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   153,   154,   393,
     115,   116,    20,    21,   133,   144,   145,   146,   147,   148,
      22,    20,   406,  1335,  1336,  1337,  1338,   114,   790,   115,
     116,   558,   155,  1357,     9,   419,   157,   156,   163,   144,
     145,   558,   569,    42,    43,    44,   808,   155,   432,  1329,
     116,  1331,   569,     3,     4,   582,     3,     4,   144,   145,
      51,   445,   153,   154,   155,   582,   155,   156,   595,   108,
     156,   156,   456,    18,    19,    20,    21,   155,   595,    18,
      19,    20,    21,   610,   156,   469,   153,   154,   155,   153,
     154,   155,  1214,   610,   155,   622,   480,   685,    20,   687,
     147,   689,     2,   691,   155,   622,   131,  1431,   635,   155,
     156,   495,   153,   154,   155,   155,   156,  1441,   635,     5,
     647,     7,     8,    89,    10,    11,   159,   511,   159,  1409,
     647,   155,    32,  1413,   155,   156,    22,    23,    24,  1261,
     667,   156,  1422,   152,   153,   154,   157,  1471,  1270,    20,
     667,    20,   679,   120,  1276,   155,   156,  1437,  1438,   160,
    1282,  1485,   679,   159,  1286,   184,   185,   186,  1016,  1493,
     155,   156,   159,    73,   558,  1455,    10,    11,    70,    71,
     115,   116,   155,     9,   155,   569,   155,   156,    74,   711,
      76,    77,   155,  1473,   711,  1475,   693,  1477,   582,     2,
     159,  1525,   144,   145,   155,   156,   159,   107,   156,   144,
     145,   595,    38,    39,    40,   155,   156,  1541,   153,   154,
    1404,   155,   156,   159,  1548,   155,   610,   155,   156,    32,
     155,   156,   159,   133,    60,    61,    62,    63,   622,    65,
      66,   155,   156,  1319,  1568,  1367,  1368,   775,  1370,  1206,
     778,   635,  1532,   156,  1376,   107,   156,   155,   156,   107,
     107,   789,   107,   647,   107,   151,   107,   107,   107,   107,
      73,   157,   158,   861,   107,   107,   107,   107,  1400,  1431,
     270,    15,   133,   667,   806,   107,     2,    15,    15,   806,
      15,   273,  1166,   782,   272,   679,   741,   742,   743,   744,
     745,   746,   747,  1198,   107,  1371,  1428,   719,  1112,   699,
       9,  1549,   138,    65,   808,  1307,    32,  1439,    -1,    -1,
     842,    -1,    -1,  1445,    -1,   842,    -1,   711,   773,    -1,
     133,   157,    -1,    -1,   160,    -1,    -1,   163,    -1,    38,
      39,    40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   846,
      -1,    -1,    -1,   156,    -1,    -1,    -1,    73,    -1,    -1,
      -1,    60,    61,    62,    63,  1120,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,     9,  1497,    -1,    -1,  1500,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
       9,   107,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    38,    39,  1527,    -1,    -1,    -1,    -1,
      -1,  1166,  1174,    -1,    -1,    -1,    -1,   133,    -1,    38,
      39,    40,   806,   711,    -1,    60,    61,    62,    63,     2,
      65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     156,    60,    61,    62,    63,    -1,    65,    66,    -1,    -1,
      -1,    78,    -1,    -1,   153,   154,   155,    -1,   842,    32,
      -1,   160,    -1,    -1,   163,    92,    93,    94,    95,    96,
      97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,    -1,    10,    11,    -1,    -1,    -1,
      -1,    16,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      73,    -1,   790,   138,    -1,    -1,    -1,    -1,    33,    -1,
      -1,    -1,    -1,    38,    39,    -1,    -1,     9,   806,   138,
     808,    -1,   157,    -1,    -1,   160,    -1,    -1,   163,    -1,
      55,     2,    -1,    -1,   107,    -1,   711,    -1,   157,    64,
      -1,   160,    -1,    -1,   163,    -1,    38,    39,    40,    74,
      -1,    76,    77,    -1,   842,     9,    -1,    -1,    -1,    -1,
     133,    32,    -1,    -1,    -1,    -1,    -1,    -1,    60,    61,
      62,    63,    -1,    65,    66,    -1,    -1,   102,    -1,    -1,
      -1,    -1,    -1,   156,    38,    39,    40,    -1,     9,   114,
      -1,    -1,   711,    -1,    -1,    -1,   121,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    60,    61,    62,    63,
      -1,    65,    66,    -1,   139,    -1,    -1,    38,    39,   144,
     145,    -1,    -1,    -1,  1209,    -1,   151,   152,     2,    -1,
      -1,   806,   157,   158,    -1,   160,   107,    -1,    -1,    60,
      61,    62,    63,    -1,    65,    66,   138,    -1,    -1,  1166,
      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,
    1182,    -1,   133,    -1,    -1,  1182,    -1,   842,   160,    -1,
      -1,   163,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1201,
      38,    39,    40,    -1,  1201,   156,    -1,   806,    -1,  1211,
    1212,  1213,    -1,    -1,  1211,    -1,    -1,    -1,    -1,    73,
      -1,    -1,    60,    61,    62,    63,   160,    65,    66,  1231,
      -1,    -1,    -1,    -1,  1231,    -1,  1211,   138,    -1,    -1,
    1205,  1211,  1307,   842,  1209,  1310,  1211,  1249,  1310,  1251,
    1252,    -1,  1249,   107,  1251,  1252,  1310,  1310,    -1,   160,
      -1,  1263,   163,  1310,    -1,  1310,  1263,    -1,  1310,    -1,
    1310,  1310,    -1,  1310,    -1,    -1,  1310,  1252,  1343,   133,
      -1,  1343,  1252,    -1,    -1,    -1,    -1,  1252,    -1,  1343,
    1343,    -1,    -1,    -1,    -1,    -1,  1343,    -1,  1343,    -1,
     138,  1343,   156,  1343,  1343,    -1,  1343,    -1,  1310,  1343,
      -1,    -1,    -1,  1310,    -1,    -1,    -1,    -1,  1182,   157,
      -1,    -1,   160,     9,    -1,   163,  1303,  1329,    -1,  1331,
      -1,   711,  1329,    -1,  1331,  1310,  1301,  1201,    -1,    -1,
    1310,  1343,  1307,    -1,    -1,  1310,  1343,  1211,    -1,    -1,
      -1,    -1,    38,    39,    40,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     2,    -1,    -1,    -1,  1231,  1343,    -1,
      -1,    -1,    -1,  1343,    60,    61,    62,    63,  1343,    65,
      66,    -1,    -1,    -1,    -1,  1249,    -1,  1251,  1252,    -1,
      -1,  1393,    -1,    32,    -1,  1397,    -1,    -1,    -1,  1263,
      -1,    -1,    -1,    -1,    -1,    -1,  1174,  1409,    -1,    -1,
      -1,  1413,  1409,    -1,  1182,    -1,  1413,    -1,    -1,  1484,
    1422,    -1,  1484,    -1,    -1,  1422,   806,  1429,   711,    -1,
    1484,  1484,  1429,  1201,    73,  1437,  1438,  1484,    -1,  1484,
    1437,  1438,  1484,  1211,  1484,  1484,  1310,  1484,    -1,    -1,
    1484,    -1,   138,  1455,  1429,    -1,    -1,  1459,  1455,  1429,
      -1,    -1,   842,  1231,  1429,  1329,    -1,  1331,   107,    -1,
      -1,  1473,    -1,  1475,   160,  1477,  1473,   163,  1475,  1343,
    1477,  1249,  1484,  1251,  1252,    -1,    -1,  1484,    -1,    -1,
      -1,    -1,    -1,    -1,   133,  1263,    -1,    -1,    -1,  1501,
      -1,    -1,    -1,    -1,  1501,  1573,    -1,    -1,    -1,  1484,
    1578,    -1,    -1,    -1,  1484,   711,    -1,   156,    -1,  1484,
      -1,    -1,    -1,   806,    -1,    -1,    -1,  1182,    -1,    -1,
    1532,  1533,    -1,    -1,    -1,  1532,    -1,    -1,    -1,    -1,
      -1,    -1,  1310,    -1,    -1,  1409,  1201,  1549,    -1,  1413,
      -1,    -1,  1549,    -1,    -1,  1557,  1211,    -1,  1422,   842,
       2,  1329,    -1,  1331,    -1,  1429,    -1,    -1,    -1,    -1,
       9,    -1,    -1,  1437,  1438,  1343,  1231,    -1,    -1,    -1,
      -1,    -1,    -1,  1182,    -1,    -1,    -1,    -1,    -1,    -1,
      32,  1455,    -1,    -1,  1249,    -1,  1251,  1252,    -1,    38,
      39,    40,  1201,    -1,    -1,    -1,    -1,    -1,  1263,  1473,
     806,  1475,  1211,  1477,    -1,    -1,    -1,    -1,    -1,    -1,
    1484,    60,    61,    62,    63,    -1,    65,    66,    -1,    -1,
      -1,    73,  1231,    -1,    -1,    -1,    -1,  1501,    -1,    -1,
      -1,  1409,    -1,    -1,    -1,  1413,   842,    -1,    -1,    -1,
    1249,    -1,  1251,  1252,  1422,  1310,    -1,    -1,   711,    -1,
      -1,  1429,    -1,    -1,  1263,    -1,    -1,    -1,  1532,  1437,
    1438,    -1,    -1,    -1,  1329,    -1,  1331,    -1,    -1,    -1,
      -1,    -1,    -1,     9,    -1,  1549,    -1,  1455,  1343,    -1,
      -1,   133,    -1,    -1,    -1,     2,    -1,    -1,    -1,   138,
      -1,    -1,    -1,    -1,    -1,  1473,    -1,  1475,    -1,  1477,
      -1,  1310,    38,    39,   156,    -1,  1484,    -1,    -1,     9,
      -1,   160,    -1,    -1,   163,    32,    -1,    -1,    -1,    -1,
    1329,    -1,  1331,  1501,    60,    61,    62,    63,    -1,    65,
      66,    -1,    -1,    -1,  1343,    -1,    -1,    -1,    38,    39,
      40,    -1,    -1,   806,  1409,    -1,    -1,    -1,  1413,    -1,
     711,    -1,    -1,    -1,  1532,    -1,    73,  1422,    -1,    -1,
      60,    61,    62,    63,  1429,    65,    66,    -1,    -1,    -1,
      -1,  1549,  1437,  1438,    -1,    -1,    -1,    -1,    -1,   842,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1455,    -1,  1182,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1409,     2,   138,    -1,  1413,    -1,    -1,    -1,  1473,    -1,
    1475,  1201,  1477,  1422,    -1,    -1,   133,    -1,    -1,  1484,
    1429,  1211,    -1,    -1,   160,    -1,     9,   163,  1437,  1438,
      -1,    32,    -1,    -1,    -1,    -1,  1501,    -1,   138,   156,
      -1,  1231,    -1,    -1,    -1,   806,  1455,   711,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    38,    39,    40,    -1,  1249,
     160,  1251,  1252,   163,  1473,    -1,  1475,  1532,  1477,    -1,
      -1,    -1,    73,  1263,    -1,  1484,    -1,    60,    61,    62,
      63,   842,    65,    66,  1549,    -1,    -1,    -1,    -1,  1182,
      -1,    -1,  1501,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    -1,    -1,  1201,    92,
      93,    94,    95,    96,    97,    98,    99,   100,  1211,    -1,
    1310,    -1,    -1,  1532,    -1,    -1,    -1,    -1,    -1,    -1,
       2,    -1,   133,    -1,    -1,     9,     2,    -1,  1231,  1329,
    1549,  1331,   806,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1343,    -1,   156,  1249,    -1,  1251,  1252,
      32,    -1,    -1,    -1,    38,    39,    32,    -1,    -1,    -1,
    1263,    -1,    -1,    -1,   157,    -1,  1182,   160,   842,    -1,
     163,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,
      -1,    65,    66,    -1,    -1,  1201,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,  1211,    -1,    73,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1310,    -1,  1409,
      -1,    -1,     9,  1413,    -1,  1231,    -1,    -1,    -1,    -1,
      -1,    -1,  1422,    -1,    -1,    -1,  1329,    -1,  1331,  1429,
      -1,    -1,    -1,  1249,    -1,  1251,  1252,  1437,  1438,    -1,
    1343,    38,    39,    40,    -1,    -1,    -1,  1263,    -1,    -1,
      -1,   133,   711,    -1,   138,  1455,    -1,   133,    -1,    -1,
      -1,    -1,    -1,    60,    61,    62,    63,    -1,    65,    66,
      -1,    -1,    -1,  1473,   156,  1475,   160,  1477,    -1,   163,
     156,    -1,    -1,    -1,  1484,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1310,    -1,    -1,    -1,    -1,    -1,
      -1,  1501,    -1,    -1,    -1,    -1,  1409,    -1,    -1,  1182,
    1413,    -1,    -1,  1329,    -1,  1331,    -1,    -1,    -1,  1422,
      -1,    -1,    -1,    -1,    -1,    -1,  1429,  1343,  1201,    -1,
      -1,    -1,  1532,    -1,  1437,  1438,    -1,    -1,  1211,    -1,
      -1,   138,    -1,    -1,    -1,    -1,    -1,   806,    -1,  1549,
      -1,    -1,  1455,    -1,    -1,    -1,    -1,    -1,  1231,    -1,
      -1,    -1,    -1,   160,    -1,    -1,   163,    -1,    -1,    -1,
    1473,    -1,  1475,    -1,  1477,    -1,  1249,    -1,  1251,  1252,
      -1,  1484,    -1,   842,    -1,    -1,    -1,    -1,    -1,    -1,
    1263,    -1,    -1,  1409,    -1,    -1,    -1,  1413,  1501,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1422,    -1,    -1,    -1,
      -1,  1182,    -1,  1429,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1437,  1438,    -1,    -1,    -1,    -1,    -1,    -1,  1532,
    1201,    -1,     2,    -1,    -1,    -1,    -1,  1310,    -1,  1455,
    1211,    -1,     9,    -1,    -1,    -1,  1549,    -1,    -1,   711,
      -1,    -1,    -1,    -1,    -1,    -1,  1329,  1473,  1331,  1475,
    1231,  1477,    32,    -1,    -1,    -1,    -1,    -1,  1484,    -1,
    1343,    38,    39,    40,    -1,     2,    -1,    -1,  1249,    -1,
    1251,  1252,    -1,    -1,    -1,  1501,    -1,    -1,    -1,    -1,
      -1,    -1,  1263,    60,    61,    62,    63,    -1,    65,    66,
      -1,    -1,    -1,    73,    -1,    32,    -1,    -1,  1182,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1532,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1201,    -1,    -1,
      -1,    -1,    -1,  1549,    -1,    -1,  1409,  1211,    -1,  1310,
    1413,    -1,    -1,    -1,   806,    -1,    73,    -1,    -1,  1422,
      -1,    -1,    -1,    -1,    -1,    -1,  1429,  1231,  1329,    -1,
    1331,     9,    -1,   133,  1437,  1438,    -1,    -1,     9,    -1,
      -1,   138,  1343,    -1,    -1,  1249,    -1,  1251,  1252,    -1,
     842,    -1,  1455,    -1,   711,    -1,   156,    -1,    -1,  1263,
      38,    39,    40,   160,    -1,    -1,   163,    38,    39,    40,
    1473,    -1,  1475,    -1,  1477,    -1,   133,    -1,    -1,    -1,
      -1,  1484,    60,    61,    62,    63,    -1,    65,    66,    60,
      61,    62,    63,    -1,    65,    66,    -1,    -1,  1501,   156,
      -1,    -1,    -1,    -1,     9,    -1,  1310,    -1,  1409,    -1,
      -1,    -1,  1413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1422,    -1,    -1,    -1,  1329,    -1,  1331,  1429,  1532,
      -1,    -1,    -1,    38,    39,    40,  1437,  1438,    -1,  1343,
      -1,    -1,    -1,    -1,    -1,    -1,  1549,    -1,    -1,   806,
       2,    -1,    -1,    -1,  1455,    60,    61,    62,    63,    -1,
      65,    66,    -1,    -1,    -1,    -1,    -1,   138,    -1,    -1,
     711,    -1,  1473,    -1,  1475,    -1,  1477,    -1,    -1,    -1,
      32,    -1,   160,  1484,    -1,   842,    -1,     9,    -1,   160,
      -1,    -1,   163,  1182,    -1,    -1,    -1,    -1,    -1,    -1,
    1501,    -1,    -1,    -1,    -1,  1409,    -1,    -1,    -1,  1413,
      -1,    -1,  1201,    -1,    -1,    -1,    38,    39,  1422,    -1,
      -1,    73,  1211,    -1,    -1,  1429,    -1,    -1,    -1,    -1,
      -1,  1532,    -1,  1437,  1438,    -1,    -1,     2,    60,    61,
      62,    63,  1231,    65,    66,    -1,    -1,    -1,  1549,    -1,
      -1,  1455,   157,    -1,    -1,   160,    -1,    -1,   163,     9,
    1249,    -1,  1251,  1252,    -1,   806,    -1,    32,    -1,  1473,
      -1,  1475,    -1,  1477,  1263,    -1,    -1,    -1,    -1,    -1,
    1484,   133,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    -1,    -1,    -1,    -1,    -1,     9,  1501,    -1,   711,
      -1,   842,    -1,    -1,   156,   711,    -1,    -1,    73,    -1,
      60,    61,    62,    63,    -1,    65,    66,    -1,    -1,    -1,
      -1,  1310,    -1,    -1,    -1,    38,    39,    40,  1532,     9,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   160,    -1,
    1329,   163,  1331,    -1,    -1,  1549,    -1,    60,    61,    62,
      63,    -1,    65,    66,  1343,    -1,    -1,    -1,    38,    39,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,
      -1,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      60,    61,    62,    63,    -1,    65,    66,    -1,   138,    -1,
    1182,   156,    -1,     2,   806,    -1,    -1,    -1,    -1,    -1,
     806,    -1,    -1,    -1,    38,    39,    40,    -1,    -1,  1201,
     160,    -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,  1211,
    1409,    -1,    -1,    32,  1413,   138,    60,    61,    62,    63,
     842,    65,    66,  1422,    -1,    -1,   842,    -1,    -1,  1231,
    1429,    -1,    -1,    -1,    -1,     9,    -1,   160,  1437,  1438,
     163,    -1,    -1,    -1,    -1,    -1,    -1,  1249,   138,  1251,
    1252,    -1,    -1,     9,    73,    -1,  1455,    -1,    -1,    -1,
      -1,  1263,    -1,    -1,    38,    39,    40,    -1,     2,    -1,
     160,    -1,    -1,   163,  1473,    -1,  1475,    -1,  1477,    -1,
      -1,    -1,    38,    39,    -1,  1484,    60,    61,    62,    63,
      -1,    65,    66,    -1,   138,     9,    -1,    -1,    -1,    -1,
      -1,    -1,  1501,    -1,    60,    61,    62,    63,  1310,    65,
      66,    -1,    -1,    -1,   133,  1182,   160,    -1,    -1,   163,
      -1,    -1,    -1,    -1,    38,    39,    -1,  1329,    -1,  1331,
      -1,    -1,    -1,  1532,  1201,    -1,    -1,   156,    -1,    73,
      -1,  1343,    -1,    -1,  1211,    -1,    60,    61,    62,    63,
    1549,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     9,    -1,  1231,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1249,   157,  1251,  1252,   160,    -1,    -1,   163,
      -1,    38,    39,    -1,    -1,    -1,  1263,    -1,    -1,    -1,
      -1,   711,    -1,    -1,   160,    -1,    -1,  1409,    -1,    -1,
      -1,  1413,    -1,    60,    61,    62,    63,    -1,    65,    66,
    1422,    -1,   156,    -1,   138,    -1,    -1,  1429,    -1,    -1,
      -1,  1182,    -1,    -1,    -1,  1437,  1438,    -1,    -1,    -1,
      -1,    -1,    -1,  1310,   711,    -1,   160,    -1,    -1,   163,
    1201,     2,    -1,  1455,    -1,    -1,    -1,    -1,    -1,    -1,
    1211,    -1,  1329,    -1,  1331,    -1,    -1,    -1,    -1,    -1,
      -1,  1473,    -1,  1475,    -1,  1477,  1343,    -1,    -1,    -1,
    1231,    -1,  1484,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   138,    -1,    -1,    -1,    -1,   806,    -1,  1249,  1501,
    1251,  1252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1263,   160,    -1,    -1,   163,    -1,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1532,    -1,   842,    -1,    -1,    -1,    -1,    -1,    -1,   806,
      -1,    -1,  1409,    -1,    -1,    -1,  1413,  1549,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1422,    -1,    -1,    -1,  1310,
    1182,    -1,  1429,    -1,    -1,    -1,  1182,    -1,    -1,    -1,
    1437,  1438,    -1,    -1,    -1,   842,    -1,    -1,  1329,  1201,
    1331,    -1,    -1,    -1,     2,  1201,    -1,    -1,  1455,  1211,
      -1,    -1,  1343,    -1,    -1,  1211,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   156,  1473,    -1,  1475,  1231,
    1477,    -1,    -1,    -1,    -1,  1231,    -1,  1484,    -1,    -1,
       5,    -1,     7,     8,    -1,    10,    11,  1249,    -1,  1251,
    1252,    16,    -1,  1249,  1501,  1251,  1252,    22,    23,    24,
      -1,  1263,    -1,    -1,    -1,     9,    -1,  1263,    33,   711,
      -1,    -1,    -1,    38,    39,    73,    -1,    -1,  1409,    -1,
      -1,    -1,  1413,    -1,    -1,  1532,    -1,    -1,    -1,    -1,
      55,  1422,    -1,    -1,    38,    39,    40,    -1,  1429,    64,
       2,    -1,  1549,    -1,    -1,    -1,  1437,  1438,  1310,    74,
      -1,    76,    77,    -1,  1310,    -1,    60,    61,    62,    63,
      -1,    65,    66,    -1,  1455,    -1,    -1,  1329,    -1,  1331,
      -1,    -1,    -1,  1329,    -1,  1331,    -1,   102,    -1,    -1,
      -1,  1343,  1473,    -1,  1475,    -1,  1477,  1343,    -1,   114,
      -1,    -1,     9,  1484,    -1,    -1,   711,    -1,   156,    -1,
      -1,    -1,    -1,    -1,   806,    -1,    -1,    -1,    -1,    -1,
    1501,    73,    -1,    -1,   139,    -1,    -1,    -1,    -1,   144,
     145,    38,    39,    40,    -1,    -1,   151,   152,    -1,    -1,
      -1,    -1,   157,   158,    -1,   160,    -1,    -1,    -1,    -1,
     842,  1532,    -1,    60,    61,    62,    63,  1409,    65,    66,
      -1,  1413,    -1,  1409,    -1,    -1,   160,  1413,  1549,   163,
    1422,    -1,    -1,    -1,    -1,    -1,  1422,  1429,    -1,    -1,
      -1,    -1,    -1,  1429,    -1,  1437,  1438,    -1,    -1,    -1,
      -1,  1437,  1438,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   806,    -1,  1455,   156,    -1,    -1,    -1,    -1,  1455,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1473,    -1,  1475,    -1,  1477,    -1,  1473,    -1,  1475,
      -1,  1477,  1484,    -1,    -1,    -1,     9,   842,  1484,    -1,
      -1,    -1,  1182,    -1,    -1,    -1,    -1,    -1,    -1,  1501,
      -1,    -1,    -1,   160,    -1,  1501,   163,    -1,    -1,    -1,
      -1,  1201,   711,    -1,    -1,    38,    39,    40,    -1,    -1,
      -1,  1211,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,
    1532,    -1,    -1,    -1,    -1,  1182,  1532,    60,    61,    62,
      63,  1231,    65,    66,    -1,    -1,    -1,  1549,    -1,    -1,
      -1,    -1,    -1,  1549,  1201,    38,    39,    40,     9,  1249,
      -1,  1251,  1252,    -1,  1211,    -1,    -1,    -1,    -1,    -1,
       9,    -1,    -1,  1263,    -1,    -1,    -1,    60,    61,    62,
      63,    -1,    65,    66,  1231,    -1,    -1,    38,    39,    40,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   711,    -1,    38,
      39,    40,  1249,     9,  1251,  1252,    -1,   806,    -1,    60,
      61,    62,    63,    -1,    65,    66,  1263,     9,    -1,    -1,
    1310,    60,    61,    62,    63,    -1,    65,    66,    -1,    -1,
      -1,    -1,    38,    39,    40,    -1,    -1,   160,    -1,  1329,
     163,  1331,    -1,   842,    -1,    -1,    38,    39,    -1,     9,
      -1,    -1,    -1,  1343,    60,    61,    62,    63,    -1,    65,
      66,    -1,    -1,  1310,    -1,    -1,    -1,    -1,    60,    61,
      62,    63,    -1,    65,    66,    -1,    -1,   160,    38,    39,
     163,    -1,  1329,    -1,  1331,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   806,    -1,    -1,    -1,  1343,    -1,    -1,    -1,
      60,    61,    62,    63,    -1,    65,    66,    -1,    -1,   160,
      -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,    -1,  1409,
      -1,   160,    -1,  1413,   163,    -1,    -1,    -1,   842,    -1,
      -1,    -1,  1422,    -1,    -1,    -1,    -1,    -1,    -1,  1429,
    1182,    -1,    -1,    -1,    -1,    -1,    -1,  1437,  1438,    -1,
      -1,    -1,    -1,    -1,   160,    -1,    -1,   163,    -1,  1201,
      -1,    -1,  1409,    -1,    -1,  1455,  1413,    -1,   160,  1211,
      -1,   163,    -1,    -1,    -1,  1422,    -1,    -1,    -1,    -1,
     711,    -1,  1429,  1473,    -1,  1475,    -1,  1477,    -1,  1231,
    1437,  1438,    -1,    -1,  1484,    -1,    -1,    -1,    -1,    -1,
     160,    -1,    -1,   163,    -1,    -1,    -1,  1249,  1455,  1251,
    1252,  1501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1263,    -1,    -1,    -1,    -1,  1473,  1182,  1475,    -1,
    1477,    -1,    -1,    -1,    -1,    -1,    -1,  1484,    -1,    -1,
      -1,    -1,  1532,    -1,    -1,    -1,  1201,    -1,    -1,    -1,
      -1,    -1,    -1,     9,  1501,    -1,  1211,    -1,    -1,  1549,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1310,    -1,
      -1,    -1,    -1,    -1,    -1,   806,  1231,    -1,    -1,    -1,
      -1,    -1,    38,    39,    40,  1532,    -1,  1329,    -1,  1331,
      -1,    -1,    -1,    -1,  1249,    -1,  1251,  1252,    -1,    -1,
      -1,  1343,  1549,    -1,    60,    61,    62,    63,  1263,    65,
      66,   842,    -1,   711,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    -1,    -1,    -1,    92,    93,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1310,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     9,    -1,    -1,    -1,  1409,    -1,    -1,
       9,  1413,    -1,    -1,  1329,    -1,  1331,    -1,    -1,    -1,
    1422,    -1,    -1,  1182,    -1,    -1,    -1,  1429,  1343,    -1,
      -1,    -1,    38,    39,    40,  1437,  1438,    -1,    -1,    38,
      39,    40,  1201,    -1,   160,    -1,    -1,   163,   806,   711,
      -1,    -1,  1211,  1455,    60,    61,    62,    63,    -1,    65,
      66,    60,    61,    62,    63,    -1,    65,    66,    -1,    -1,
      -1,  1473,  1231,  1475,    -1,  1477,    -1,    -1,    -1,    -1,
      -1,    -1,  1484,    -1,   842,    -1,    -1,    -1,    -1,    -1,
    1249,    -1,  1251,  1252,  1409,    -1,    -1,    -1,  1413,  1501,
      -1,    -1,    -1,    -1,  1263,    -1,    -1,  1422,  1182,    -1,
      -1,    -1,    31,    32,  1429,    -1,    35,    36,    37,    -1,
      -1,    -1,  1437,  1438,    -1,    -1,    -1,  1201,    -1,    -1,
    1532,    -1,   138,    -1,    53,    54,    -1,  1211,    -1,   138,
    1455,    -1,    -1,    -1,   806,    64,    -1,  1549,    -1,    -1,
      -1,  1310,    -1,    -1,   160,    -1,    -1,  1231,  1473,    -1,
    1475,   160,  1477,    -1,    -1,    -1,    -1,    -1,    -1,  1484,
    1329,    -1,  1331,    -1,    -1,  1249,    -1,  1251,  1252,    -1,
     842,    -1,    -1,    -1,  1343,    -1,  1501,    -1,    -1,  1263,
      -1,    -1,    -1,    -1,    -1,    -1,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1532,    -1,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
      -1,    -1,    -1,    -1,  1549,    -1,  1310,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1409,    -1,    -1,    -1,  1413,  1329,    -1,  1331,    -1,    -1,
      -1,    -1,    -1,  1422,    -1,    -1,    -1,    -1,    -1,  1343,
    1429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1437,  1438,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1182,    -1,    -1,    -1,    -1,  1455,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1201,    -1,    -1,    -1,  1473,    -1,  1475,    -1,  1477,    -1,
    1211,    -1,    -1,    -1,    -1,  1484,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1409,    -1,    -1,    -1,  1413,
    1231,    -1,  1501,    -1,    -1,    -1,    -1,    -1,  1422,    -1,
      -1,    -1,    -1,    -1,    -1,  1429,    -1,    -1,  1249,    -1,
    1251,  1252,    -1,  1437,  1438,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1263,  1532,    -1,    -1,    35,    36,    37,    -1,
      -1,  1455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1549,    -1,    -1,    -1,    53,    54,    -1,    -1,    -1,  1473,
      -1,  1475,    -1,  1477,    -1,    64,    -1,    -1,    -1,    -1,
    1484,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1310,
      -1,    -1,    -1,    -1,  1182,    -1,    -1,  1501,     5,    -1,
       7,     8,    -1,    10,    11,    -1,    -1,    -1,  1329,    16,
    1331,    -1,    -1,  1201,    -1,    22,    23,    24,    -1,    -1,
      -1,    -1,  1343,  1211,    -1,    -1,    33,    -1,  1532,   118,
     119,    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1231,    -1,  1549,    -1,    -1,    55,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
      -1,  1249,    -1,  1251,  1252,    -1,    -1,    74,    -1,    76,
      77,    -1,    -1,    -1,    -1,  1263,    -1,    -1,    -1,    -1,
      31,    32,    -1,    -1,    35,    36,    37,    -1,  1409,    -1,
    1182,    -1,  1413,    -1,    -1,   102,    -1,    -1,    -1,    -1,
      -1,  1422,    53,    54,    -1,    -1,    -1,    -1,  1429,  1201,
      -1,    -1,    -1,    64,    -1,    -1,  1437,  1438,    -1,  1211,
      -1,    -1,  1310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   139,    -1,  1455,    -1,    -1,   144,   145,  1231,
      -1,  1329,    -1,  1331,   151,   152,    -1,    -1,   155,    -1,
     157,   158,  1473,   160,  1475,  1343,  1477,  1249,    -1,  1251,
    1252,    -1,    -1,  1484,   115,   116,   117,   118,   119,    -1,
      -1,  1263,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1501,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,    -1,    -1,
      -1,    -1,   153,   154,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1532,    -1,    -1,    -1,    -1,    -1,    -1,  1310,    -1,
      -1,  1409,    -1,    -1,    -1,  1413,    -1,    -1,  1549,    -1,
      -1,    -1,    -1,    -1,  1422,    -1,    -1,  1329,    -1,  1331,
      -1,  1429,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1437,
    1438,  1343,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,  1455,    -1,    -1,
      92,    93,    94,    95,    96,    97,    98,    99,   100,    -1,
      -1,    -1,    -1,    -1,    -1,  1473,    -1,  1475,    -1,  1477,
      -1,    -1,    -1,    -1,    -1,    -1,  1484,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,  1501,    -1,    -1,    -1,  1409,    -1,    -1,
      -1,  1413,    32,    -1,    -1,    -1,    -1,    -1,    38,    -1,
    1422,    -1,    -1,    43,    44,    45,    -1,  1429,    -1,    49,
      50,   163,    -1,    -1,  1532,  1437,  1438,    -1,    -1,    -1,
      60,    61,    -1,    63,    64,    65,    -1,    -1,    -1,    -1,
      -1,  1549,    72,  1455,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    81,    -1,    83,    -1,    85,    86,    -1,    88,    -1,
      90,  1473,    92,  1475,    94,  1477,    -1,    97,    -1,    99,
      -1,   101,  1484,    -1,   104,    -1,   106,   107,   108,    -1,
      -1,    -1,   112,   113,    -1,   115,    -1,    -1,   118,  1501,
      -1,   121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,   133,    10,    11,    -1,    -1,    -1,    -1,
      16,   141,    -1,     2,    -1,    -1,    22,    23,    24,    -1,
    1532,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,
      -1,    -1,    38,    39,    -1,    -1,    -1,  1549,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    -1,    -1,   183,   184,   185,   186,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      76,    77,    -1,    35,    36,    37,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
      -1,    53,    54,    -1,    -1,    -1,   102,    -1,    -1,    -1,
      -1,    -1,    64,   233,    -1,    -1,   236,    -1,   238,    -1,
      -1,    -1,   242,   243,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   139,    -1,    -1,    -1,    -1,   144,   145,
      -1,   271,   272,   273,    -1,   151,   152,    -1,    -1,    -1,
      -1,   157,   158,   115,   160,   117,   118,   119,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,   140,   141,
     142,   143,   144,   145,   146,   147,   148,   176,    -1,     5,
     179,     7,     8,    -1,    10,    11,    -1,    -1,    -1,    -1,
      16,    -1,    -1,    -1,   334,   335,    22,    23,    24,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,   348,    -1,
      -1,    -1,    38,    39,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   364,    -1,    -1,    -1,    -1,    55,
      -1,    -1,   231,    -1,    -1,   234,    -1,    -1,    -1,   379,
      -1,    -1,   241,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      76,    77,     5,   393,     7,     8,    -1,    10,    11,    -1,
      -1,    -1,    -1,    16,    -1,    -1,   406,    -1,    -1,    22,
      23,    24,    -1,    -1,    -1,   274,   102,    -1,    -1,   419,
      33,    -1,    -1,    -1,   283,    38,    39,   286,    -1,    -1,
     289,    -1,   432,   292,    -1,    -1,    -1,   296,   297,   298,
      -1,   300,    55,   302,    -1,   445,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   139,    -1,    -1,   456,    -1,   144,   145,
      -1,    74,    -1,    76,    77,   151,   152,    -1,    -1,   469,
      -1,   157,   158,    -1,   160,    -1,    -1,    -1,    -1,    -1,
     480,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
      -1,    -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   511,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,    -1,    10,    11,    -1,   139,    -1,    -1,    16,
      -1,   144,   145,    -1,    -1,    22,    23,    24,   151,   152,
      -1,    -1,    -1,    -1,   157,   158,    33,   160,    -1,    -1,
      -1,    38,    39,    -1,    -1,    -1,    -1,    -1,   558,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    -1,    55,   569,
      87,    -1,    89,    -1,    91,    -1,    93,    -1,    95,    96,
      -1,    -1,   582,   100,    -1,   102,    -1,    74,   105,    76,
      77,    -1,   109,   110,    -1,   595,    -1,   114,    -1,   116,
     117,    -1,   119,   120,    -1,    -1,    -1,    -1,    -1,    -1,
     610,    -1,    -1,    -1,    -1,   102,    -1,    -1,   135,    -1,
      -1,    -1,   622,   140,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,   635,    -1,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,   647,    -1,    -1,
      -1,    -1,   139,    -1,    -1,    -1,    -1,   144,   145,    -1,
      -1,    -1,    -1,    -1,   151,    -1,    -1,   667,    -1,    -1,
     157,   158,    -1,   160,    -1,    -1,    -1,    -1,    -1,   679,
     197,    -1,   199,   200,   201,   202,   203,   204,    -1,   206,
     207,   208,   209,   210,    -1,   212,   213,   214,   215,   216,
      -1,    -1,    -1,   157,    -1,    -1,    -1,    -1,    -1,    -1,
     227,    -1,   229,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     247,    -1,   249,   250,   251,   252,   253,   254,    -1,   256,
     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,
      -1,   268,   269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,   775,    -1,    -1,   778,    92,
      93,    94,    95,    96,    97,    98,    99,   100,    -1,   789,
     790,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   808,     9,
      -1,   811,    -1,    -1,    -1,    -1,   816,    -1,    -1,    -1,
      -1,   821,    -1,    -1,    31,    32,   826,    -1,    35,    36,
      37,   831,    -1,    -1,    -1,   694,    -1,    -1,    38,    39,
      40,    -1,    -1,    -1,   157,    -1,    53,    54,    -1,    -1,
     850,    -1,    -1,    -1,    -1,    -1,    -1,    64,   858,    -1,
      60,    61,    62,    63,   723,    65,    66,    -1,   727,    -1,
     729,    -1,    -1,   732,    -1,   734,   735,   736,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,   116,
     117,   118,   119,   772,   121,   774,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   788,
      -1,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,    -1,    -1,   803,   804,    -1,    -1,   807,    -1,
     809,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     160,    -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   838,
      -1,    -1,    -1,    -1,   843,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       0,     1,    -1,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,   536,
      -1,    -1,    22,    23,    24,    -1,    26,    27,    28,    29,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    39,
      -1,    41,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      90,    91,    -1,    -1,    -1,  1095,  1096,    -1,    -1,    -1,
      -1,   101,   102,   103,   104,    -1,   106,   107,    -1,   109,
      -1,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
    1120,    -1,   122,   123,    -1,  1125,   126,   127,   128,   129,
     130,   131,   132,    -1,   134,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,    -1,   157,   158,    -1,
     160,  1161,    -1,  1163,    -1,    -1,  1166,    -1,    -1,  1169,
      -1,    -1,  1172,    -1,  1174,     9,    -1,  1177,  1178,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1188,    -1,
    1190,    -1,    -1,    -1,    -1,    -1,    -1,  1197,  1198,    -1,
      -1,    -1,    -1,  1203,    38,    39,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,
      -1,    65,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1099,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    -1,    -1,    -1,    92,    93,
      94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   794,    -1,    -1,
    1280,  1281,    83,    -1,    85,    86,    -1,    88,    -1,    90,
      -1,    92,    -1,    94,    -1,    -1,    97,    -1,    99,    -1,
     101,    -1,    -1,   104,  1304,   106,   107,   108,  1167,    -1,
      -1,   112,    -1,    -1,   115,  1315,    -1,   118,    -1,    -1,
     121,    -1,  1181,   157,    -1,    -1,   160,    -1,    16,   163,
      -1,  1190,    -1,    -1,    -1,    -1,    -1,    -1,    26,    27,
     141,    -1,    -1,    -1,    -1,    -1,  1205,  1347,    -1,    -1,
    1209,    -1,  1211,  1353,    -1,    -1,    -1,    -1,    -1,    -1,
      48,  1361,    -1,    -1,    52,    -1,  1366,    -1,    56,    -1,
      -1,  1371,    -1,  1232,  1374,    -1,    -1,    -1,  1237,  1379,
    1380,    -1,  1241,    71,    -1,    -1,    -1,    -1,  1247,    -1,
      -1,    -1,    -1,  1252,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1404,  1405,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,
    1279,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1301,    -1,  1444,    -1,    -1,  1447,  1307,    -1,
      -1,  1310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1325,  1326,  1327,    -1,
      -1,  1330,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1340,    -1,    -1,  1343,    -1,   157,    31,    32,   177,
    1349,    35,    36,    37,    -1,    -1,    -1,    -1,    -1,  1499,
      -1,    -1,    -1,   191,  1363,  1364,   194,   195,    -1,    53,
      54,    -1,    -1,    -1,    -1,    -1,  1375,    -1,    -1,  1378,
      64,    -1,    -1,  1382,    -1,    -1,    -1,  1386,  1387,    35,
      36,    37,    -1,  1392,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1543,  1544,    -1,    -1,    53,    54,    -1,
      -1,    -1,    -1,    -1,    -1,   243,    -1,    -1,    64,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1425,    -1,    -1,    -1,
    1429,   115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,
      -1,   125,    -1,    -1,  1443,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,    -1,    -1,    -1,    -1,   115,
    1469,  1470,   118,   119,    -1,    -1,   304,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1484,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,    -1,    -1,  1504,    -1,    -1,    -1,    -1,
     338,    -1,    -1,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,    -1,  1522,    -1,    -1,    -1,   355,    -1,   357,
     358,   359,   360,   361,   362,   363,    -1,   365,    -1,    -1,
      -1,    -1,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,    -1,    -1,    -1,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,    -1,    -1,    -1,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,    -1,    -1,
      -1,    -1,   410,    -1,   412,   413,   414,   415,   416,   417,
     418,    -1,    -1,    -1,    -1,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,    -1,    -1,   436,    -1,
     438,   439,   440,   441,   442,   443,   444,    -1,    -1,    -1,
     448,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
      -1,    -1,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,    -1,    -1,    -1,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,
     488,   489,   490,   491,   492,   493,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   501,    -1,   503,   504,   505,   506,   507,
     508,   509,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   550,   551,   552,   553,   554,   555,   556,   557,
      -1,    -1,    -1,   561,   562,   563,   564,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,   573,    -1,   575,   576,   577,
     578,   579,   580,   581,    -1,    -1,    -1,    -1,   586,    -1,
     588,   589,   590,   591,   592,   593,   594,   157,    -1,    -1,
      -1,    -1,   600,    -1,   602,   603,   604,   605,   606,   607,
     608,    -1,    -1,    -1,    -1,   613,   614,   615,   616,   617,
     618,   619,   620,    -1,    -1,    -1,    -1,    -1,   626,    -1,
     628,   629,   630,   631,   632,   633,   634,    -1,    -1,    -1,
       9,   639,   640,   641,   642,   643,   644,   645,   646,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     658,    -1,   660,   661,   662,   663,   664,   665,   666,    38,
      39,    40,   670,    -1,   672,   673,   674,   675,   676,   677,
     678,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    60,    61,    62,    63,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
      99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     748,   749,   750,   751,   752,   753,   754,   755,   756,   757,
     758,   759,   760,   761,   762,   763,   764,   765,   766,   767,
     768,   769,   770,   771,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   160,   790,    -1,   163,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     808,     1,    -1,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,    12,    13,    14,    15,    16,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    -1,    26,    27,    28,    29,
      30,    -1,    -1,    -1,    34,    -1,   844,   845,    38,    39,
      -1,    41,    -1,    -1,    -1,    -1,    46,    47,    48,    49,
      -1,   859,    -1,    -1,    -1,    55,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    -1,    74,    75,    76,    77,   886,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   101,   102,   103,   104,    -1,   106,   107,    -1,   109,
      -1,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   122,   123,    -1,    -1,   126,   127,   128,   129,
     130,   131,   132,    -1,   134,   135,   136,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   151,    -1,   153,   154,    -1,    -1,   157,   158,    -1,
     160,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
       5,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
      15,    16,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      -1,    26,    27,    28,    29,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    39,    -1,    41,    -1,    -1,    -1,
      -1,    46,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,
      55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    -1,    -1,    72,    -1,    74,
      75,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    90,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   101,   102,   103,   104,
      -1,   106,   107,    -1,   109,    -1,    -1,   112,   113,    -1,
      -1,    -1,  1090,    -1,    -1,    -1,    -1,   122,   123,    -1,
    1098,   126,   127,   128,   129,   130,   131,   132,    -1,   134,
     135,   136,    -1,    -1,    -1,    -1,    -1,    -1,  1116,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   151,    -1,   153,   154,
      -1,    -1,   157,   158,    -1,   160,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
      17,    -1,    -1,    -1,    -1,    22,    23,    24,    -1,    26,
      27,    28,    29,    30,    -1,    -1,  1174,    34,    -1,    -1,
      -1,    38,    39,    -1,    41,    -1,    -1,    -1,    -1,    46,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      57,    -1,    -1,    -1,  1202,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    -1,    74,    75,    76,
      77,    -1,    -1,    -1,    -1,    -1,  1224,    -1,    -1,    -1,
      -1,    88,    -1,    90,    91,  1233,    -1,    -1,    -1,    -1,
      -1,  1239,    -1,    -1,   101,   102,   103,   104,    -1,   106,
     107,    -1,   109,    -1,    -1,   112,   113,    -1,    -1,  1257,
      -1,    -1,    -1,    -1,    -1,   122,   123,    -1,  1266,   126,
     127,   128,   129,   130,   131,   132,    -1,   134,   135,   136,
      -1,    -1,    -1,   140,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,    -1,
     157,   158,    -1,   160,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1314,    -1,     1,    -1,
       3,     4,     5,     6,     7,     8,    -1,    10,    11,    12,
      13,    14,    15,    16,    17,    -1,    -1,    -1,    -1,    22,
      23,    24,    -1,    26,    27,    28,    29,    30,  1346,    -1,
      -1,    34,    -1,    -1,    -1,    38,    39,    -1,    41,    -1,
    1358,    -1,    -1,    46,    47,    48,    49,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      -1,    74,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
     103,   104,    -1,   106,   107,    -1,   109,    -1,  1426,   112,
     113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   122,
     123,    -1,    -1,   126,   127,   128,   129,   130,   131,   132,
      -1,   134,   135,   136,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1463,    -1,    -1,   151,    -1,
     153,   154,    -1,    -1,   157,   158,     1,   160,     3,     4,
       5,     6,     7,     8,    -1,    10,    11,    -1,    13,    -1,
    1488,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      -1,    26,    27,    28,    29,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
      45,    -1,    47,    48,    49,    50,    -1,    -1,    -1,    -1,
      55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    88,    -1,    90,    91,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,    -1,
      -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,   123,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,   151,    13,   153,   154,
      16,    17,   157,   158,    20,   160,    22,    23,    24,    -1,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    -1,
      -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    -1,    74,    75,
      76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    90,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,   113,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,   151,    13,   153,   154,    16,
      17,   157,   158,    20,   160,    22,    23,    24,    -1,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    39,    -1,    41,    42,    43,    44,    -1,    -1,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    -1,    74,    75,    76,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    90,    91,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,   103,   104,    -1,    -1,
     107,    -1,   109,    -1,    -1,   112,   113,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   123,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    -1,    -1,
      -1,    92,    93,    94,    95,    96,    97,    98,    99,   100,
      -1,    -1,    -1,    -1,   151,    -1,   153,   154,    -1,    -1,
     157,   158,     1,   160,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,    -1,    13,    -1,    -1,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      39,    -1,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    57,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,   103,   104,    -1,    -1,   107,    -1,
     109,    -1,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,   151,    13,   153,   154,    16,    17,   157,   158,
      20,   160,    22,    23,    24,    -1,    26,    27,    28,    29,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    39,
      -1,    41,    42,    43,    44,    -1,    -1,    47,    48,    49,
      -1,    -1,    -1,    -1,    -1,    55,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,     7,     8,    -1,    10,
      11,   151,    13,   153,   154,    16,    17,   157,   158,    20,
     160,    22,    23,    24,    -1,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    39,    -1,
      41,    42,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    57,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    -1,    74,    75,    76,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    90,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,   103,   104,    -1,    -1,   107,    -1,   109,   110,
     111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
     151,    13,   153,   154,    16,    17,   157,   158,    20,   160,
      22,    23,    24,    -1,    26,    27,    28,    29,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    39,    -1,    41,
      -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,
      -1,    -1,    -1,    55,    -1,    57,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    90,    91,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     102,   103,   104,    -1,    -1,   107,    -1,   109,    -1,    -1,
     112,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
       3,     4,     5,     6,     7,     8,    -1,    10,    11,   151,
      13,   153,   154,    16,    17,   157,   158,    20,   160,    22,
      23,    24,    -1,    26,    27,    28,    29,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    39,    -1,    41,    -1,
      -1,    -1,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,
      -1,    -1,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,
      -1,    74,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    88,    -1,    90,    91,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,
     103,   104,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
     113,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,
     123,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
       4,     5,     6,     7,     8,    -1,    10,    11,   151,    13,
     153,   154,    16,    17,   157,   158,    20,   160,    22,    23,
      24,    -1,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    39,    -1,    41,    -1,    43,
      44,    -1,    -1,    47,    48,    49,    -1,    -1,    -1,    -1,
      -1,    55,    -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    67,    68,    69,    -1,    -1,    72,    -1,
      74,    75,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    88,    -1,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
     104,    -1,    -1,   107,    -1,   109,    -1,    -1,   112,   113,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   151,    -1,   153,
     154,    -1,    -1,   157,   158,     1,   160,     3,     4,     5,
       6,     7,     8,    -1,    10,    11,    -1,    13,    -1,    -1,
      16,    17,    -1,    -1,    20,    21,    22,    23,    24,    -1,
      26,    27,    28,    29,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    39,    -1,    41,    -1,    -1,    -1,    -1,
      -1,    47,    48,    49,    -1,    -1,    -1,    -1,    -1,    55,
      -1,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    67,    68,    69,    -1,    -1,    72,    -1,    74,    75,
      76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    88,    -1,    90,    91,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   102,   103,   104,    -1,
      -1,   107,    -1,   109,    -1,    -1,   112,   113,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    10,    11,   151,    13,   153,   154,    16,
      17,   157,   158,    20,   160,    22,    23,    24,    -1,    26,
      27,    28,    29,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    39,    -1,    41,    -1,    -1,    -1,    -1,    -1,
      47,    48,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,
      57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      67,    68,    69,    -1,    -1,    72,    -1,    74,    75,    76,
      77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    88,    -1,    90,    91,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   102,   103,   104,    -1,    -1,
     107,    -1,   109,    -1,   111,   112,   113,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    10,    11,   151,    13,   153,   154,    16,    17,
     157,   158,    20,   160,    22,    23,    24,    -1,    26,    27,
      28,    29,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    39,    -1,    41,    -1,    -1,    -1,    45,    -1,    47,
      48,    49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    57,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
      68,    69,    -1,    -1,    72,    -1,    74,    75,    76,    77,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      88,    -1,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   102,   103,   104,    -1,    -1,   107,
      -1,   109,    -1,    -1,   112,   113,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,     3,     4,     5,     6,     7,     8,
      -1,    10,    11,   151,    13,   153,   154,    16,    17,   157,
     158,    20,   160,    22,    23,    24,    -1,    26,    27,    28,
      29,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      39,    -1,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,
      49,    -1,    -1,    -1,    -1,    -1,    55,    -1,    57,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,
      69,    -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
      -1,    90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   102,   103,   104,    -1,    -1,   107,    -1,
     109,    -1,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,
      -1,   120,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,     3,     4,     5,     6,     7,     8,    -1,
      10,    11,   151,    13,   153,   154,    16,    17,   157,   158,
      20,   160,    22,    23,    24,    -1,    26,    27,    28,    29,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    39,
      -1,    41,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,
      50,    -1,    -1,    -1,    -1,    55,    -1,    57,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,
      -1,    -1,    72,    -1,    74,    75,    76,    77,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,
      90,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   102,   103,   104,    -1,    -1,   107,    -1,   109,
      -1,    -1,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   123,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,     3,     4,     5,     6,     7,     8,    -1,    10,
      11,   151,    13,   153,   154,    16,    17,   157,   158,    20,
     160,    22,    23,    24,    -1,    26,    27,    28,    29,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    39,    -1,
      41,    -1,    -1,    -1,    -1,    -1,    47,    48,    49,    -1,
      -1,    -1,    -1,    -1,    55,    -1,    57,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    -1,
      -1,    72,    -1,    74,    75,    76,    77,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    90,
      91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   102,   103,   104,    -1,    -1,   107,    -1,   109,     9,
      -1,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   123,    -1,    -1,    31,    32,    -1,    -1,    35,
      36,    37,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
      40,    -1,    -1,    -1,    -1,    -1,    -1,    53,    54,    -1,
     151,    -1,   153,   154,    -1,    -1,   157,   158,    64,   160,
      60,    61,    62,    63,    -1,    65,    66,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    -1,
      -1,    -1,    92,    93,    94,    95,    96,    97,    98,    99,
     100,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   115,
     116,   117,   118,   119,    -1,   121,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      38,    39,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     9,    60,    61,    62,    63,    -1,    65,    66,    -1,
     160,    -1,    -1,   163,    -1,    -1,    -1,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      38,    39,    -1,    -1,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    60,    61,    62,    63,    -1,    65,    66,    -1,
      31,    32,    -1,    -1,    35,    36,    37,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    52,    53,    54,    92,    93,    94,    95,    96,    97,
      98,    99,   100,    64,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    82,   160,    84,    -1,   163,    87,    -1,    89,    -1,
      91,    -1,    93,    -1,    95,    96,    -1,    98,    -1,   100,
      -1,   102,    -1,    -1,   105,    -1,    -1,    -1,   109,   110,
     111,    -1,    -1,   114,    -1,   116,   117,    -1,   119,   120,
      -1,    -1,    -1,    -1,   115,   116,   117,   118,   119,    -1,
      -1,    -1,   160,    -1,   135,   163,    31,    32,    -1,    -1,
      35,    36,    37,    -1,    -1,    -1,    -1,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,    -1,    -1,    -1,    -1,
     115,   116,   117,   118,   119,    -1,   227,    -1,    -1,    -1,
      -1,    -1,    31,    -1,    -1,    -1,    35,    36,    37,    -1,
      -1,    -1,    -1,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,    53,    54,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    64,    -1,    -1,    -1,    -1,
      35,    36,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,    54,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    64,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   115,   116,   117,   118,
     119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     115,   116,   117,   118,   119,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,   165,   166,     0,     1,     5,     6,     7,     8,    10,
      11,    12,    13,    14,    15,    16,    17,    22,    23,    24,
      26,    27,    28,    29,    30,    34,    38,    39,    41,    46,
      47,    48,    49,    55,    57,    67,    68,    69,    72,    74,
      75,    76,    77,    88,    90,    91,   101,   102,   103,   104,
     106,   107,   109,   112,   113,   122,   123,   126,   127,   128,
     129,   130,   131,   132,   134,   135,   136,   151,   153,   154,
     157,   158,   160,   167,   168,   169,   171,   176,   184,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   238,
     239,   240,   241,   242,   243,   248,   250,   251,   252,   253,
     254,   255,   269,   270,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   286,   287,   295,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   328,   331,
     334,   347,   350,   351,   353,   364,   366,   368,   378,   381,
     393,   396,   398,   405,   409,   411,   418,   428,   431,   433,
     434,   436,   437,   438,   442,   444,   195,   189,   198,   199,
      40,    40,    40,   315,   316,   317,   318,   305,   309,   310,
     311,    33,    55,   139,   144,   145,   207,   209,   211,   214,
     216,   218,   220,   222,   223,   226,   228,   230,   233,   238,
     239,   240,   243,   250,   251,   253,   254,   256,   263,   269,
     270,   271,   272,   280,   281,   282,   283,   295,   298,   307,
     206,   205,   206,   242,   204,   206,   242,   187,   190,   263,
     263,   367,   332,    73,   188,   206,   207,   209,   211,   214,
     216,   218,   220,   222,   223,   226,   228,   230,   233,   238,
     239,   240,   243,   250,   251,   253,   254,   267,   295,   307,
      40,   329,   196,   192,   412,   186,   198,   206,   230,   233,
     427,    10,   206,   206,   158,   206,   340,    22,   170,   263,
     206,   206,   419,   263,    13,   263,   206,   206,   206,   206,
     443,   206,   433,   307,   152,   245,   263,   266,    64,   114,
     121,   224,   244,   245,   263,   206,   230,   233,   249,   168,
     169,   171,   184,   314,   328,   331,   334,   347,   431,   434,
     436,   438,   442,   444,     3,     4,    40,   157,     9,    38,
      39,    60,    61,    62,    63,    65,    66,   138,   160,   268,
     206,   230,   233,   237,   307,     9,    40,    60,    61,    62,
      63,    65,    66,   138,   160,   163,   268,   284,   285,   237,
       9,    40,    60,    61,    62,    63,    65,    66,   138,   160,
     268,   284,   237,   237,     9,    40,    60,    61,    62,    63,
      65,    66,   138,   160,   268,   284,   237,     9,    40,    60,
      61,    62,    63,    65,    66,   138,   160,   268,   284,   237,
       9,    40,    60,    61,    62,    63,    65,    66,   138,   160,
     268,   284,   237,     9,    40,    60,    61,    62,    63,    65,
      66,   138,   160,   268,   284,   237,     9,    40,    60,    61,
      62,    63,    65,    66,   138,   160,   268,   284,     9,    60,
      61,    62,    63,    65,    66,   138,   160,   268,   284,   237,
       9,    40,    60,    61,    62,    63,    65,    66,   138,   160,
     268,   237,     9,    60,    61,    62,    63,    65,    66,   138,
     160,   268,   284,   237,   307,     9,    40,    60,    61,    62,
      63,    65,    66,   138,   157,   160,   198,   268,   284,   237,
     307,     9,    40,    60,    61,    62,    63,    65,    66,   138,
     157,   160,   198,   268,   284,   237,   307,     8,    10,    11,
     158,   206,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   225,   226,   227,
     229,   230,   232,   233,   234,   237,   295,   307,   308,   237,
       9,    60,    61,    62,    63,    65,    66,   138,   160,   268,
     284,     9,    60,    61,    62,    63,    65,    66,   138,   160,
     198,   268,   284,     9,    40,    60,    61,    62,    63,    65,
      66,   138,   160,   268,   237,   206,     9,    40,    60,    61,
      62,    63,    65,    66,   138,   160,   198,   268,   284,   237,
       9,    40,    60,    61,    62,    63,    65,    66,   138,   157,
     160,   268,   284,     9,    60,    61,    62,    63,    65,    66,
     138,   157,   160,   268,   284,   237,     9,    40,    60,    61,
      62,    63,    65,    66,   138,   160,   198,   268,   284,     9,
      60,    61,    62,    63,    65,    66,   138,   160,   198,   268,
     284,   237,   198,   198,   198,   198,   198,   267,     9,    40,
      60,    61,    62,    63,    65,    66,   138,   160,   268,   284,
       9,    40,    60,    61,    62,    63,    65,    66,   138,   160,
     198,   268,   284,   237,   307,   155,   156,   155,   156,   155,
     156,   155,   156,   185,    18,    19,    20,    21,   356,   358,
     363,    13,    29,    30,   112,   113,   168,   184,   200,   201,
     202,   203,   334,   444,    20,    42,    43,    44,   365,   369,
     374,    42,   385,   263,   198,   198,   161,   206,   444,   263,
     444,   206,   319,   322,   319,   319,   319,   263,   116,   263,
     263,   257,   264,   258,   259,   261,   260,   262,    31,    32,
      35,    36,    37,    53,    54,    64,   115,   116,   117,   118,
     119,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   354,   265,   194,   155,   444,   206,   155,   444,
     206,   198,   230,   320,   321,   322,   444,   206,   333,   152,
     155,   206,   256,   263,   307,   429,   430,   198,     9,   138,
     402,   235,   206,   330,   333,   320,   444,   263,    73,    22,
     157,   336,   444,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   179,   180,   181,   157,   444,   144,   156,   444,
     406,   348,   444,   382,   124,   125,   197,   444,   444,   444,
     155,   444,   444,   263,     8,    10,    11,   207,   296,   155,
     159,   155,   159,   121,   206,   206,   244,   263,   263,   263,
     263,   263,   263,   263,   263,   249,   263,   263,   263,   263,
     263,   263,   263,   263,   249,   263,   155,   162,   263,   263,
     263,   263,   263,   263,   263,   263,   249,   263,   263,   263,
     263,   263,   263,   263,   263,   249,   263,   263,   263,   263,
     263,   263,   263,   263,   249,   263,   263,   263,   263,   263,
     263,   263,   263,   249,   263,   263,   263,   263,   263,   263,
     263,   263,   249,   263,   263,   263,   263,   263,   263,   263,
     263,   249,   263,   263,   263,   263,   263,   263,   263,   263,
     249,   263,   263,   263,   263,   263,   263,   263,   263,   249,
     263,   263,   263,   263,   263,   263,   263,   263,   249,   263,
     263,   263,   263,   263,   263,   263,   263,   244,   249,   263,
     263,   263,   263,   263,   263,   263,   263,   244,   249,   263,
     263,   263,   263,   263,   263,   263,   263,   249,   263,   263,
     263,   263,   263,   263,   263,   263,   249,   263,   263,   263,
     263,   263,   263,   263,   263,   249,   157,   161,   263,   263,
     263,   263,   263,   263,   263,   263,   249,   263,   263,   263,
     263,   263,   263,   263,   263,   244,   249,   263,   263,   263,
     263,   263,   263,   263,   263,   244,   249,   263,   263,   263,
     263,   263,   263,   263,   263,   249,   263,   263,   263,   263,
     263,   263,   263,   263,   249,   155,   263,   263,   263,   263,
     263,   263,   263,   263,   249,   263,   263,   263,   263,   263,
     263,   263,   263,   249,   245,   245,   245,   245,   198,   444,
     359,   363,    19,   356,   363,     3,     4,   200,   370,   375,
      42,   365,   374,    43,   365,   386,    20,    42,   110,   111,
     379,   380,   391,   444,   444,   444,   163,   179,   326,   327,
     155,   444,   444,   444,   444,   299,   180,   180,   180,   180,
     180,   180,   180,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   263,   263,   263,
     263,   263,   263,   263,   263,   263,   263,   444,   180,   444,
     206,   242,   206,   242,   179,   326,   155,   191,   179,   155,
     444,   206,   242,   430,   155,   263,   179,    56,   155,   444,
     444,   193,   203,   352,   444,   429,   152,   444,   335,   206,
     339,   340,   342,   206,   206,   206,   206,   337,   341,    22,
     444,   410,    56,     9,   352,   444,   263,   263,   198,   439,
     206,   432,   147,   160,   206,   297,   302,   263,   245,   266,
     172,   174,   156,   263,   163,   156,   156,   244,   156,   156,
     288,   357,   263,   361,   363,   206,   206,   263,   444,   372,
     365,   377,    10,    11,    22,   145,   157,   390,   388,   392,
     379,   394,   435,   263,   323,   324,   181,   155,   162,   322,
     182,   206,   300,   355,   206,   206,     9,   181,   321,   444,
     206,   157,   206,   430,   399,   206,   206,   444,   413,    22,
      89,   152,   206,   344,   345,   346,   343,   340,   342,   444,
     206,   338,   342,   344,   352,   263,   206,   349,   420,   168,
     383,   384,   444,   197,   133,   168,   438,   440,   441,   444,
     167,   207,   207,   179,   114,   155,   121,   157,   177,   177,
     263,   156,   266,   352,   444,   263,   177,   177,   444,   376,
     263,   444,    10,    11,   390,   115,   116,   144,   145,   444,
     390,   352,   352,   167,     9,   263,   163,   155,   179,   116,
     352,   263,   179,   152,   246,   247,   266,   157,    51,   179,
      70,    71,   415,   416,   417,   444,   152,   206,   206,   179,
     156,   155,   155,   179,   155,   159,   156,    20,   407,   155,
     108,   425,   426,   168,   444,   198,   206,    20,   168,   438,
     441,   444,    20,   147,    58,    59,   159,   160,   263,   301,
     206,   266,   105,   156,   178,   131,   183,   183,   289,   360,
     444,   444,   444,   371,   352,   444,   352,   156,   390,   390,
     390,   390,   387,   444,   395,    20,   325,   263,   206,   444,
     206,   155,   156,   246,   263,   206,   414,   444,   444,   206,
     179,   157,   179,   179,   152,   206,   346,    89,   342,   444,
     179,   444,   206,   206,   421,   444,   444,   444,   444,   207,
     159,   159,   207,   155,   159,   179,   156,   182,   206,   173,
     175,   155,   352,   362,   352,   373,   352,   389,    20,    45,
     397,   444,   263,   179,   167,   157,   247,   156,    52,   403,
      20,   352,   352,   157,   179,   246,   444,   206,   179,   152,
     206,   408,   120,   423,   424,   352,   159,   207,    58,    59,
     159,   263,   156,   444,   444,   266,   352,   352,   352,   140,
     246,   263,   400,   246,   156,   157,   179,   206,   179,   352,
     404,   422,   444,   160,   159,   159,   290,   156,   444,   156,
     246,   157,   179,    20,    50,    20,   352,   207,   155,   401,
     156,   246,   206,   206,    58,    59,   159,   160,   266,   404,
     156,   159,   159,   207,   291,    58,    59,   159,   155,   159,
     159,   266,   292,   155,   294,   245,   293,   156,   155,   245
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {
      case 22: /* "LITERAL" */

/* Line 1000 of yacc.c  */
#line 351 "source\\compiler\\harbour.sly"
	{ if( (yyvaluep->valChar).dealloc ) hb_xfree( (yyvaluep->valChar).string ); };

/* Line 1000 of yacc.c  */
#line 4673 "obj\\63\\harboury.c"
	break;

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;



/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{


    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 355 "source\\compiler\\harbour.sly"
    { hb_compLinePush(); ;}
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 355 "source\\compiler\\harbour.sly"
    { ;}
    break;

  case 35:

/* Line 1455 of yacc.c  */
#line 391 "source\\compiler\\harbour.sly"
    { hb_comp_iLine =  (yyvsp[(2) - (4)].iNumber); ;}
    break;

  case 36:

/* Line 1455 of yacc.c  */
#line 392 "source\\compiler\\harbour.sly"
    { hb_comp_iLine =  (yyvsp[(2) - (6)].iNumber); ;}
    break;

  case 37:

/* Line 1455 of yacc.c  */
#line 395 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 38:

/* Line 1455 of yacc.c  */
#line 398 "source\\compiler\\harbour.sly"
    {
               if( (yyvsp[(1) - (1)].valChar).dealloc )
               {
                  (yyvsp[(1) - (1)].valChar).string = hb_compIdentifierNew( (yyvsp[(1) - (1)].valChar).string, FALSE );
                  (yyvsp[(1) - (1)].valChar).dealloc = FALSE;
               }
               hb_compAutoOpenAdd( (yyvsp[(1) - (1)].valChar).string );
            ;}
    break;

  case 39:

/* Line 1455 of yacc.c  */
#line 406 "source\\compiler\\harbour.sly"
    {
               char szFileName[ HB_PATH_MAX ];
               hb_strncat( hb_strncpy( szFileName, (yyvsp[(1) - (3)].valChar).string, HB_PATH_MAX ), (yyvsp[(3) - (3)].valChar).string, HB_PATH_MAX );
               hb_compAutoOpenAdd( hb_compIdentifierNew( szFileName, TRUE ) );
               if( (yyvsp[(1) - (3)].valChar).dealloc )
               {
                  hb_xfree( (yyvsp[(1) - (3)].valChar).string );
                  (yyvsp[(1) - (3)].valChar).dealloc = FALSE;
               }
               if( (yyvsp[(3) - (3)].valChar).dealloc )
               {
                  hb_xfree( (yyvsp[(3) - (3)].valChar).string );
                  (yyvsp[(3) - (3)].valChar).dealloc = FALSE;
               }
            ;}
    break;

  case 40:

/* Line 1455 of yacc.c  */
#line 424 "source\\compiler\\harbour.sly"
    {
                hb_comp_cVarType = ' ';
                hb_comp_bVarParams = FALSE;
             ;}
    break;

  case 41:

/* Line 1455 of yacc.c  */
#line 430 "source\\compiler\\harbour.sly"
    {
                hb_compFunctionAdd( (yyvsp[(3) - (6)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (6)].iNumber), 0 );

                if( hb_comp_bVarParams )
                {
                   hb_comp_functions.pLast->pCode[2] = HB_VAR_PARAM_FLAG;
                }
                else
                {
                   while( hb_comp_LocalParams )
                   {
                      PLOCALPARAM pDelete = hb_comp_LocalParams;

                      hb_compVariableAdd( hb_comp_LocalParams->szName, hb_comp_LocalParams->cType );

                      hb_comp_LocalParams = hb_comp_LocalParams->pNext;
                      hb_xfree( (void *) pDelete );
                   }
                }

                if( (yyvsp[(6) - (6)].string) )
                {
                   hb_compNamespaceEnd();
                }
             ;}
    break;

  case 42:

/* Line 1455 of yacc.c  */
#line 456 "source\\compiler\\harbour.sly"
    {
                hb_comp_wSeqCounter      = 0;
                hb_comp_wForCounter      = 0;
                hb_comp_wIfCounter       = 0;
                hb_comp_wWhileCounter    = 0;
                hb_comp_wCaseCounter     = 0;
                hb_comp_wWithObjCounter  = 0;
                hb_comp_wSwitchCounter   = 0;
                hb_comp_wFinallyCounter  = 0;
             ;}
    break;

  case 43:

/* Line 1455 of yacc.c  */
#line 467 "source\\compiler\\harbour.sly"
    {
                hb_comp_cVarType = ' ';
                hb_comp_bVarParams = FALSE;
             ;}
    break;

  case 44:

/* Line 1455 of yacc.c  */
#line 473 "source\\compiler\\harbour.sly"
    {
                hb_compFunctionAdd( (yyvsp[(3) - (6)].string), ( HB_SYMBOLSCOPE ) (yyvsp[(1) - (6)].iNumber), FUN_PROCEDURE );

                if( hb_comp_bVarParams )
                {
                   hb_comp_functions.pLast->pCode[2] = HB_VAR_PARAM_FLAG;
                }
                else
                {
                   while( hb_comp_LocalParams )
                   {
                      PLOCALPARAM pDelete = hb_comp_LocalParams;

                      hb_compVariableAdd( hb_comp_LocalParams->szName, hb_comp_LocalParams->cType );

                      hb_comp_LocalParams = hb_comp_LocalParams->pNext;
                      hb_xfree( (void *) pDelete );
                   }
                }

                if( (yyvsp[(6) - (6)].string) )
                {
                   hb_compNamespaceEnd();
                }
             ;}
    break;

  case 45:

/* Line 1455 of yacc.c  */
#line 499 "source\\compiler\\harbour.sly"
    {
                hb_comp_wSeqCounter      = 0;
                hb_comp_wForCounter      = 0;
                hb_comp_wIfCounter       = 0;
                hb_comp_wWhileCounter    = 0;
                hb_comp_wCaseCounter     = 0;
                hb_comp_wWithObjCounter  = 0;
                hb_comp_wSwitchCounter   = 0;
                hb_comp_wFinallyCounter  = 0;
             ;}
    break;

  case 46:

/* Line 1455 of yacc.c  */
#line 511 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = HB_FS_PUBLIC; ;}
    break;

  case 47:

/* Line 1455 of yacc.c  */
#line 512 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = HB_FS_STATIC; ;}
    break;

  case 48:

/* Line 1455 of yacc.c  */
#line 513 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = ( HB_FS_UTILITY | HB_FS_PUBLIC ); ;}
    break;

  case 49:

/* Line 1455 of yacc.c  */
#line 514 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = ( HB_FS_FIRST | HB_FS_PUBLIC ); ;}
    break;

  case 50:

/* Line 1455 of yacc.c  */
#line 515 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = ( HB_FS_UTILITY | HB_FS_STATIC ); ;}
    break;

  case 51:

/* Line 1455 of yacc.c  */
#line 516 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = HB_FS_INIT; ;}
    break;

  case 52:

/* Line 1455 of yacc.c  */
#line 517 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = HB_FS_EXIT; ;}
    break;

  case 53:

/* Line 1455 of yacc.c  */
#line 518 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = HB_FS_CRITICAL | HB_FS_PUBLIC; ;}
    break;

  case 54:

/* Line 1455 of yacc.c  */
#line 519 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = ( HB_FS_CRITICAL | HB_FS_STATIC ); ;}
    break;

  case 57:

/* Line 1455 of yacc.c  */
#line 524 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_PARAMETER; ;}
    break;

  case 59:

/* Line 1455 of yacc.c  */
#line 525 "source\\compiler\\harbour.sly"
    { hb_comp_bVarParams = TRUE; ;}
    break;

  case 60:

/* Line 1455 of yacc.c  */
#line 528 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 62:

/* Line 1455 of yacc.c  */
#line 532 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'N'; ;}
    break;

  case 63:

/* Line 1455 of yacc.c  */
#line 533 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'C'; ;}
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 534 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'D'; ;}
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 535 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'L'; ;}
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 536 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'B'; ;}
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 537 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'O'; ;}
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 538 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'S'; hb_comp_szFromClass = (yyvsp[(2) - (2)].string); ;}
    break;

  case 69:

/* Line 1455 of yacc.c  */
#line 539 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'E'; hb_comp_szFromEnum = (yyvsp[(2) - (2)].string); ;}
    break;

  case 70:

/* Line 1455 of yacc.c  */
#line 540 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 72:

/* Line 1455 of yacc.c  */
#line 544 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'A'; ;}
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 545 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'n'; ;}
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 546 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'c'; ;}
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 547 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'd'; ;}
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 548 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'l'; ;}
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 549 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'a'; ;}
    break;

  case 78:

/* Line 1455 of yacc.c  */
#line 550 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'b'; ;}
    break;

  case 79:

/* Line 1455 of yacc.c  */
#line 551 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'o'; ;}
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 552 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 's'; hb_comp_szFromClass = (yyvsp[(2) - (2)].string); ;}
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 553 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = 'e'; hb_comp_szFromEnum = (yyvsp[(2) - (2)].string); ;}
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 556 "source\\compiler\\harbour.sly"
    {
                                               hb_comp_LocalParams = (PLOCALPARAM) hb_xgrab( sizeof( LOCALPARAM ) );
                                               hb_comp_LocalParams->szName = (yyvsp[(1) - (2)].string);
                                               hb_comp_LocalParams->cType  = hb_comp_cVarType;
                                               hb_comp_LocalParams->pNext  = NULL;

                                               (yyval.pVoid) = (void *) hb_comp_LocalParams;
                                             ;}
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 564 "source\\compiler\\harbour.sly"
    {
                                               PLOCALPARAM pLocalParam = (PLOCALPARAM) hb_xgrab( sizeof( LOCALPARAM ) );

                                               pLocalParam->szName = (yyvsp[(3) - (4)].string);
                                               pLocalParam->cType  = hb_comp_cVarType;
                                               pLocalParam->pNext  = NULL;

                                               ( (PLOCALPARAM) (yyval.pVoid) )->pNext = pLocalParam;

                                               (yyval.pVoid) = (void *) pLocalParam;
                                             ;}
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 577 "source\\compiler\\harbour.sly"
    { (yyval.string) = NULL; ;}
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 579 "source\\compiler\\harbour.sly"
    {
                                                       PNAMESPACE pNamespace;

                                                       (yyval.string) = (yyvsp[(2) - (2)].string);

                                                       if( hb_comp_Namespaces.pCurrent )
                                                       {
                                                          hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_IMPLEMENTS_IN_NAMESPACE, hb_comp_Namespaces.pCurrent->szName, NULL );
                                                       }

                                                       /* Might be IMPLEMENTS NAMESPACE in same compilation as namespace definition */
                                                       pNamespace = hb_compNamespaceFind( hb_comp_Namespaces.pFirst, (yyval.string), NSTYPE_SPACE );

                                                       hb_compNamespaceNew( (yyval.string), NSTYPE_STEALTH );

                                                       if( pNamespace )
                                                       {
                                                          hb_comp_Namespaces.pCurrent->iID = pNamespace->iID;
                                                       }
                                                     ;}
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 606 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = TRUE; ;}
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 606 "source\\compiler\\harbour.sly"
    { ;}
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 607 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 608 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 609 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 610 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 92:

/* Line 1455 of yacc.c  */
#line 611 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 612 "source\\compiler\\harbour.sly"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) );
                                      else
                                         hb_compExprDelete( hb_compErrorSyntax( (yyvsp[(1) - (2)].asExpr) ) );
                                     ;}
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 617 "source\\compiler\\harbour.sly"
    { if( HB_COMP_ISSUPPORTED( HB_COMPFLAG_XBASE ) )
                                         hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) );
                                      else
                                         hb_compExprDelete( hb_compErrorSyntax( (yyvsp[(1) - (2)].asExpr) ) );
                                     ;}
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 622 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 623 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 624 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 625 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 626 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 627 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 628 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenStatement( (yyvsp[(1) - (2)].asExpr) ) ); ;}
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 629 "source\\compiler\\harbour.sly"
    { hb_compGenBreak(); hb_compGenPCode2( HB_P_DOSHORT, 0, ( BOOL ) 1 );
                                      hb_comp_functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 631 "source\\compiler\\harbour.sly"
    { hb_compLinePushIfInside(); ;}
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 631 "source\\compiler\\harbour.sly"
    { hb_compGenBreak(); hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr) ) );
                                           hb_compGenPCode2( HB_P_DOSHORT, 1, ( BOOL ) 1 );
                                           hb_comp_functions.pLast->bFlags |= FUN_BREAK_CODE;
                                         ;}
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 635 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = !hb_comp_bDebugInfo; ;}
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 635 "source\\compiler\\harbour.sly"
    { hb_compLoopExit(); hb_comp_functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 636 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = !hb_comp_bDebugInfo; ;}
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 636 "source\\compiler\\harbour.sly"
    { hb_compLoopLoop(); hb_comp_functions.pLast->bFlags |= FUN_BREAK_CODE; ;}
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 637 "source\\compiler\\harbour.sly"
    {
                        if( hb_comp_wSeqCounter )
                        {
                           hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }
                        hb_compGenPCode1( HB_P_ENDPROC );
                        if( (hb_comp_functions.pLast->bFlags & FUN_PROCEDURE) == 0 )
                        { /* return from a function without a return value */
                           hb_compGenWarning( hb_comp_szWarnings, 'W', HB_COMP_WARN_NO_RETURN_VALUE, NULL, NULL );
                        }
                        hb_comp_functions.pLast->bFlags |= FUN_WITH_RETURN;
                        hb_comp_bDontGenLineNum = FALSE;
                        hb_comp_functions.pLast->bFlags |= FUN_BREAK_CODE;
                     ;}
    break;

  case 110:

/* Line 1455 of yacc.c  */
#line 651 "source\\compiler\\harbour.sly"
    {  hb_compLinePushIfInside(); hb_comp_cVarType = ' '; ;}
    break;

  case 111:

/* Line 1455 of yacc.c  */
#line 653 "source\\compiler\\harbour.sly"
    {
                        hb_comp_cCastType = hb_comp_cVarType;
                        hb_comp_cVarType = ' ';

                        if( hb_comp_wSeqCounter )
                        {
                           hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "RETURN", NULL );
                        }

                        hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr) ) );   /* TODO: check if return value agree with declared value */

                        hb_compGenPCode2( HB_P_RETVALUE, HB_P_ENDPROC, ( BOOL ) 1 );

                        if( hb_comp_functions.pLast->bFlags & FUN_PROCEDURE )
                        { /* procedure returns a value */
                           hb_compGenWarning( hb_comp_szWarnings, 'W', HB_COMP_WARN_PROC_RETURN_VALUE, NULL, NULL );
                        }

                        hb_comp_functions.pLast->bFlags |= FUN_WITH_RETURN;
                        hb_comp_bDontGenLineNum = FALSE;
                        hb_comp_functions.pLast->bFlags |= FUN_BREAK_CODE;
                     ;}
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 675 "source\\compiler\\harbour.sly"
    { hb_compLinePushIfInside(); hb_comp_iVarScope = VS_PUBLIC; ;}
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 677 "source\\compiler\\harbour.sly"
    { hb_compRTVariableGen( hb_compExpr_IDs.__MVPUBLIC ); hb_comp_cVarType = ' ';  hb_comp_iVarScope = VS_NONE; ;}
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 678 "source\\compiler\\harbour.sly"
    { hb_compLinePushIfInside(); hb_comp_iVarScope = VS_PRIVATE; ;}
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 680 "source\\compiler\\harbour.sly"
    { hb_compRTVariableGen( hb_compExpr_IDs.__MVPRIVATE ); hb_comp_cVarType = ' '; hb_comp_iVarScope = VS_NONE; ;}
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 685 "source\\compiler\\harbour.sly"
    {
                                  if( hb_comp_szAnnounce == NULL )
                                  {
                                     /* check for reserved name
                                     * NOTE: Clipper doesn't check for it
                                     */
                                     char * szFunction = hb_compReservedName( (yyvsp[(2) - (2)].string) );

                                     if( szFunction )
                                     {
                                        hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_FUNC_RESERVED, szFunction, (yyvsp[(2) - (2)].string) );
                                     }

                                     hb_comp_szAnnounce = (yyvsp[(2) - (2)].string);
                                  }
                                  else
                                  {
                                     hb_compGenWarning( hb_comp_szWarnings, 'W', HB_COMP_WARN_DUPL_ANNOUNCE, (yyvsp[(2) - (2)].string), NULL );
                                  }
                                ;}
    break;

  case 122:

/* Line 1455 of yacc.c  */
#line 706 "source\\compiler\\harbour.sly"
    { if( hb_comp_bError == FALSE ) yyerror( NULL ); ;}
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 706 "source\\compiler\\harbour.sly"
    { yyclearin; yyerrok; ;}
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 707 "source\\compiler\\harbour.sly"
    { if( hb_comp_functions.pLast->bFlags & FUN_USES_LOCAL_PARAMS )
                          {
                             hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_PARAMETERS_NOT_ALLOWED, NULL, NULL );
                          }
                          else
                          {
                             hb_comp_functions.pLast->wParamNum = 0; hb_comp_iVarScope = ( VS_PRIVATE | VS_PARAMETER );
                          }
                        ;}
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 716 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_NONE; ;}
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 719 "source\\compiler\\harbour.sly"
    {
               hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (4)].asExpr) ) );
               hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr) ) );
               hb_compGenPCode1( HB_P_DIVERT );
             ;}
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 725 "source\\compiler\\harbour.sly"
    {
               hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (6)].asExpr) ) );
               hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (6)].asExpr) ) );
               hb_compExprDelete( hb_compExprGenPush( (yyvsp[(5) - (6)].asExpr) ) );
               hb_compGenPCode1( HB_P_DIVERTOF );
             ;}
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 733 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong(0); ;}
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 734 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 130:

/* Line 1455 of yacc.c  */
#line 737 "source\\compiler\\harbour.sly"
    { hb_compLinePushIfInside(); ;}
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 740 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 0; ;}
    break;

  case 133:

/* Line 1455 of yacc.c  */
#line 741 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 0; ;}
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 742 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 1; ;}
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 743 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 1; ;}
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 744 "source\\compiler\\harbour.sly"
    { char LineAsString[32]; hb_snprintf( LineAsString, sizeof( LineAsString ), "at line %i", s_iLastControlLine - 1 ); hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, LineAsString, NULL ); ;}
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 747 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 748 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 145:

/* Line 1455 of yacc.c  */
#line 759 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 146:

/* Line 1455 of yacc.c  */
#line 760 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) += (yyvsp[(2) - (2)].lNumber); ;}
    break;

  case 147:

/* Line 1455 of yacc.c  */
#line 763 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(1) - (1)].string), NULL, (HB_SYMBOLSCOPE) 0 ); ;}
    break;

  case 148:

/* Line 1455 of yacc.c  */
#line 764 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(2) - (2)].string), (yyvsp[(1) - (2)].string), (HB_SYMBOLSCOPE) 0 ); ;}
    break;

  case 149:

/* Line 1455 of yacc.c  */
#line 765 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(3) - (3)].string), NULL, (HB_SYMBOLSCOPE) 0 ); ;}
    break;

  case 150:

/* Line 1455 of yacc.c  */
#line 766 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(4) - (4)].string), (yyvsp[(3) - (4)].string), (HB_SYMBOLSCOPE) 0 ); ;}
    break;

  case 151:

/* Line 1455 of yacc.c  */
#line 769 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(1) - (1)].string), NULL, HB_FS_DEFERRED ); ;}
    break;

  case 152:

/* Line 1455 of yacc.c  */
#line 770 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(2) - (2)].string), (yyvsp[(1) - (2)].string), HB_FS_DEFERRED ); ;}
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 771 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(3) - (3)].string), NULL, HB_FS_DEFERRED ); ;}
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 772 "source\\compiler\\harbour.sly"
    { hb_compExternAdd( (yyvsp[(4) - (4)].string), (yyvsp[(3) - (4)].string), HB_FS_DEFERRED ); ;}
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 775 "source\\compiler\\harbour.sly"
    { (yyval.string) = (yyvsp[(1) - (1)].string); ;}
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 780 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[(1) - (1)].valDouble).dNumber, (yyvsp[(1) - (1)].valDouble).bWidth, (yyvsp[(1) - (1)].valDouble).bDec ); ;}
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 781 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valInteger).iNumber ); ;}
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 782 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valLong).lNumber ); ;}
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 785 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (2)].valInteger).iNumber ); ;}
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 786 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (2)].valLong).lNumber ); ;}
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 787 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( hb_compExprNewDouble( (yyvsp[(1) - (2)].valDouble).dNumber, (yyvsp[(1) - (2)].valDouble).bWidth, (yyvsp[(1) - (2)].valDouble).bDec ) ); ;}
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 797 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewNil(); ;}
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 800 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 805 "source\\compiler\\harbour.sly"
    {
                                         (yyval.asExpr) = hb_compExprNewString( (yyvsp[(1) - (1)].valChar).string, (yyvsp[(1) - (1)].valChar).length, (yyvsp[(1) - (1)].valChar).dealloc );
                                         (yyvsp[(1) - (1)].valChar).dealloc = FALSE;

                                         if( bTrancuateBaseArray && pBaseArrayName == NULL )
                                         {
                                            char *pCopy = hb_strdup( (yyvsp[(1) - (1)].valChar).string ), *pTmp = strchr( pCopy, '[' );

                                            if( pTmp )
                                            {
                                               pCopy[ pTmp - pCopy ] = '\0';
                                               pBaseArrayName = hb_compExprNewString( pCopy, pTmp - pCopy, TRUE );
                                            }

                                            bTrancuateBaseArray = FALSE;
                                         }
                                      ;}
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 824 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 829 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 834 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLogical( TRUE ); ;}
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 835 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLogical( FALSE ); ;}
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 838 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 843 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSelf(); ;}
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 846 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 852 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewDate( (yyvsp[(3) - (8)].asExpr), (yyvsp[(5) - (8)].asExpr), (yyvsp[(7) - (8)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(3) - (8)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (8)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (8)].asExpr) );
                              ;}
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 859 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 174:

/* Line 1455 of yacc.c  */
#line 863 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( (yyvsp[(3) - (13)].asExpr), (yyvsp[(5) - (13)].asExpr), (yyvsp[(7) - (13)].asExpr), (yyvsp[(8) - (13)].asExpr), (yyvsp[(10) - (13)].asExpr), (yyvsp[(12) - (13)].asExpr), 0, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (13)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (13)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (13)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(8) - (13)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(10) - (13)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(12) - (13)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 175:

/* Line 1455 of yacc.c  */
#line 877 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( (yyvsp[(3) - (11)].asExpr), (yyvsp[(5) - (11)].asExpr), (yyvsp[(7) - (11)].asExpr), (yyvsp[(8) - (11)].asExpr), (yyvsp[(10) - (11)].asExpr), NULL, 0, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (11)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (11)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (11)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(8) - (11)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(10) - (11)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 176:

/* Line 1455 of yacc.c  */
#line 890 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( (yyvsp[(3) - (14)].asExpr), (yyvsp[(5) - (14)].asExpr), (yyvsp[(7) - (14)].asExpr), (yyvsp[(8) - (14)].asExpr), (yyvsp[(10) - (14)].asExpr), (yyvsp[(12) - (14)].asExpr), 1, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(8) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(10) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(12) - (14)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 177:

/* Line 1455 of yacc.c  */
#line 904 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( (yyvsp[(3) - (12)].asExpr), (yyvsp[(5) - (12)].asExpr), (yyvsp[(7) - (12)].asExpr), (yyvsp[(8) - (12)].asExpr), (yyvsp[(10) - (12)].asExpr), NULL, 1, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(8) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(10) - (12)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 917 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( (yyvsp[(3) - (14)].asExpr), (yyvsp[(5) - (14)].asExpr), (yyvsp[(7) - (14)].asExpr), (yyvsp[(8) - (14)].asExpr), (yyvsp[(10) - (14)].asExpr), (yyvsp[(12) - (14)].asExpr), 2, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(8) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(10) - (14)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(12) - (14)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 931 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( (yyvsp[(3) - (12)].asExpr), (yyvsp[(5) - (12)].asExpr), (yyvsp[(7) - (12)].asExpr), (yyvsp[(8) - (12)].asExpr), (yyvsp[(10) - (12)].asExpr), NULL, 2, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(8) - (12)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(10) - (12)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 180:

/* Line 1455 of yacc.c  */
#line 944 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( NULL, NULL, NULL, (yyvsp[(3) - (8)].asExpr), (yyvsp[(5) - (8)].asExpr), (yyvsp[(7) - (8)].asExpr), 0, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (8)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (8)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (8)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 181:

/* Line 1455 of yacc.c  */
#line 955 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( NULL, NULL, NULL, (yyvsp[(3) - (6)].asExpr), (yyvsp[(5) - (6)].asExpr), NULL, 0, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (6)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (6)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 182:

/* Line 1455 of yacc.c  */
#line 965 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( NULL, NULL, NULL, (yyvsp[(3) - (9)].asExpr), (yyvsp[(5) - (9)].asExpr), (yyvsp[(7) - (9)].asExpr), 1, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (9)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (9)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (9)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 183:

/* Line 1455 of yacc.c  */
#line 976 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( NULL, NULL, NULL, (yyvsp[(3) - (7)].asExpr), (yyvsp[(5) - (7)].asExpr), NULL, 1, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (7)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (7)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 986 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( NULL, NULL, NULL, (yyvsp[(3) - (9)].asExpr), (yyvsp[(5) - (9)].asExpr), (yyvsp[(7) - (9)].asExpr), 2, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (9)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (9)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(7) - (9)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 997 "source\\compiler\\harbour.sly"
    { int iOk = 0;
                                (yyval.asExpr) = hb_compExprNewDateTime( NULL, NULL, NULL, (yyvsp[(3) - (7)].asExpr), (yyvsp[(5) - (7)].asExpr), NULL, 2, &iOk );
                                     hb_compExprDelete( (yyvsp[(3) - (7)].asExpr) );
                                     hb_compExprDelete( (yyvsp[(5) - (7)].asExpr) );
                                if( !iOk )
                                {
                                   (yyval.asExpr) = NULL;
                                }
                              ;}
    break;

  case 186:

/* Line 1455 of yacc.c  */
#line 1008 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 187:

/* Line 1455 of yacc.c  */
#line 1014 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[(2) - (3)].asExpr) ); ;}
    break;

  case 188:

/* Line 1455 of yacc.c  */
#line 1017 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compExpr_IDs.HASH ), (yyvsp[(2) - (3)].asExpr) ); ;}
    break;

  case 189:

/* Line 1455 of yacc.c  */
#line 1020 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 1021 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 1022 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprAddListExpr( (yyvsp[(1) - (5)].asExpr), (yyvsp[(3) - (5)].asExpr) ), (yyvsp[(5) - (5)].asExpr) ); ;}
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 1025 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 1030 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 1031 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 1034 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 196:

/* Line 1455 of yacc.c  */
#line 1039 "source\\compiler\\harbour.sly"
    {
                                   (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string) );

                                   if( hb_comp_BlocksList )
                                   {
                                      HB_CBVAR_PTR pVar = ( HB_CBVAR_PTR ) hb_comp_BlocksList->pBlock->value.asList.pIndex;

                                      while( pVar )
                                      {
                                         if( pVar->szName && HB_EXPR_ISEQUAL_IDS( (yyvsp[(1) - (1)].string), pVar->szName ) )
                                         {
                                            break;
                                         }

                                         pVar = pVar->pNext;
                                      }

                                      if( pVar == NULL )
                                      {
                                         s_bBlockDeclared = ( s_bBlockDeclared ||
                                                              hb_compLocalGetPos( (yyvsp[(1) - (1)].string) ) ||
                                                              hb_compStaticGetPos( (yyvsp[(1) - (1)].string), hb_comp_functions.pLast ) ||
                                                              hb_compVariableGetPos( hb_comp_pGlobals, (yyvsp[(1) - (1)].string) ) ||
                                                              ( hb_comp_bStartProc == FALSE && hb_compStaticGetPos( (yyvsp[(1) - (1)].string), hb_comp_functions.pFirst ) ) );
                                      }
                                   }
                                ;}
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 1068 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[(1) - (2)].string) ); ;}
    break;

  case 198:

/* Line 1455 of yacc.c  */
#line 1073 "source\\compiler\\harbour.sly"
    {
                                (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[(1) - (1)].string) );

                                if( hb_comp_BlocksList )
                                {
                                   s_bBlockDeclared = ( s_bBlockDeclared ||
                                                        hb_compLocalGetPos( (yyvsp[(1) - (1)].string) ) ||
                                                        hb_compStaticGetPos( (yyvsp[(1) - (1)].string), hb_comp_functions.pLast ) ||
                                                        hb_compVariableGetPos( hb_comp_pGlobals, (yyvsp[(1) - (1)].string) ) ||
                                                        ( hb_comp_bStartProc == FALSE && hb_compStaticGetPos( (yyvsp[(1) - (1)].string), hb_comp_functions.pFirst ) ) );
                                   s_bBlockMacro = TRUE;
                                }
                              ;}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 1086 "source\\compiler\\harbour.sly"
    { // Was: MACROTEXT befvore optimization.
                                //$$ = hb_compExprNewMacro( NULL, 0, $1 );
                                (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr);
                              ;}
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 1092 "source\\compiler\\harbour.sly"
    {
                           HB_EXPR_PTR pPlus = NULL, pLeft = NULL, pRight, pDestExpr;
                           char *pPosition = (yyvsp[(1) - (1)].string), *pStart, *sToken;
                           BOOL bVar;

                           if( *pPosition == '&' )
                           {
                              bVar = TRUE;
                              pPosition++;
                           }
                           else
                           {
                              bVar = FALSE;
                           }

                           pStart = pPosition;

                           while( *pPosition )
                           {
                              if( *pPosition == '&' )
                              {
                                 *pPosition = '\0';
                                 sToken = hb_compIdentifierNew( pStart, TRUE );
                                 //printf( "\n%s: '%s'\n", bVar ? "Var" : "String", sToken );
                                 pDestExpr = ( bVar ? hb_compExprNewVar( sToken ) : hb_compExprNewString( sToken, strlen( sToken ), FALSE ) );

                                 if( pPlus )
                                 {
                                    pRight = pDestExpr;
                                    pPlus  = hb_compExprSetOperand( hb_compExprNewPlus( pPlus ), pRight );
                                 }
                                 else if( pLeft )
                                 {
                                    pRight = pDestExpr;
                                    pPlus  = hb_compExprSetOperand( hb_compExprNewPlus( pLeft ), pRight );
                                 }
                                 else
                                 {
                                    pLeft = pDestExpr;
                                 }

                                 bVar = TRUE;
                                 pPosition++;
                                 pStart = pPosition;
                                 continue;
                              }
                              else if( *pPosition == '.' )
                              {
                                 if( ! bVar )
                                 {
                                    hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_SYNTAX, pPosition, NULL );
                                 }

                                 *pPosition = '\0';
                                 sToken = hb_compIdentifierNew( pStart, TRUE );
                                 //printf( "\n%s: '%s'\n", bVar ? "Var" : "String", sToken );
                                 pDestExpr = ( bVar ? hb_compExprNewVar( sToken ) : hb_compExprNewString( sToken, strlen( sToken ), FALSE ) );

                                 if( pPlus )
                                 {
                                    pRight = pDestExpr;
                                    pPlus  = hb_compExprSetOperand( hb_compExprNewPlus( pPlus ), pRight );
                                 }
                                 else if( pLeft )
                                 {
                                    pRight = pDestExpr;
                                    pPlus  = hb_compExprSetOperand( hb_compExprNewPlus( pLeft ), pRight );
                                 }
                                 else
                                 {
                                    pLeft = pDestExpr;
                                 }

                                 bVar = FALSE;
                                 pPosition++;
                                 pStart = pPosition;
                                 continue;
                              }

                              pPosition++;
                           }

                           sToken = hb_compIdentifierNew( pStart, TRUE );
                           //printf( "\nLast - %s: '%s'\n\n\n", bVar ? "Var" : "String", sToken );
                           pDestExpr = ( bVar ? hb_compExprNewVar( sToken ) : hb_compExprNewString( sToken, strlen( sToken ), FALSE ) );

                           if( pPlus )
                           {
                              pRight = pDestExpr;
                              pPlus  = hb_compExprSetOperand( hb_compExprNewPlus( pPlus ), pRight );
                           }
                           else if( pLeft )
                           {
                              pRight = pDestExpr;
                              pPlus  = hb_compExprSetOperand( hb_compExprNewPlus( pLeft ), pRight );
                           }
                           else
                           {
                              pPlus = pDestExpr;
                              hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_SYNTAX, sToken, NULL );
                           }

                           (yyval.asExpr) = hb_compExprNewMacro( hb_compExprNewList( pPlus ), 0, NULL );
                         ;}
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 1198 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 1203 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[(2) - (2)].asExpr), 0, NULL ); ;}
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 1206 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 1213 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAlias( hb_compExpr_IDs.FIELD_ ); ;}
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 1214 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(3) - (3)].asExpr); ;}
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 1219 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 1220 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 1221 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 1222 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 1223 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 1224 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 1225 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 1226 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 1227 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 1228 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 1229 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 1230 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 1231 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 1232 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( (yyvsp[(1) - (2)].asExpr) ); (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 1235 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 1236 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 1237 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 1240 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 1241 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 1242 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 1243 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 227:

/* Line 1455 of yacc.c  */
#line 1244 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 228:

/* Line 1455 of yacc.c  */
#line 1245 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 229:

/* Line 1455 of yacc.c  */
#line 1246 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 230:

/* Line 1455 of yacc.c  */
#line 1247 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 231:

/* Line 1455 of yacc.c  */
#line 1248 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 232:

/* Line 1455 of yacc.c  */
#line 1249 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 233:

/* Line 1455 of yacc.c  */
#line 1250 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 234:

/* Line 1455 of yacc.c  */
#line 1251 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 235:

/* Line 1455 of yacc.c  */
#line 1252 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 236:

/* Line 1455 of yacc.c  */
#line 1253 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 237:

/* Line 1455 of yacc.c  */
#line 1254 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 238:

/* Line 1455 of yacc.c  */
#line 1255 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 239:

/* Line 1455 of yacc.c  */
#line 1256 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(1) - (2)].asExpr) ); hb_compExprDelete((yyvsp[(2) - (2)].asExpr)); ;}
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 1257 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 1258 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 1259 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 1268 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 1269 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 1270 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 1271 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 1272 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 1273 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compErrorAlias( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 1278 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 1279 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 1280 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 1281 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 1282 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 254:

/* Line 1455 of yacc.c  */
#line 1283 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 255:

/* Line 1455 of yacc.c  */
#line 1284 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 256:

/* Line 1455 of yacc.c  */
#line 1285 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 1286 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 1287 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 1288 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 1289 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 1290 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 1291 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 263:

/* Line 1455 of yacc.c  */
#line 1292 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 264:

/* Line 1455 of yacc.c  */
#line 1293 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 265:

/* Line 1455 of yacc.c  */
#line 1294 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 266:

/* Line 1455 of yacc.c  */
#line 1295 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 267:

/* Line 1455 of yacc.c  */
#line 1298 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 1302 "source\\compiler\\harbour.sly"
    { (yyval.string) = (yyvsp[(1) - (2)].string); ;}
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 1303 "source\\compiler\\harbour.sly"
    { /* IdentName not NamespaceName is intentional - we don't want Global -> except when 1st! */
                                              if( (yyvsp[(1) - (3)].string)[0] == '*' )
                                              {
                                                 hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_NONMEMBER_NAMESPACE, (yyvsp[(2) - (3)].string), "*" );
                                                 (yyval.string) = (yyvsp[(1) - (3)].string);
                                              }
                                              else
                                              {
                                                 char *szNamespace = (char *) hb_xgrab( strlen( (yyvsp[(1) - (3)].string) ) + 1 + strlen( (yyvsp[(2) - (3)].string) ) + 1 );

                                                 hb_xstrcpy( szNamespace, (yyvsp[(1) - (3)].string), ".", (yyvsp[(2) - (3)].string), NULL );
                                                 (yyval.string) = hb_compIdentifierNew( szNamespace, FALSE );
                                              }
                                            ;}
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 1321 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( (yyvsp[(1) - (4)].string) ), (yyvsp[(3) - (4)].asExpr) ); ;}
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 1322 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewNamespaceFunName( (yyvsp[(1) - (5)].string), (yyvsp[(2) - (5)].string) ), (yyvsp[(4) - (5)].asExpr) ); ;}
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 1323 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr) ); ;}
    break;

  case 273:

/* Line 1455 of yacc.c  */
#line 1324 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr) ); ;}
    break;

  case 274:

/* Line 1455 of yacc.c  */
#line 1325 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 275:

/* Line 1455 of yacc.c  */
#line 1326 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 276:

/* Line 1455 of yacc.c  */
#line 1329 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 1330 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 1333 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 1334 "source\\compiler\\harbour.sly"
    {
                                          switch( (yyvsp[(2) - (2)].asExpr)->ExprType )
                                          {
                                             case HB_ET_VARIABLE:
                                               (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr);
                                               (yyval.asExpr)->ExprType = HB_ET_VARREF;
                                               (yyval.asExpr)->ValType = HB_EV_VARREF;
                                               break;

                                             case HB_ET_ALIASVAR:
                                             {
                                               char *szAlias = (yyvsp[(2) - (2)].asExpr)->value.asAlias.pAlias->value.asSymbol.szName;

                                               if( strcmp( szAlias, "M" ) == 0 || strncmp( szAlias, "MEMVAR", 4 > strlen( szAlias ) ? 4 : strlen( szAlias ) ) == 0 )
                                               {
                                                  (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr)->value.asAlias.pVar;

                                                  (yyvsp[(2) - (2)].asExpr)->value.asAlias.pVar = NULL;
                                                  hb_compExprDelete( (yyvsp[(2) - (2)].asExpr) );

                                                  if( (yyval.asExpr)->ExprType == HB_ET_MACRO )
                                                  {
                                                     (yyval.asExpr)->value.asMacro.SubType = HB_ET_MACRO_VAR_REF;
                                                  }
                                                  else
                                                  {
                                                     (yyval.asExpr)->ExprType = HB_ET_MEMVARREF;
                                                     (yyval.asExpr)->ValType = HB_EV_VARREF;
                                                  }
                                               }
                                               break;
                                             }

                                             case HB_ET_FUNCALL:
                                               (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr)->value.asFunCall.pFunName;

                                               (yyvsp[(2) - (2)].asExpr)->value.asFunCall.pFunName = NULL;
                                               hb_compExprDelete( (yyvsp[(2) - (2)].asExpr) );

                                               (yyval.asExpr)->ExprType = HB_ET_FUNREF;
                                               (yyval.asExpr)->ValType = HB_EV_FUNREF;
                                               break;

                                             case HB_ET_SEND:
                                               (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr);
                                               (yyval.asExpr)->value.asMessage.bByRef = TRUE;
                                               break;

                                             case HB_ET_MACRO:
                                               (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr);
                                               (yyval.asExpr)->value.asMacro.SubType = HB_ET_MACRO_VAR_REF;
                                               break;

                                             case HB_ET_ARRAYAT:
                                               (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr);
                                               (yyval.asExpr)->value.asList.bByRef = TRUE;
                                               break;

                                             default:
                                               hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_REFER, hb_compExprDescription( (yyvsp[(2) - (2)].asExpr) ), NULL );
                                               (yyval.asExpr) = NULL;
                                          }
                                       ;}
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 1399 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 1400 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 1403 "source\\compiler\\harbour.sly"
    { hb_compExprDelete((yyvsp[(1) - (1)].asExpr)); ;}
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 1404 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 284:

/* Line 1455 of yacc.c  */
#line 1405 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 1408 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 1413 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunName( (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 1414 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); (yyvsp[(1) - (1)].asExpr)->value.asMacro.SubType = HB_ET_MACRO_SYMBOL; ;}
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 1415 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); (yyvsp[(1) - (1)].asExpr)->value.asMacro.SubType = HB_ET_MACRO_SYMBOL; ;}
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 1418 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 1419 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 1420 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 1421 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 1422 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 1423 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 1424 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 1425 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 1426 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 1427 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 1428 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 1429 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 1430 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 1431 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 1432 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 1433 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 1434 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 306:

/* Line 1455 of yacc.c  */
#line 1435 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 307:

/* Line 1455 of yacc.c  */
#line 1436 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 308:

/* Line 1455 of yacc.c  */
#line 1437 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 1438 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 1439 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 1440 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewSendExp( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 1443 "source\\compiler\\harbour.sly"
    {
                                            if( hb_comp_wWithObjCounter == 0 )
                                            {
                                               if( (yyvsp[(2) - (2)].asExpr)->ExprType == HB_ET_FUNNAME )
                                                  hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_WITHOBJECT, (yyvsp[(2) - (2)].asExpr)->value.asSymbol.szName, NULL );
                                               else
                                                  hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_WITHOBJECT, "&", NULL );
                                            }
                                            (yyval.asExpr) = hb_compExprNewWithSendExp( (yyvsp[(2) - (2)].asExpr) );
                                         ;}
    break;

  case 313:

/* Line 1455 of yacc.c  */
#line 1455 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 314:

/* Line 1455 of yacc.c  */
#line 1461 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr) ); ;}
    break;

  case 315:

/* Line 1455 of yacc.c  */
#line 1464 "source\\compiler\\harbour.sly"
    {
                                           if( hb_comp_wWithObjCounter == 0 )
                                           {
                                              hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_WITHOBJECT, (yyvsp[(1) - (4)].asExpr)->value.asMessage.szMessage, NULL );
                                           }
                                           (yyval.asExpr) = hb_compExprNewWithMethodCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr) );
                                         ;}
    break;

  case 316:

/* Line 1455 of yacc.c  */
#line 1473 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 318:

/* Line 1455 of yacc.c  */
#line 1482 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 319:

/* Line 1455 of yacc.c  */
#line 1483 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 320:

/* Line 1455 of yacc.c  */
#line 1484 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 321:

/* Line 1455 of yacc.c  */
#line 1485 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 322:

/* Line 1455 of yacc.c  */
#line 1486 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 323:

/* Line 1455 of yacc.c  */
#line 1487 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 324:

/* Line 1455 of yacc.c  */
#line 1488 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 325:

/* Line 1455 of yacc.c  */
#line 1489 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 326:

/* Line 1455 of yacc.c  */
#line 1490 "source\\compiler\\harbour.sly"
    {hb_comp_cVarType = ' ';;}
    break;

  case 327:

/* Line 1455 of yacc.c  */
#line 1490 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 328:

/* Line 1455 of yacc.c  */
#line 1491 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 329:

/* Line 1455 of yacc.c  */
#line 1492 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 330:

/* Line 1455 of yacc.c  */
#line 1493 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 331:

/* Line 1455 of yacc.c  */
#line 1494 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 332:

/* Line 1455 of yacc.c  */
#line 1495 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 333:

/* Line 1455 of yacc.c  */
#line 1496 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 334:

/* Line 1455 of yacc.c  */
#line 1497 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 335:

/* Line 1455 of yacc.c  */
#line 1498 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 336:

/* Line 1455 of yacc.c  */
#line 1499 "source\\compiler\\harbour.sly"
    {hb_comp_cVarType = ' ';;}
    break;

  case 337:

/* Line 1455 of yacc.c  */
#line 1499 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 338:

/* Line 1455 of yacc.c  */
#line 1500 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 339:

/* Line 1455 of yacc.c  */
#line 1501 "source\\compiler\\harbour.sly"
    {hb_comp_cVarType = ' ';;}
    break;

  case 340:

/* Line 1455 of yacc.c  */
#line 1501 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 341:

/* Line 1455 of yacc.c  */
#line 1502 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 342:

/* Line 1455 of yacc.c  */
#line 1503 "source\\compiler\\harbour.sly"
    {hb_comp_cVarType = ' ';;}
    break;

  case 343:

/* Line 1455 of yacc.c  */
#line 1503 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 344:

/* Line 1455 of yacc.c  */
#line 1504 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 345:

/* Line 1455 of yacc.c  */
#line 1505 "source\\compiler\\harbour.sly"
    {hb_comp_cVarType = ' ';;}
    break;

  case 346:

/* Line 1455 of yacc.c  */
#line 1505 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 347:

/* Line 1455 of yacc.c  */
#line 1506 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 348:

/* Line 1455 of yacc.c  */
#line 1507 "source\\compiler\\harbour.sly"
    {hb_comp_cVarType = ' ';;}
    break;

  case 349:

/* Line 1455 of yacc.c  */
#line 1507 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 350:

/* Line 1455 of yacc.c  */
#line 1508 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 351:

/* Line 1455 of yacc.c  */
#line 1509 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 352:

/* Line 1455 of yacc.c  */
#line 1510 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 353:

/* Line 1455 of yacc.c  */
#line 1511 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 354:

/* Line 1455 of yacc.c  */
#line 1512 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 355:

/* Line 1455 of yacc.c  */
#line 1513 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 356:

/* Line 1455 of yacc.c  */
#line 1514 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 357:

/* Line 1455 of yacc.c  */
#line 1515 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 358:

/* Line 1455 of yacc.c  */
#line 1516 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 359:

/* Line 1455 of yacc.c  */
#line 1519 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 360:

/* Line 1455 of yacc.c  */
#line 1520 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 361:

/* Line 1455 of yacc.c  */
#line 1521 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 362:

/* Line 1455 of yacc.c  */
#line 1522 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' ';;}
    break;

  case 363:

/* Line 1455 of yacc.c  */
#line 1522 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 1523 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' ';;}
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 1523 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr); ;}
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 1526 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewEmpty(); ;}
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 1530 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 1537 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprListStrip( (yyvsp[(1) - (1)].asExpr), NULL ); ;}
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 1543 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[(0) - (1)].asExpr) ); ;}
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 1544 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[(0) - (1)].asExpr) ); ;}
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 1551 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 1552 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 1553 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 381:

/* Line 1455 of yacc.c  */
#line 1554 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 382:

/* Line 1455 of yacc.c  */
#line 1555 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 1556 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 1557 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 1558 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 1559 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 1560 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 1561 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 1562 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 1563 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 1564 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 1565 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 1566 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 1567 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 1568 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 1569 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 1570 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 1571 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 1572 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 400:

/* Line 1455 of yacc.c  */
#line 1573 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 1576 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 402:

/* Line 1455 of yacc.c  */
#line 1577 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 1580 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 1581 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 405:

/* Line 1455 of yacc.c  */
#line 1582 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 1589 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 1590 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 1591 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 1592 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 1593 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 1594 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 1595 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 1596 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 1597 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 1598 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 1599 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 1600 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); hb_comp_cCastType = hb_comp_cVarType; hb_comp_cVarType = ' ';;}
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 1601 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 1602 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 1603 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 1604 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 1605 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); hb_comp_cCastType = hb_comp_cVarType; hb_comp_cVarType = ' ';;}
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 1606 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 1607 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 1608 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); hb_comp_cCastType = hb_comp_cVarType; hb_comp_cVarType = ' ';;}
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 1609 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); hb_comp_cCastType = hb_comp_cVarType; hb_comp_cVarType = ' ';;}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 1610 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 1611 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 1614 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 1615 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 1616 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 1617 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 1618 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 1619 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 1620 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 1621 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 1622 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 1623 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 1624 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 1625 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 1626 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 1627 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 1628 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 1629 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 1630 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 1631 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 447:

/* Line 1455 of yacc.c  */
#line 1632 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 448:

/* Line 1455 of yacc.c  */
#line 1633 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 1634 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 1635 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 1636 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 1639 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 1640 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 1641 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 1642 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 1643 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 1644 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 1645 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 1646 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 1647 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 1648 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 1649 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 1650 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 1651 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 1652 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 1653 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 1654 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 1655 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 1656 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 1657 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 1658 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 1659 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 1660 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 1661 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 1664 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 1665 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 1666 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 1667 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 1668 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 1669 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 1670 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 1671 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 1672 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 1673 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 1674 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 1675 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 1676 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 1677 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 1678 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 1679 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 491:

/* Line 1455 of yacc.c  */
#line 1680 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 492:

/* Line 1455 of yacc.c  */
#line 1681 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 493:

/* Line 1455 of yacc.c  */
#line 1682 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 494:

/* Line 1455 of yacc.c  */
#line 1683 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 495:

/* Line 1455 of yacc.c  */
#line 1684 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 496:

/* Line 1455 of yacc.c  */
#line 1685 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 497:

/* Line 1455 of yacc.c  */
#line 1686 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 1689 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 1690 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 1691 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 1692 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 1693 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 1694 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 1695 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 1696 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 1697 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 1698 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 1699 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 1700 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 1701 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 1702 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 1703 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 513:

/* Line 1455 of yacc.c  */
#line 1704 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 514:

/* Line 1455 of yacc.c  */
#line 1705 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 1706 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 1707 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 1708 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 1709 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 1710 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 1711 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 1714 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 1715 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 1716 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 1717 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 1718 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 1719 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 1720 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 1721 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 1722 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 1723 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 1724 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 1725 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 1726 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 1727 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 1728 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 1729 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 537:

/* Line 1455 of yacc.c  */
#line 1730 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 1731 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 1732 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 1733 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 1734 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 542:

/* Line 1455 of yacc.c  */
#line 1735 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 543:

/* Line 1455 of yacc.c  */
#line 1736 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 544:

/* Line 1455 of yacc.c  */
#line 1739 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 545:

/* Line 1455 of yacc.c  */
#line 1740 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 546:

/* Line 1455 of yacc.c  */
#line 1741 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 1742 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 1743 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 1744 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 1745 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 1746 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 1747 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 553:

/* Line 1455 of yacc.c  */
#line 1748 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 554:

/* Line 1455 of yacc.c  */
#line 1749 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 555:

/* Line 1455 of yacc.c  */
#line 1750 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 1751 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 1752 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 1753 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 1754 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 1755 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 1756 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 1757 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 1758 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 1759 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 1760 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 1761 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 1764 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 1765 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 1766 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 1767 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 1768 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 1769 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 1770 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 1771 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 1772 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 1773 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 1774 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 1775 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 1776 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 1777 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 1778 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 1779 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 1780 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 1781 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 1782 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 1783 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 1784 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 1785 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 1786 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 1789 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 1790 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 1791 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 1792 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 1793 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 1794 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 1797 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 1798 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 1799 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 1800 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 1801 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 1802 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 1803 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewBitAnd( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 1804 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewBitOr( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 1805 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewBitXOr( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 1806 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewBitShiftR( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 1807 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewBitShiftL( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 1810 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 1811 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 1814 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 1815 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 1816 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 1817 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 1818 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 1819 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 1820 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 1821 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 1822 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 1823 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLike( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 1824 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMatch( (yyvsp[(1) - (3)].asExpr) ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 1827 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 1833 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(0) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 1834 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 1835 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewArrayAt( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr) ); ;}
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 1838 "source\\compiler\\harbour.sly"
    { pBaseArrayName = NULL; pGetVarArray = NULL; pGetArgList = NULL; pGetFunction = NULL; ;}
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 1842 "source\\compiler\\harbour.sly"
    { /* $4 */
                  (yyvsp[(2) - (3)].asExpr) = hb_compExprListStripSingle( (yyvsp[(2) - (3)].asExpr), NULL );
                  (yyvsp[(2) - (3)].asExpr) = HB_EXPR_USE( (yyvsp[(2) - (3)].asExpr), HB_EA_REDUCE );

                  switch( (yyvsp[(2) - (3)].asExpr)->ExprType )
                  {
                     case HB_ET_VARIABLE:
                     case HB_ET_ALIASVAR:
                     case HB_ET_SEND:
                     case HB_ET_WITHSEND:
                     {
                        BOOL bSetGet;

                        if( (yyvsp[(2) - (3)].asExpr)->ExprType == HB_ET_VARIABLE )
                        {
                           char *szName = (yyvsp[(2) - (3)].asExpr)->value.asSymbol.szName;

                           bSetGet = ( hb_compLocalGetPos( szName ) ||
                                       hb_compStaticGetPos( szName, hb_comp_functions.pLast ) ||
                                       hb_compVariableGetPos( hb_comp_pGlobals, szName ) ||
                                       ( hb_comp_bStartProc == FALSE && hb_compStaticGetPos( szName, hb_comp_functions.pFirst ) ) ||
                                       hb_compMemvarGetPos( szName, hb_comp_functions.pLast ) ||
                                       hb_compFieldGetPos( szName, hb_comp_functions.pLast ) );
                        }
                        else
                        {
                           bSetGet = TRUE;
                        }

                        if( bSetGet )
                        {
                           HB_EXPR_PTR pSetGetBlock, pGetVar = hb_compExprClone( (yyvsp[(2) - (3)].asExpr) ), pIsNil, pIfList, pIIF;

                           pIsNil       = hb_compExprSetOperand( hb_compExprNewEQ( hb_compExprNewVar( hb_compExpr_IDs._1 ) ), hb_compExprNewNil() );

                           pIfList      = hb_compExprNewList( pIsNil );
                           pIfList      = hb_compExprAddListExpr( pIfList, pGetVar );
                           pIfList      = hb_compExprAddListExpr( pIfList, hb_compExprAssign( hb_compExprClone( pGetVar ), hb_compExprNewVar( hb_compExpr_IDs._1 ) ) );

                           pIIF         = hb_compExprNewIIF( pIfList );

                           pSetGetBlock = hb_compExprNewCodeBlock();
                           pSetGetBlock = hb_compExprCBVarAdd( pSetGetBlock, hb_compExpr_IDs._1, ' ' );
                           pSetGetBlock = hb_compExprAddListExpr( pSetGetBlock, pIIF );

                           pGetArgList  = hb_compExprNewArgList( pSetGetBlock );
                        }
                        else
                        {
                           pGetArgList = hb_compExprNewArgList( hb_compExprNewNil() );
                        }

                        break;
                     }

                     case HB_ET_MACRO:
                        pGetArgList = hb_compExprNewArgList( hb_compExprNewNil() );

                        break;

                     case HB_ET_ARRAYAT:
                     {
                        HB_EXPR_PTR pArrayVar, pSetGetBlock;

                        bTrancuateBaseArray = TRUE;

                        pGetVarArray = (yyvsp[(2) - (3)].asExpr);
                        pGetFunction = hb_compExprNewFunName( hb_compExpr_IDs.__GETA );

                        pArrayVar = pGetVarArray->value.asList.pExprList;
                        while( pArrayVar->ExprType == HB_ET_ARRAYAT )
                        {
                           pArrayVar = pArrayVar->value.asList.pExprList;
                        }

                        if( pArrayVar->ExprType == HB_ET_MACRO )
                        {
                           if( pArrayVar->value.asMacro.pExprList )
                           {
                              pBaseArrayName = hb_compExprClone( pArrayVar->value.asMacro.pExprList );
                           }
                           else
                           {
                              if( pArrayVar->value.asMacro.cMacroOp )
                              {
                                 //printf( "MacroVar: '%s'\n", pArrayVar->value.asMacro.szMacro );
                                 pBaseArrayName = hb_compExprNewVar( pArrayVar->value.asMacro.szMacro );
                              }
                              else
                              {
                                 //printf( "MacroText: '%s'\n", pArray->value.asMacro.szMacro );
                                 pBaseArrayName = hb_compExprNewString( pArrayVar->value.asMacro.szMacro, strlen( pArrayVar->value.asMacro.szMacro ), FALSE );
                              }
                           }

                           pSetGetBlock = hb_compExprNewNil();
                        }
                        else
                        {
                           pSetGetBlock = hb_compExprAddListExpr( hb_compExprNewCodeBlock(), hb_compExprClone( pArrayVar ) );
                        }

                        pGetArgList = hb_compExprNewArgList( pSetGetBlock );

                        break;
                     }

                     default:
                        hb_compErrorLValue( (yyvsp[(2) - (3)].asExpr) );
                  }
               ;}
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 1955 "source\\compiler\\harbour.sly"
    { /* $6 */
                  HB_EXPR_PTR pVarName;

                  switch( (yyvsp[(2) - (5)].asExpr)->ExprType )
                  {
                     case HB_ET_VARIABLE:
                     case HB_ET_ALIASVAR:
                     case HB_ET_SEND:
                     case HB_ET_WITHSEND:
                        pVarName = hb_compExprClone( (yyvsp[(5) - (5)].asExpr) );
                        break;

                     case HB_ET_MACRO:
                     {
                        if( (yyvsp[(2) - (5)].asExpr)->value.asMacro.cMacroOp == '&' )
                        {
                           pVarName = hb_compExprNewVar( (yyvsp[(2) - (5)].asExpr)->value.asMacro.szMacro );
                        }
                        else if( (yyvsp[(2) - (5)].asExpr)->value.asMacro.szMacro )
                        {
                           pVarName = hb_compExprClone( (yyvsp[(2) - (5)].asExpr)->value.asMacro.pExprList );
                        }
                        else
                        {
                           /*
                              Clipper allways error, but we can handle simple macros or macros with no declared symbols!!!
                              hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_GET_COMPLEX_MACRO, NULL, NULL );
                            */
                           pVarName = hb_compExprClone( (yyvsp[(5) - (5)].asExpr) );
                        }
                        break;
                     }


                     default:
                     {
                        /* HB_ET_ARRAYAT */
                        if( pGetVarArray )
                        {
                           if( pBaseArrayName )
                           {
                              pVarName = pBaseArrayName;
                              pBaseArrayName = NULL;
                           }
                           else
                           {
                              pVarName = hb_compExprClone( (yyvsp[(5) - (5)].asExpr) );
                           }

                           bTrancuateBaseArray = FALSE;
                           break;
                        }
                        else
                        {
                           pVarName = NULL;
                           hb_compErrorLValue( (yyvsp[(2) - (5)].asExpr) );
                           return 0;
                        }
                     }
                  }

                  hb_compExprAddListExpr( pGetArgList, pVarName ); /* Var Name   */
               ;}
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 2020 "source\\compiler\\harbour.sly"
    { /* $9 */
                  hb_compExprAddListExpr( pGetArgList, (yyvsp[(8) - (8)].asExpr) ); /* Picture    */
               ;}
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 2025 "source\\compiler\\harbour.sly"
    { /* $12 */
                  hb_compExprAddListExpr( pGetArgList, (yyvsp[(11) - (11)].asExpr) ); /* ValidBlock */
               ;}
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 2030 "source\\compiler\\harbour.sly"
    { /* $15 */
                  hb_compExprAddListExpr( pGetArgList, (yyvsp[(14) - (14)].asExpr) ); /* WhenBlock  */

                  if( pGetVarArray )
                  {
                    HB_EXPR_PTR pArrayVar, pIndex, pTmp;

                    // We need to scan the Array backwards and build a list of the Index Expressions.
                    pArrayVar = pGetVarArray->value.asList.pExprList;
                    pIndex    = hb_compExprClone( pGetVarArray->value.asList.pIndex );

                    while( pArrayVar->ExprType == HB_ET_ARRAYAT )
                    {
                       pTmp = hb_compExprClone( pArrayVar->value.asList.pIndex );
                       pTmp->pNext = pIndex;
                       pIndex = pTmp;

                       pArrayVar = pArrayVar->value.asList.pExprList;
                    }

                    pIndex = hb_compExprNewList( pIndex );

                    /* Array with Index Expressions as 6th parameter */
                    hb_compExprAddListExpr( pGetArgList, hb_compExprNewArray( pIndex ) );
                  }
               ;}
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 2058 "source\\compiler\\harbour.sly"
    { /* $17 */
                  if( pGetFunction == NULL )
                  {
                     pGetFunction = hb_compExprNewFunName( hb_compExpr_IDs.__GET );
                  }

                  if( pBaseArrayName )
                  {
                     hb_compExprDelete( pBaseArrayName );
                  }

                  hb_compExprDelete( (yyvsp[(2) - (17)].asExpr) );
                  hb_compExprDelete( (yyvsp[(5) - (17)].asExpr) );

                  (yyval.asExpr) = hb_compExprNewFunCall( pGetFunction, pGetArgList );
               ;}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 2076 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( pGetArgList, (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 2077 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( pGetArgList, (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 2080 "source\\compiler\\harbour.sly"
    { /* Nothing*/ ;}
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 2086 "source\\compiler\\harbour.sly"
    {
                  (yyval.asExpr) = hb_compExprNewCodeBlock();

                  if( hb_comp_BlocksList == NULL )
                  {
                     hb_comp_BlocksList = (PBLOCKSLIST) hb_xgrab( sizeof( BLOCKSLIST ) );
                     hb_comp_BlocksList->pBlock = (yyval.asExpr);
                     hb_comp_BlocksList->pOuter = NULL;
                  }
                  else
                  {
                     PBLOCKSLIST pBlocksList = (PBLOCKSLIST) hb_xgrab( sizeof( BLOCKSLIST ) );

                     pBlocksList->pBlock = (yyval.asExpr);
                     pBlocksList->pOuter = hb_comp_BlocksList;

                     hb_comp_BlocksList = pBlocksList;
                  }
               ;}
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 2108 "source\\compiler\\harbour.sly"
    {
                  PBLOCKSLIST pDelete = hb_comp_BlocksList;

                  if( s_bBlockMacro )
                  {
                     if( pBlockSimple && pBlockSimple->ExprType == HB_ET_MACRO && pBlockSimple->value.asMacro.SubType == HB_ET_MACRO_VAR )
                     {
                        HB_EXPR_PTR pMacroVar, pBlockString;

                        pMacroVar    = hb_compExprNewVar( pBlockSimple->value.asMacro.szMacro );
                        pBlockString = hb_compExprNewString( "{||", 3, FALSE );
                        pBlockString = hb_compExprSetOperand( hb_compExprNewPlus( pBlockString ), pMacroVar );
                        pBlockString = hb_compExprSetOperand( hb_compExprNewPlus( pBlockString ), hb_compExprNewString( "}", 1, FALSE ) );
                        (yyval.asExpr)   = hb_compExprNewMacro( pBlockString, 0, NULL );
                        hb_compExprDelete( (yyvsp[(3) - (7)].asExpr) );
                     }
                     else if( s_bBlockDeclared )
                     {
                        hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_BLOCK, NULL, NULL );
                        (yyval.asExpr) = (yyvsp[(3) - (7)].asExpr);
                     }
                     else
                     {
                        char *szLastBlock = hb_comp_SLX_LastBlock( FALSE );
                        (yyval.asExpr) = hb_compExprNewMacro( hb_compExprNewString( szLastBlock, strlen( szLastBlock ), FALSE ), 0, NULL );
                        hb_compExprDelete( (yyvsp[(3) - (7)].asExpr) );
                     }
                  }
                  else
                  {
                     (yyval.asExpr) = (yyvsp[(3) - (7)].asExpr);
                  }

                  hb_comp_BlocksList = hb_comp_BlocksList->pOuter;

                  hb_xfree( (void *) pDelete );

                  if( hb_comp_BlocksList == NULL )
                  {
                     hb_comp_SLX_LastBlock( TRUE ); s_bBlockMacro = FALSE; s_bBlockDeclared = FALSE;
                  }
               ;}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 2152 "source\\compiler\\harbour.sly"
    {
                             HB_CBVAR_PTR pVar = (HB_CBVAR_PTR) (yyvsp[(1) - (1)].asExpr)->value.asList.pIndex;

                             while( pVar->pNext )
                             {
                                pVar = pVar->pNext;
                             }

                             if( pVar->szName == NULL )
                             {
                                if( pVar == (HB_CBVAR_PTR) (yyvsp[(1) - (1)].asExpr)->value.asList.pIndex )
                                {
                                   //{|| ...} not realy a nameless argument.
                                }
                                else
                                {
                                   hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_NAMELESS_PARAM, NULL, NULL );
                                   hb_compExprDelete( (yyvsp[(1) - (1)].asExpr) );
                                   (yyval.asExpr) = NULL;
                                }
                             }
                           ;}
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 2176 "source\\compiler\\harbour.sly"
    { hb_compCodeBlockStart(); hb_comp_iVarScope = VS_PARAMETER; ;}
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 2179 "source\\compiler\\harbour.sly"
    {
                  (yyval.asExpr) = hb_compCodeBlockEnd( TRUE );
               ;}
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 2186 "source\\compiler\\harbour.sly"
    {
                   while( hb_comp_LocalParams )
                   {
                      PLOCALPARAM pDelete = hb_comp_LocalParams;

                      hb_compVariableAdd( hb_comp_LocalParams->szName, hb_comp_LocalParams->cType );

                      hb_comp_LocalParams = hb_comp_LocalParams->pNext;
                      hb_xfree( (void *) pDelete );
                   }
                 ;}
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 2201 "source\\compiler\\harbour.sly"
    { pBlockSimple = (yyvsp[(1) - (1)].asExpr);   (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(-2) - (1)].asExpr), (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 2202 "source\\compiler\\harbour.sly"
    { pBlockSimple = NULL; (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(-2) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 2209 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (2)].asExpr), (yyvsp[(1) - (2)].string),    hb_comp_cVarType ); hb_comp_cVarType = ' '; ;}
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 2210 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (0)].asExpr), NULL , hb_comp_cVarType ); hb_comp_cVarType = ' '; ;}
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 2211 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].string),    hb_comp_cVarType ); hb_comp_cVarType = ' '; ;}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 2212 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_LOCAL; (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(1) - (2)].asExpr), NULL,  hb_comp_cVarType ); hb_comp_cVarType = ' '; ;}
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 2222 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 2225 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 650:

/* Line 1455 of yacc.c  */
#line 2228 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 2231 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 2234 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 2235 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 2236 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 2237 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 2240 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 2243 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 2246 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 2249 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 2252 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 2253 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 2256 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewIIF( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 2259 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope =  VS_LOCAL; hb_compLinePush(); ;}
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 2259 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 2260 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_STATIC; hb_compLinePush(); ;}
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 2260 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 2261 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_GLOBAL; hb_compLinePush(); ;}
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 2261 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 2262 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_EXTERNGLOBAL; hb_compLinePush(); ;}
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 2262 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 2265 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = 1; ;}
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 2266 "source\\compiler\\harbour.sly"
    { (yyval.iNumber)++; ;}
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 2269 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = 1; ;}
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 2270 "source\\compiler\\harbour.sly"
    { (yyval.iNumber)++; ;}
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 2280 "source\\compiler\\harbour.sly"
    { hb_compRTVariableAdd( hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr) ), FALSE ); ;}
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 2282 "source\\compiler\\harbour.sly"
    { hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (4)].asExpr) ) );
                 hb_compRTVariableAdd( hb_compExprNewRTVar( NULL, (yyvsp[(1) - (4)].asExpr) ), TRUE );
               ;}
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 2286 "source\\compiler\\harbour.sly"
    {
                  USHORT uCount = (USHORT) hb_compExprListLen( (yyvsp[(2) - (2)].asExpr) );
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (2)].asExpr) ) );
                  hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), ( BOOL ) 1 );
                  hb_compRTVariableAdd( hb_compExprNewRTVar( NULL, (yyvsp[(1) - (2)].asExpr) ), TRUE );
               ;}
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 2293 "source\\compiler\\harbour.sly"
    {
                  USHORT uCount = (USHORT) hb_compExprListLen( (yyvsp[(2) - (3)].asExpr) );
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr) ) );
                  hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), ( BOOL ) 1 );
                  hb_compRTVariableAdd( hb_compExprNewRTVar( NULL, (yyvsp[(1) - (3)].asExpr) ), TRUE );
               ;}
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 2301 "source\\compiler\\harbour.sly"
    { hb_compVariableAdd( (yyvsp[(1) - (2)].string), hb_comp_cVarType ); ;}
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 2302 "source\\compiler\\harbour.sly"
    {
                  if( hb_comp_iVarScope == VS_STATIC )
                  {
                     hb_compStaticDefStart();   /* switch to statics pcode buffer */
                     hb_compStaticDefEnd();
                     hb_compGenStaticName( (yyvsp[(1) - (3)].string) );
                  }
                  else if( hb_comp_iVarScope == VS_GLOBAL || hb_comp_iVarScope == VS_EXTERNGLOBAL )
                  {
                     /* hb_comp_pGlobals can be NULL after a "Misplaced GLOBAL"
                      * error in hb_compVariableAdd() call above.
                      * hb_compGenGlobalName() does not expect such situation */
                     if( hb_comp_pGlobals )
                     {
                        hb_compGlobalsDefStart();   /* switch to globals pcode buffer */
                        hb_compGlobalsDefEnd();
                        hb_compGenGlobalName( (yyvsp[(1) - (3)].string) );
                     }
                  }
                  else if( hb_comp_iVarScope == VS_PUBLIC || hb_comp_iVarScope == VS_PRIVATE )
                  {
                     hb_compRTVariableAdd( hb_compExprNewRTVar( (yyvsp[(1) - (3)].string), NULL ), FALSE );
                  }
               ;}
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 2327 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = hb_comp_iVarScope;
                                hb_compVariableAdd( (yyvsp[(1) - (2)].string), hb_comp_cVarType );
                              ;}
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 2330 "source\\compiler\\harbour.sly"
    {hb_comp_cVarType = ' ';;}
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 2331 "source\\compiler\\harbour.sly"
    {
                  hb_comp_cCastType = hb_comp_cVarType;
                  hb_comp_cVarType = ' ';

                  hb_comp_iVarScope = (yyvsp[(3) - (6)].iNumber);

                  if( hb_comp_iVarScope == VS_STATIC )
                  {
                     hb_compStaticDefStart();   /* switch to statics pcode buffer */
                     hb_compExprDelete( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[(1) - (6)].string) ), (yyvsp[(6) - (6)].asExpr) ) ) );
                     hb_compStaticDefEnd();
                     hb_compGenStaticName( (yyvsp[(1) - (6)].string) );
                  }
                  else if( hb_comp_iVarScope == VS_GLOBAL )
                  {
                     hb_compGlobalsDefStart();   /* switch to globals pcode buffer */
                     hb_compExprDelete( hb_compExprGenStatement( hb_compExprAssignStatic( hb_compExprNewVar( (yyvsp[(1) - (6)].string) ), (yyvsp[(6) - (6)].asExpr) ) ) );
                     hb_compGlobalsDefEnd();
                     hb_compGenGlobalName( (yyvsp[(1) - (6)].string) );
                  }
                  else if( hb_comp_iVarScope == VS_EXTERNGLOBAL )
                  {
                     hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXTERNGLOBAL_ASSIGN, (yyvsp[(1) - (6)].string), NULL );
                  }
                  else if( hb_comp_iVarScope == VS_PUBLIC || hb_comp_iVarScope == VS_PRIVATE )
                  {
                     hb_compExprDelete( hb_compExprGenPush( (yyvsp[(6) - (6)].asExpr) ) );
                     hb_compRTVariableAdd( hb_compExprNewRTVar( (yyvsp[(1) - (6)].string), NULL ), TRUE );
                  }
                  else
                  {
                     hb_compExprDelete( hb_compExprGenStatement( hb_compExprAssign( hb_compExprNewVar( (yyvsp[(1) - (6)].string) ), (yyvsp[(6) - (6)].asExpr) ) ) );
                  }
                  hb_comp_iVarScope = (yyvsp[(3) - (6)].iNumber);
               ;}
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 2367 "source\\compiler\\harbour.sly"
    { hb_compVariableDim( (yyvsp[(1) - (2)].string), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 2368 "source\\compiler\\harbour.sly"
    { hb_compVariableDim( (yyvsp[(1) - (3)].string), (yyvsp[(2) - (3)].asExpr) ); ;}
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 2374 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (2)].asExpr); ;}
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 2377 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 2378 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 2379 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr) ); ;}
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 2383 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_FIELD; ;}
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 2383 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 2386 "source\\compiler\\harbour.sly"
    { (yyval.iNumber)=hb_compFieldsCount(); hb_compVariableAdd( (yyvsp[(1) - (2)].string), hb_comp_cVarType ); ;}
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 2387 "source\\compiler\\harbour.sly"
    { hb_compVariableAdd( (yyvsp[(3) - (4)].string), hb_comp_cVarType ); ;}
    break;

  case 695:

/* Line 1455 of yacc.c  */
#line 2388 "source\\compiler\\harbour.sly"
    { hb_compFieldSetAlias( (yyvsp[(3) - (3)].string), (yyvsp[(1) - (3)].iNumber) ); ;}
    break;

  case 696:

/* Line 1455 of yacc.c  */
#line 2391 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_MEMVAR; ;}
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 2391 "source\\compiler\\harbour.sly"
    { hb_comp_cVarType = ' '; ;}
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 2394 "source\\compiler\\harbour.sly"
    { hb_compVariableAdd( (yyvsp[(1) - (2)].string), hb_comp_cVarType ); ;}
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 2395 "source\\compiler\\harbour.sly"
    { hb_compVariableAdd( (yyvsp[(3) - (4)].string), hb_comp_cVarType ); ;}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 2398 "source\\compiler\\harbour.sly"
    { hb_compDeclaredAdd( (yyvsp[(2) - (3)].string) ); hb_comp_szDeclaredFun = (yyvsp[(2) - (3)].string); ;}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 2399 "source\\compiler\\harbour.sly"
    {
               if( hb_comp_pLastDeclared )
               {
                 hb_comp_pLastDeclared->cType = hb_comp_cVarType;

                 if ( toupper( hb_comp_cVarType ) == 'S' )
                 {
                   hb_comp_pLastDeclared->Extended.pClass = hb_compClassFind( hb_comp_szFromClass );
                   if( ! hb_comp_pLastDeclared->Extended.pClass )
                   {
                     hb_compGenWarning( hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, hb_comp_szFromClass, hb_comp_pLastDeclared->szName );
                     hb_comp_pLastDeclared->cType = ( isupper(  ( BYTE ) hb_comp_cVarType ) ? 'O' : 'o' );
                   }

                   /* Resetting */
                   hb_comp_szFromClass = NULL;
                 }
               }

               hb_comp_szDeclaredFun = NULL;
               hb_comp_cVarType = ' ';
               hb_comp_iVarScope = VS_NONE;
             ;}
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 2422 "source\\compiler\\harbour.sly"
    { hb_comp_pLastClass = hb_compClassAdd( (yyvsp[(2) - (2)].string) ); ;}
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 2422 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_NONE; ;}
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 2423 "source\\compiler\\harbour.sly"
    { hb_comp_pLastClass = hb_compClassAdd( (yyvsp[(2) - (3)].string) ); hb_comp_iVarScope = VS_NONE; ;}
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 2424 "source\\compiler\\harbour.sly"
    { hb_comp_iVarScope = VS_NONE; hb_compLinePushIfInside(); ;}
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 2425 "source\\compiler\\harbour.sly"
    { hb_comp_cDataListType = hb_comp_cVarType; ;}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 2425 "source\\compiler\\harbour.sly"
    { hb_comp_cDataListType = 0; hb_comp_iVarScope = VS_NONE; hb_compLinePushIfInside(); ;}
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 2438 "source\\compiler\\harbour.sly"
    { hb_comp_pLastMethod = hb_compMethodAdd( hb_comp_pLastClass, (yyvsp[(1) - (2)].string) ); ;}
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 2439 "source\\compiler\\harbour.sly"
    {
               if( hb_comp_pLastMethod )
               {
                 hb_comp_pLastMethod->cType = hb_comp_cVarType;
                 if ( toupper( hb_comp_cVarType ) == 'S' )
                 {
                   hb_comp_pLastMethod->Extended.pClass = hb_compClassFind( hb_comp_szFromClass );
                   if( ! hb_comp_pLastMethod->Extended.pClass )
                   {
                     hb_compGenWarning( hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, hb_comp_szFromClass, hb_comp_pLastMethod->szName );
                     hb_comp_pLastMethod->cType = ( isupper( ( BYTE ) hb_comp_cVarType ) ? 'O' : 'o' );
                   }

                   hb_comp_szFromClass = NULL;
                 }
               }
               hb_comp_pLastMethod = NULL;
               hb_comp_cVarType = ' ';
             ;}
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 2460 "source\\compiler\\harbour.sly"
    { hb_comp_pLastMethod = hb_compMethodAdd( hb_comp_pLastClass, (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 2461 "source\\compiler\\harbour.sly"
    {
               if( hb_comp_pLastMethod )
               {
                 PCOMCLASS pClass;
                 char * szSetData = ( char * ) hb_xgrab( strlen( (yyvsp[(1) - (3)].string) ) + 2 );

                 /* List Type overrides if exists. */
                 if( hb_comp_cDataListType )
                 {
                    hb_comp_cVarType = hb_comp_cDataListType;
                 }

                 hb_comp_pLastMethod->cType = hb_comp_cVarType;

                 if ( toupper( hb_comp_cVarType ) == 'S' )
                 {
                   pClass = hb_compClassFind( hb_comp_szFromClass );
                   hb_comp_pLastMethod->Extended.pClass = pClass;
                   if( ! hb_comp_pLastMethod->Extended.pClass )
                   {
                     hb_compGenWarning( hb_comp_szWarnings, 'W', HB_COMP_WARN_CLASS_NOT_FOUND, hb_comp_szFromClass, hb_comp_pLastMethod->szName );
                     hb_comp_pLastMethod->cType = ( isupper( ( BYTE ) hb_comp_cVarType ) ? 'O' :'o' );
                   }
                 }
                 else
                 {
                   pClass = NULL;
                 }

                 hb_snprintf( szSetData, strlen( (yyvsp[(1) - (3)].string) ) + 2, "_%s", (yyvsp[(1) - (3)].string) );

                 hb_comp_pLastMethod = hb_compMethodAdd( hb_comp_pLastClass, szSetData );
                 hb_comp_pLastMethod->cType = hb_comp_cVarType;
                 hb_comp_pLastMethod->iParamCount = 1;

                 hb_comp_pLastMethod->cParamTypes = ( BYTE * ) hb_xgrab( 1 );
                 hb_comp_pLastMethod->cParamTypes[0] = hb_comp_cVarType;

                 hb_comp_pLastMethod->pParamClasses = ( PCOMCLASS * ) hb_xgrab( sizeof( COMCLASS ) );
                 hb_comp_pLastMethod->pParamClasses[0] = pClass;

                 if ( toupper( hb_comp_cVarType ) == 'S' )
                 {
                   hb_comp_pLastMethod->Extended.pClass = pClass;
                   hb_comp_szFromClass = NULL;
                 }
               }

               hb_comp_pLastMethod = NULL;
               hb_comp_cVarType = ' ';
             ;}
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 2514 "source\\compiler\\harbour.sly"
    {;}
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 2520 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(1) - (2)].string), hb_comp_cVarType ); ;}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 2521 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(2) - (3)].string), hb_comp_cVarType + VT_OFFSET_BYREF ); ;}
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 2522 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(2) - (5)].string), 'F' ); ;}
    break;

  case 725:

/* Line 1455 of yacc.c  */
#line 2523 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(3) - (4)].string), hb_comp_cVarType ); ;}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 2524 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(4) - (5)].string), hb_comp_cVarType + VT_OFFSET_BYREF ); ;}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 2525 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(4) - (7)].string), 'F' ); ;}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 2528 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(2) - (3)].string), hb_comp_cVarType + VT_OFFSET_OPTIONAL ); ;}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 2529 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(3) - (4)].string), hb_comp_cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 2530 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(3) - (6)].string), hb_comp_cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 2531 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(4) - (5)].string), hb_comp_cVarType + VT_OFFSET_OPTIONAL ); ;}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 2532 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(5) - (6)].string), hb_comp_cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 2533 "source\\compiler\\harbour.sly"
    { hb_compDeclaredParameterAdd( (yyvsp[(5) - (8)].string), hb_comp_cVarType + VT_OFFSET_OPTIONAL + VT_OFFSET_BYREF ); ;}
    break;

  case 734:

/* Line 1455 of yacc.c  */
#line 2536 "source\\compiler\\harbour.sly"
    { hb_compEnumAdd( (yyvsp[(2) - (2)].string) ); ;}
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 2539 "source\\compiler\\harbour.sly"
    { hb_compEnumMemberAdd( (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 737:

/* Line 1455 of yacc.c  */
#line 2540 "source\\compiler\\harbour.sly"
    { hb_compEnumMemberAdd( (yyvsp[(3) - (3)].string) ); ;}
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 2553 "source\\compiler\\harbour.sly"
    { hb_compGenJumpHere( (yyvsp[(1) - (2)].iNumber) ); s_iControlLevel--; ;}
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 2554 "source\\compiler\\harbour.sly"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].iNumber) ); s_iControlLevel--; ;}
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 2555 "source\\compiler\\harbour.sly"
    { hb_compGenJumpHere( (yyvsp[(1) - (3)].iNumber) ); hb_compElseIfFix( (yyvsp[(2) - (3)].pVoid) ); s_iControlLevel--; ;}
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 2556 "source\\compiler\\harbour.sly"
    { hb_compGenJumpHere( (yyvsp[(1) - (4)].iNumber) ); hb_compElseIfFix( (yyvsp[(2) - (4)].pVoid) ); s_iControlLevel--; ;}
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 2559 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 0; ;}
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 2560 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = (yyvsp[(1) - (1)].lNumber); ;}
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 2563 "source\\compiler\\harbour.sly"
    {
                              ++hb_comp_wIfCounter; hb_compLinePush();

                              if( s_iControlLevel++ == 0 )
                              {
                                 s_iLastControlLine = hb_comp_iLine ;
                              }
                           ;}
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 2572 "source\\compiler\\harbour.sly"
    {
                              hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (4)].asExpr) ) ); (yyval.iNumber) = hb_compGenJumpFalse( 0 );
                           ;}
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 2576 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = hb_compGenJump( 0 ); hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber) ); ;}
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 2579 "source\\compiler\\harbour.sly"
    { hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 2583 "source\\compiler\\harbour.sly"
    { hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE; hb_compLinePush(); ;}
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 2584 "source\\compiler\\harbour.sly"
    { hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr) ) );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0 );
                ;}
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 2589 "source\\compiler\\harbour.sly"
    { (yyval.pVoid) = hb_compElseIfGen( NULL, hb_compGenJump( 0 ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber) );
                ;}
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 2593 "source\\compiler\\harbour.sly"
    { hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE; hb_compLinePush(); ;}
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 2594 "source\\compiler\\harbour.sly"
    { hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr) ) );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0 );
                ;}
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 2599 "source\\compiler\\harbour.sly"
    { (yyval.pVoid) = hb_compElseIfGen( (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0 ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].iNumber) );
                ;}
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 2604 "source\\compiler\\harbour.sly"
    { --hb_comp_wIfCounter; hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE ); ;}
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 2605 "source\\compiler\\harbour.sly"
    { --hb_comp_wIfCounter; hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE ); ;}
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 2610 "source\\compiler\\harbour.sly"
    { hb_compElseIfFix( (yyvsp[(2) - (3)].pVoid) ); ;}
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 2622 "source\\compiler\\harbour.sly"
    { hb_compElseIfFix( (yyvsp[(2) - (4)].pVoid) ); ;}
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 2626 "source\\compiler\\harbour.sly"
    {
                        --hb_comp_wCaseCounter;
                        hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
                        s_iControlLevel--;
                     ;}
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 2632 "source\\compiler\\harbour.sly"
    {
                        --hb_comp_wCaseCounter;
                        hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
                        s_iControlLevel--;
                     ;}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 2639 "source\\compiler\\harbour.sly"
    {
                        ++hb_comp_wCaseCounter;

                        if( s_iControlLevel++ == 0 )
                        {
                           s_iLastControlLine = hb_comp_iLine;
                        }

                        hb_compLinePushIfDebugger();
                     ;}
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 2652 "source\\compiler\\harbour.sly"
    { ;}
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 2653 "source\\compiler\\harbour.sly"
    {
                        if( (yyvsp[(2) - (2)].lNumber) > 0 )
                        {
                           hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL );
                        }
                     ;}
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 2661 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = FALSE; hb_compLinePush(); ;}
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 2662 "source\\compiler\\harbour.sly"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(3) - (4)].asExpr) ) );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0 );
               ;}
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 2667 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( 0, hb_compGenJump( 0 ) );
                  hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber) );
               ;}
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 2673 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = FALSE; hb_compLinePush(); ;}
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 2674 "source\\compiler\\harbour.sly"
    {
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(4) - (5)].asExpr) ) );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0 );
               ;}
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 2679 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.pVoid) = hb_compElseIfGen( (yyvsp[(1) - (7)].pVoid), hb_compGenJump( 0 ) );
                  hb_compGenJumpHere( (yyvsp[(6) - (7)].iNumber) );
               ;}
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 2686 "source\\compiler\\harbour.sly"
    { hb_compLinePushIfDebugger(); ;}
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 2687 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  hb_comp_bDontGenLineNum = FALSE;
               ;}
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 2694 "source\\compiler\\harbour.sly"
    { hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_MAYHEM_IN_CASE, NULL, NULL ); ;}
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 2701 "source\\compiler\\harbour.sly"
    {
                  hb_compLoopEnd();
                  //hb_compElseIfFix( $2 ); // No default BREAK in SWITCH.
                  hb_compGenPCode1( HB_P_POP );
               ;}
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 2711 "source\\compiler\\harbour.sly"
    {
                  hb_compLoopEnd();
                  //hb_compElseIfFix( $2 );
                  hb_compGenPCode1( HB_P_POP );
               ;}
    break;

  case 788:

/* Line 1455 of yacc.c  */
#line 2719 "source\\compiler\\harbour.sly"
    {
                  --hb_comp_wCaseCounter;

                  // NO EXIT statement precedes this END statement (must be the case where NO DEFAULT section exists).
                  if( hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter ] )
                  {
                     LONG lOffset;

                     /*
                        We must REMOVE the unconditional JUMP instruction at the end of the preceding
                        CASE statement [aiming to SKIP over the expected trailing CASE if no EXIT specified].
                      */
                     hb_comp_functions.pLast->lPCodePos -= 4;
                     hb_comp_functions.pLast->iJumps--;
                     hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter ] = 0;

                     /*
                        We must RE-correct the prior CASE Jump, since we removed 4 bytes.
                        $0 points to the previous rule (SwitchCases) which holds the offset to that last Jump.
                      */
                     switch( hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) - 1 ) ] )
                     {
                        case HB_P_JUMPFALSENEAR :
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ] -= 4;
                          break;

                        case HB_P_JUMPFALSE :
                          lOffset = HB_PCODE_MKUSHORT( &( hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ] ) ) - 4;
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ]     = HB_LOBYTE( lOffset );
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) + 1 ) ] = HB_HIBYTE( lOffset );
                          break;

                        case HB_P_JUMPFALSEFAR :
                          lOffset = HB_PCODE_MKUINT24( &( hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ] ) ) - 4;
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ]     = HB_LOBYTE( lOffset );
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) + 1 ] = HB_HIBYTE( lOffset );
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) + 2 ] = HB_LOBYTE( HB_HIWORD( lOffset ) );
                          break;

                        default :
                          hb_compGenError( hb_comp_szErrors, 'F', HB_COMP_ERR_JUMP_NOT_FOUND, NULL, NULL );
                     }
                  }

                  hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );

                  s_iControlLevel--;
               ;}
    break;

  case 791:

/* Line 1455 of yacc.c  */
#line 2773 "source\\compiler\\harbour.sly"
    {  hb_comp_bDontGenLineNum = FALSE; hb_compLinePush();
                                   hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter++ ] = 0;
                                   hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (2)].asExpr) ) );

                                   hb_compLoopStart( FALSE );

                                   if( s_iControlLevel++ == 0 )
                                   {
                                      s_iLastControlLine = hb_comp_iLine;
                                   }
                                ;}
    break;

  case 799:

/* Line 1455 of yacc.c  */
#line 2798 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = FALSE; hb_compLinePush(); ;}
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 2799 "source\\compiler\\harbour.sly"
    {
                  hb_compGenSwitchCase( ( LONG ) (yyvsp[(3) - (4)].asExpr)->value.asNum.lVal );
                  hb_compExprDelete( (yyvsp[(3) - (4)].asExpr) );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0 );
               ;}
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 2805 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;

                  //$$ = hb_compElseIfGen( 0, hb_compGenJump( 0 ) ); // No default BREAK in SWITCH.

                  hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] = hb_compGenJump( 0 ); // Skip over NEXT HB_P_SWITCHCASE

                  hb_compGenJumpHere( (yyvsp[(5) - (6)].iNumber) );

                  // Will be used as $0 in Default.
                  (yyval.iNumber) = (yyvsp[(5) - (6)].iNumber);
               ;}
    break;

  case 802:

/* Line 1455 of yacc.c  */
#line 2818 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = FALSE; hb_compLinePush(); ;}
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 2819 "source\\compiler\\harbour.sly"
    {
                  hb_compGenSwitchCase( ( LONG ) (yyvsp[(4) - (5)].asExpr)->value.asNum.lVal );
                  hb_compExprDelete( (yyvsp[(4) - (5)].asExpr) );
                  (yyval.iNumber) = hb_compGenJumpFalse( 0 );

                  if( hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] )
                  {
                     hb_compGenJumpHere( hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] );
                  }
               ;}
    break;

  case 804:

/* Line 1455 of yacc.c  */
#line 2830 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;

                  //$$ = hb_compElseIfGen( $1, hb_compGenJump( 0 ) ); // No default BREAK in SWITCH.

                  hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] = hb_compGenJump( 0 ); // Skip over NEXT HB_P_SWITCHCASE

                  hb_compGenJumpHere( (yyvsp[(6) - (7)].iNumber) );

                  // Will be used as $0 in Default.
                  (yyval.iNumber) = (yyvsp[(6) - (7)].iNumber);
               ;}
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 2844 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valInteger).iNumber ); ;}
    break;

  case 806:

/* Line 1455 of yacc.c  */
#line 2845 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( - (yyvsp[(2) - (2)].valInteger).iNumber ); ;}
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 2846 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valLong).lNumber ); ;}
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 2847 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewLong( - (yyvsp[(2) - (2)].valLong).lNumber ); ;}
    break;

  case 809:

/* Line 1455 of yacc.c  */
#line 2848 "source\\compiler\\harbour.sly"
    {
                                     (yyvsp[(1) - (3)].asExpr)->value.asNum.lVal += (yyvsp[(3) - (3)].asExpr)->value.asNum.lVal;
                                     hb_compExprDelete( (yyvsp[(3) - (3)].asExpr) );
                                     (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);
                                   ;}
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 2853 "source\\compiler\\harbour.sly"
    {
                                     (yyvsp[(1) - (3)].asExpr)->value.asNum.lVal -= (yyvsp[(3) - (3)].asExpr)->value.asNum.lVal;
                                     hb_compExprDelete( (yyvsp[(3) - (3)].asExpr) );
                                     (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);
                                   ;}
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 2858 "source\\compiler\\harbour.sly"
    {
                                     (yyvsp[(1) - (3)].asExpr)->value.asNum.lVal |= (yyvsp[(3) - (3)].asExpr)->value.asNum.lVal;
                                     hb_compExprDelete( (yyvsp[(3) - (3)].asExpr) );
                                     (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);
                                   ;}
    break;

  case 812:

/* Line 1455 of yacc.c  */
#line 2863 "source\\compiler\\harbour.sly"
    {
                                     (yyvsp[(1) - (3)].asExpr)->value.asNum.lVal &= (yyvsp[(3) - (3)].asExpr)->value.asNum.lVal;
                                     hb_compExprDelete( (yyvsp[(3) - (3)].asExpr) );
                                     (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);
                                   ;}
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 2868 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(2) - (3)].asExpr); ;}
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 2869 "source\\compiler\\harbour.sly"
    {
                                    if( (yyvsp[(1) - (1)].valChar).length == 1 )
                                    {
                                       (yyval.asExpr) = hb_compExprNewLong( (LONG) (yyvsp[(1) - (1)].valChar).string[0] );
                                    }
                                    else
                                    {
                                       hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_INVALID_CONSTANT, (yyvsp[(1) - (1)].valChar).string, NULL );
                                       (yyval.asExpr) = hb_compExprNewLong( 0 );
                                    }
                                 ;}
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 2883 "source\\compiler\\harbour.sly"
    {
                  // NO EXIT statement precedes this DEFAULT statement.
                  if( hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] )
                  {
                     LONG lOffset;

                     /*
                        We must REMOVE the unconditional JUMP instruction at the end of the preceding
                        CASE statement [aiming to SKIP over the expected trailing CASE if no EXIT specified].
                      */
                     hb_comp_functions.pLast->lPCodePos -= 4;
                     hb_comp_functions.pLast->iJumps--;
                     hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] = 0;

                     /*
                        We must RE-correct the prior CASE Jump, since we removed 4 bytes.
                        $0 points to the previous rule (SwitchCases) which holds the offset to that last Jump.
                      */
                     switch( hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) - 1 ) ] )
                     {
                        case HB_P_JUMPFALSENEAR :
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ] -= 4;
                          break;

                        case HB_P_JUMPFALSE :
                          lOffset = HB_PCODE_MKUSHORT( &( hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ] ) ) - 4;
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ]     = HB_LOBYTE( lOffset );
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) + 1 ) ] = HB_HIBYTE( lOffset );
                          break;

                        case HB_P_JUMPFALSEFAR :
                          lOffset = HB_PCODE_MKUINT24( &( hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ] ) ) - 4;
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) ]     = HB_LOBYTE( lOffset );
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) + 1 ] = HB_HIBYTE( lOffset );
                          hb_comp_functions.pLast->pCode[ ( ULONG ) ( (yyvsp[(0) - (1)].iNumber) ) + 2 ] = HB_LOBYTE( HB_HIWORD( lOffset ) );
                          break;

                        default :
                          hb_compGenError( hb_comp_szErrors, 'F', HB_COMP_ERR_JUMP_NOT_FOUND, NULL, NULL );
                     }
                  }

                  hb_comp_bDontGenLineNum = FALSE;
                  hb_compLinePush();
               ;}
    break;

  case 816:

/* Line 1455 of yacc.c  */
#line 2930 "source\\compiler\\harbour.sly"
    {
                  /*
                  // Correct last JUMP generated by SWITCHCASE to Skip the DEFAULT section.
                  if( hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] )
                  {
                     hb_compGenJumpHere( hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] );
                     hb_comp_alLastSwitchPos[ hb_comp_wCaseCounter - 1 ] = 0;
                  }

                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  */
               ;}
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 2945 "source\\compiler\\harbour.sly"
    {
                  if( (yyvsp[(2) - (3)].asExpr)->ValType == HB_EV_LOGICAL && (yyvsp[(2) - (3)].asExpr)->value.asLogical )
                  {
                     hb_compExprDelete( (yyvsp[(2) - (3)].asExpr) );
                     (yyval.lNumber) = -1;
                  }
                  else
                  {
                     hb_compExprDelete( hb_compExprGenPush( (yyvsp[(2) - (3)].asExpr) ) );
                     (yyval.lNumber) = hb_compGenJumpFalse( 0 );
                  }
               ;}
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 2958 "source\\compiler\\harbour.sly"
    {
                  hb_compLoopHere();
                  hb_compGenJump( (yyvsp[(1) - (5)].lNumber) - hb_comp_functions.pLast->lPCodePos );
               ;}
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 2963 "source\\compiler\\harbour.sly"
    {
                  if( (yyvsp[(4) - (7)].lNumber) != -1 )
                  {
                     hb_compGenJumpHere( (yyvsp[(4) - (7)].lNumber) );
                  }
                  --hb_comp_wWhileCounter;
                  hb_compLoopEnd();
                  hb_comp_functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
                ;}
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 2974 "source\\compiler\\harbour.sly"
    {
                      (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;
                      hb_compLinePushIfInside();
                      ++hb_comp_wWhileCounter;
                      hb_compLoopStart( TRUE );

                      if( s_iControlLevel++ == 0 )
                      {
                         s_iLastControlLine = hb_comp_iLine;
                      }
                   ;}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 2987 "source\\compiler\\harbour.sly"
    { hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE; s_iControlLevel--; ;}
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 2988 "source\\compiler\\harbour.sly"
    { hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE; s_iControlLevel--; ;}
    break;

  case 823:

/* Line 1455 of yacc.c  */
#line 2992 "source\\compiler\\harbour.sly"
    {
                  hb_compLinePush();
                  hb_compDebugStart();
                  ++hb_comp_wForCounter;              /* 5 */
                  (yyval.asExpr) = hb_compExprGenStatement( hb_compExprAssign( hb_compExprClone( (yyvsp[(2) - (4)].asExpr) ), (yyvsp[(4) - (4)].asExpr) ) );
               ;}
    break;

  case 824:

/* Line 1455 of yacc.c  */
#line 2999 "source\\compiler\\harbour.sly"
    {
                  hb_compLoopStart( TRUE );
                  (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;  /* 9 */
                  (yyvsp[(2) - (8)].asExpr) = hb_compExprGenPush( (yyvsp[(2) - (8)].asExpr) );              /* counter */
                  (yyvsp[(7) - (8)].asExpr) = hb_compExprGenPush( (yyvsp[(7) - (8)].asExpr) );              /* end */

                  if( (yyvsp[(8) - (8)].asExpr) )
                  {
                     (yyvsp[(8) - (8)].asExpr) = hb_compExprGenPush( (yyvsp[(8) - (8)].asExpr) );   /* step */
                  }
               ;}
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 3011 "source\\compiler\\harbour.sly"
    {
                  if( (yyvsp[(8) - (10)].asExpr) )
                  {
                     hb_compGenPCode1( HB_P_FORTEST );
                  }
                  else
                  {
                     hb_compGenPCode1( HB_P_LESSEQUAL );
                  }

                  (yyval.lNumber) = hb_compGenJumpFalse( 0 );   /* 11 */

                  if( s_iControlLevel++ == 0 )
                  {
                     s_iLastControlLine = hb_comp_iLine;
                  }
               ;}
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 3029 "source\\compiler\\harbour.sly"
    {
                  short iStep, iLocal;

                  hb_compLoopHere();

                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     if( (yyvsp[(8) - (12)].asExpr)->ExprType == HB_ET_NUMERIC && (yyvsp[(8) - (12)].asExpr)->value.asNum.NumType == HB_ET_LONG &&
                         (yyvsp[(8) - (12)].asExpr)->value.asNum.lVal >= -32768 && (yyvsp[(8) - (12)].asExpr)->value.asNum.lVal <= 32767 )
                     {
                        iStep = ( short ) (yyvsp[(8) - (12)].asExpr)->value.asNum.lVal;
                     }
                     else
                     {
                        iStep = 0;
                     }
                  }
                  else
                  {
                     iStep = 1;
                  }

                  if( iStep && ( iLocal = hb_compLocalGetPos( (yyvsp[(2) - (12)].asExpr)->value.asSymbol.szName ) ) != 0 && HB_LIM_INT8( iLocal ) )
                  {
                     if( iStep == 1 )
                     {
                        hb_compGenPCode2( HB_P_LOCALNEARINC, ( BYTE ) iLocal, ( BOOL ) 0 );
                     }
                     else if( iStep == -1  )
                     {
                        hb_compGenPCode2( HB_P_LOCALNEARDEC, ( BYTE ) iLocal, ( BOOL ) 0 );
                     }
                     else
                     {
                        hb_compGenPCode4( HB_P_LOCALNEARADDINT, ( BYTE ) iLocal, HB_LOBYTE( iStep ), HB_HIBYTE( iStep ), ( BOOL ) 0 );
                     }
                  }
                  else if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     (yyvsp[(8) - (12)].asExpr) = hb_compExprGenStatement( hb_compExprSetOperand( hb_compExprNewPlusEq( hb_compExprClone( (yyvsp[(2) - (12)].asExpr) ) ), (yyvsp[(8) - (12)].asExpr) ) );
                  }
                  else
                  {
                     (yyvsp[(8) - (12)].asExpr) = hb_compExprGenStatement( hb_compExprNewPreInc( hb_compExprClone( (yyvsp[(2) - (12)].asExpr) ) ) );
                  }

                  hb_compGenJump( (yyvsp[(9) - (12)].lNumber) - hb_comp_functions.pLast->lPCodePos );
                  hb_compGenJumpHere( (yyvsp[(11) - (12)].lNumber) );

                  hb_compLoopEnd();

                  hb_compExprDelete( (yyvsp[(2) - (12)].asExpr) );
                  hb_compExprDelete( (yyvsp[(5) - (12)].asExpr) ); /* Deletes $5, hb_compExprClone( $2 ), $4 */
                  hb_compExprDelete( (yyvsp[(7) - (12)].asExpr) );

                  if( (yyvsp[(8) - (12)].asExpr) )
                  {
                     hb_compExprDelete( (yyvsp[(8) - (12)].asExpr) ); /* Deletes hb_compExprClone( $2 ), and original $8 */
                  }

                  hb_comp_functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
               ;}
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 3097 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 830:

/* Line 1455 of yacc.c  */
#line 3098 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprReduce( (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 3101 "source\\compiler\\harbour.sly"
    { hb_compLinePush();
                                                   if( hb_comp_wForCounter )
                                                      --hb_comp_wForCounter;
                                                   s_iControlLevel--; ;}
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 3105 "source\\compiler\\harbour.sly"
    { hb_compLinePush();
                                                   if( hb_comp_wForCounter )
                                                      --hb_comp_wForCounter;
                                                   s_iControlLevel--; ;}
    break;

  case 833:

/* Line 1455 of yacc.c  */
#line 3109 "source\\compiler\\harbour.sly"
    { hb_compLinePush();
                                                   if( hb_comp_wForCounter )
                                                      --hb_comp_wForCounter;
                                                   s_iControlLevel--; ;}
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 3113 "source\\compiler\\harbour.sly"
    { hb_compLinePush();
                                                   if( hb_comp_wForCounter )
                                                      --hb_comp_wForCounter;
                                                   s_iControlLevel--; ;}
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 3120 "source\\compiler\\harbour.sly"
    {  /* 3 */
                  hb_compLinePush();
                  hb_compDebugStart();
                  ++hb_comp_wForCounter;
                  //$2->ExprType = HB_ET_VARREF; hb_compExprGenPush( $2 );
                  hb_compExprDelete( hb_compExprGenPush( hb_compExprNewVarRef( (yyvsp[(2) - (2)].string) ) ) );
               ;}
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 3128 "source\\compiler\\harbour.sly"
    { /* 6 */
                  hb_compExprDelete( hb_compExprGenPush( (yyvsp[(5) - (5)].asExpr) ) );
                  hb_compGenPCode1( HB_P_FOREACH );
                  (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;  /* 6 */
                  hb_compGenPCode1( HB_P_ENUMERATE );
                  hb_compLoopStart( TRUE );
               ;}
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 3136 "source\\compiler\\harbour.sly"
    { /* 8 */
                  (yyval.lNumber) = hb_compGenJumpFalse( 0 );   /* 8 */

                  if( s_iControlLevel++ == 0 )
                  {
                     s_iLastControlLine = hb_comp_iLine;
                  }
               ;}
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 3145 "source\\compiler\\harbour.sly"
    {
                  hb_compLoopHere();
                  hb_compGenJump( (yyvsp[(6) - (9)].lNumber) - hb_comp_functions.pLast->lPCodePos );
                  hb_compGenJumpHere( (yyvsp[(8) - (9)].lNumber) );
                  hb_compLoopEnd();
                  hb_compGenPCode1( HB_P_ENDENUMERATE );
                  hb_comp_functions.pLast->bFlags &= ~ FUN_WITH_RETURN;
               ;}
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 3156 "source\\compiler\\harbour.sly"
    {
                  hb_compLinePush();
                  hb_compGenWithObject((yyvsp[(2) - (3)].asExpr));
                  if( s_iControlLevel++ == 0 )
                  {
                     s_iLastControlLine = hb_comp_iLine;
                  }
               ;}
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 3166 "source\\compiler\\harbour.sly"
    {
                  hb_compGenEndWithObject();
                  s_iControlLevel--;
               ;}
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 3172 "source\\compiler\\harbour.sly"
    {
                         ++hb_comp_wSeqCounter;

                         (yyval.lNumber) = hb_compSequenceBegin();

                         if( s_iControlLevel++ == 0 )
                         {
                            s_iLastControlLine = hb_comp_iLine;
                         }
                      ;}
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 3184 "source\\compiler\\harbour.sly"
    {
                  /* Set jump address for HB_P_SEQBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                   hb_compGenJumpHere( (yyvsp[(2) - (4)].lNumber) );
                   (yyval.lNumber) = hb_compSequenceEnd();
                ;}
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 3192 "source\\compiler\\harbour.sly"
    {
                   /* Replace END address with RECOVER address in
                    * HB_P_SEQBEGIN opcode if there is RECOVER clause
                    */
                   if( (yyvsp[(6) - (6)].lNumber) )
                      hb_compGenJumpThere( (yyvsp[(2) - (6)].lNumber), (yyvsp[(6) - (6)].lNumber) );
                   else if( hb_comp_wSeqCounter )
                     --hb_comp_wSeqCounter;
                ;}
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 3202 "source\\compiler\\harbour.sly"
    {
                /* Fix END address
                 * There is no line number after HB_P_SEQEND in case no
                 * RECOVER clause is used
                 */
                hb_compGenJumpThere( (yyvsp[(5) - (8)].lNumber), hb_comp_functions.pLast->lPCodePos );

                hb_compSequenceFinish( (ULONG)(yyvsp[(2) - (8)].lNumber), (int)(yyvsp[(4) - (8)].lNumber) );

                hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
                s_iControlLevel--;
             ;}
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 3216 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 0; hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE; ;}
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 3222 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;
                  if( hb_comp_wSeqCounter )
                     --hb_comp_wSeqCounter;
                  hb_compLinePush();
                  hb_compGenPCode2( HB_P_SEQRECOVER, HB_P_POP, ( BOOL ) 0 );
               ;}
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 3233 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;
                  if( hb_comp_wSeqCounter )
                     --hb_comp_wSeqCounter;
                  hb_compLinePush();
                  hb_compGenPCode1( HB_P_SEQRECOVER );
                  hb_compGenPopVar( (yyvsp[(2) - (2)].string) );
               ;}
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 3245 "source\\compiler\\harbour.sly"
    {             /* 2 */
                  ++hb_comp_wSeqCounter;
                  (yyval.lNumber) = hb_compTryBegin();
                  if( s_iControlLevel++ == 0 )
                     s_iLastControlLine = hb_comp_iLine;
               ;}
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 3253 "source\\compiler\\harbour.sly"
    {             /* 5 */
                  /* Set jump address for HB_P_TRYBEGIN opcode - this address
                   * will be used in BREAK code if there is no RECOVER clause
                   */
                  hb_compGenJumpHere( (yyvsp[(2) - (4)].lNumber) );
                  (yyval.lNumber) = hb_compTryEnd();
                  (yyvsp[(3) - (4)].lNumber) = hb_compLoopCount();
               ;}
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 3262 "source\\compiler\\harbour.sly"
    {             /* 7 */
                  /* Replace END address with RECOVER address in
                   * HB_P_TRYBEGIN opcode if there is RECOVER clause
                   */
                  if( (yyvsp[(6) - (6)].lNumber) )
                     hb_compGenJumpThere( (yyvsp[(2) - (6)].lNumber), (yyvsp[(6) - (6)].lNumber) );
               ;}
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 3270 "source\\compiler\\harbour.sly"
    {             /* 9 */
                  long lLoopCount = hb_compLoopCount();
                  hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
                  if( (yyvsp[(8) - (8)].lNumber) )
                  {
                     if( (yyvsp[(3) - (8)].lNumber) != lLoopCount )
                     {
                        /* FINALLY statement after CATCH with EXIT/LOOP statments */
                        hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT/LOOP", NULL );
                     }
                     --hb_comp_wFinallyCounter;
                     if( (yyvsp[(6) - (8)].lNumber) == 0 )
                        hb_compGenJumpThere( (yyvsp[(2) - (8)].lNumber), (yyvsp[(8) - (8)].lNumber) );
                     /* replace END address with FINALLY address in
                        HB_P_ENDFINALLY opcode */
                     hb_compGenJumpThere( (yyvsp[(5) - (8)].lNumber), (yyvsp[(8) - (8)].lNumber) );

                     if( (yyvsp[(6) - (8)].lNumber) )
                        hb_compGenJumpThere( (yyvsp[(6) - (8)].lNumber) + 1, (yyvsp[(8) - (8)].lNumber) );
                     else
                     {
                        /* Only if there is no CATCH clause */
                        --hb_comp_wSeqCounter;  /* CATCH is also considered as end of sequence */
                     }

                     hb_compGenPCode1( HB_P_ENDFINALLY );
                  }
                  else
                  {
                     //printf( "END to %li\n", hb_comp_functions.pLast->lPCodePos );
                     hb_compGenJumpThere( (yyvsp[(5) - (8)].lNumber), hb_comp_functions.pLast->lPCodePos );

                     if( (yyvsp[(6) - (8)].lNumber) == 0 )
                     {
                        /* Only if there is no CATCH clause */
                        --hb_comp_wSeqCounter;  /* CATCH is also considered as end of sequence */

                        hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_MISSING_HANDLER, NULL, NULL );
                     }
                  }

                  //hb_compTryFinish( $<lNumber>2, $<iNumber>4 );
                  hb_comp_functions.pLast->bFlags &= ~ FUN_WITH_RETURN;

                  s_iControlLevel--;
               ;}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 3320 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 0; ;}
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 3325 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ ( FUN_WITH_RETURN | FUN_BREAK_CODE );
                  (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;
                  ++hb_comp_wFinallyCounter;
                  hb_compGenPCode1( HB_P_FINALLY );
               ;}
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 3333 "source\\compiler\\harbour.sly"
    { (yyval.lNumber) = 0; ;}
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 3338 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;
                  if ( hb_comp_wSeqCounter )
                     --hb_comp_wSeqCounter;
                  hb_compGenPCode4( HB_P_TRYRECOVER, 0, 0, 0, TRUE );
                  hb_compPrepareOptimize();
                  hb_compGenPopVar( (yyvsp[(2) - (2)].string) );
               ;}
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 3348 "source\\compiler\\harbour.sly"
    {
                  hb_comp_functions.pLast->bFlags &= ~ FUN_BREAK_CODE;
                  (yyval.lNumber) = hb_comp_functions.pLast->lPCodePos;
                  if ( hb_comp_wSeqCounter )
                     --hb_comp_wSeqCounter;
                  hb_compGenPCode4( HB_P_TRYRECOVER, 0, 0, 0, TRUE );
                  hb_compPrepareOptimize();
                  hb_compGenPCode1( HB_P_POP );
               ;}
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 3365 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunName( (yyvsp[(1) - (1)].string) ); hb_compAutoOpenAdd( (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 3366 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 3367 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 3371 "source\\compiler\\harbour.sly"
    {
                  (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(2) - (2)].asExpr), NULL );
               ;}
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 3375 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunCall( (yyvsp[(2) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr) ); ;}
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 3377 "source\\compiler\\harbour.sly"
    { hb_compAutoOpenAdd( hb_compExpr_IDs.WHILE_ ); (yyval.asExpr) = hb_compExprNewFunCall( hb_compExprNewFunName( hb_compExpr_IDs.WHILE_ ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 3380 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil() ), hb_compExprNewNil() ); ;}
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 3381 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewArgList( hb_compExprNewNil() ), (yyvsp[(2) - (2)].asExpr) ); ;}
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 3382 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 3383 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (2)].asExpr), hb_compExprNewNil() ); ;}
    break;

  case 872:

/* Line 1455 of yacc.c  */
#line 3384 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 873:

/* Line 1455 of yacc.c  */
#line 3387 "source\\compiler\\harbour.sly"
    {
                                                    if( hb_compFieldGetPos( (yyvsp[(1) - (1)].string), hb_comp_functions.pLast ) ||
                                                        ( hb_comp_bStartProc == FALSE && hb_compFieldGetPos( (yyvsp[(1) - (1)].string), hb_comp_functions.pFirst ) ) )
                                                    {
                                                      (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string) );
                                                    }
                                                    else
                                                    {
                                                      (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(1) - (1)].string) );
                                                    }
                                                  ;}
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 3398 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(2) - (2)].string) ); ;}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 3399 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewFunRef( (yyvsp[(2) - (5)].string) ); ;}
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 3400 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = hb_compExprNewNamespaceFunRef( (yyvsp[(2) - (6)].string), (yyvsp[(3) - (6)].string) ); ;}
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 3401 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 3402 "source\\compiler\\harbour.sly"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); ;}
    break;

  case 879:

/* Line 1455 of yacc.c  */
#line 3406 "source\\compiler\\harbour.sly"
    {
                                   PNAMESPACE pNamespace;

                                   if( hb_comp_UsedNamespaces.pFirst )
                                   {
                                      pNamespace = hb_compNamespaceFind( hb_comp_UsedNamespaces.pFirst, (yyvsp[(2) - (3)].string), NSTYPE_SPACE );

                                      if( pNamespace == NULL && (yyvsp[(2) - (3)].string)[0] == '*' )
                                      {
                                         pNamespace = hb_compUsedNamespaceNew( "*", NSTYPE_SPACE );
                                         hb_compUsedNamespaceEnd();
                                      }

                                   }
                                   else
                                   {
                                      if( (yyvsp[(2) - (3)].string)[0] == '*' )
                                      {
                                         pNamespace = hb_compUsedNamespaceNew( "*", NSTYPE_SPACE );
                                         hb_compUsedNamespaceEnd();
                                      }
                                      else
                                      {
                                         pNamespace = NULL;
                                      }
                                   }

                                   if( pNamespace == NULL || ( ( pNamespace->type & NSTYPE_SPACE ) != NSTYPE_SPACE ) )
                                   {
                                      hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNKNOWN_NAMESPACE, (yyvsp[(2) - (3)].string), NULL );
                                   }
                                   else
                                   {
                                      PNAMESPACE pClone;

                                      pClone = (PNAMESPACE) hb_xgrab( sizeof( _NAMESPACE ) );
                                      memcpy( (void *) pClone, (void *) pNamespace, sizeof( _NAMESPACE ) );

                                      pClone->pOuter = hb_comp_UsedNamespaces.pCurrent;
                                      hb_comp_UsedNamespaces.pCurrent = pClone;
                                   }
                                 ;}
    break;

  case 880:

/* Line 1455 of yacc.c  */
#line 3450 "source\\compiler\\harbour.sly"
    {
                                   PNAMESPACE pClone;

                                   pClone = hb_comp_UsedNamespaces.pCurrent;
                                   hb_comp_UsedNamespaces.pCurrent = hb_comp_UsedNamespaces.pCurrent->pOuter;
                                   hb_xfree( pClone );
                                 ;}
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 3459 "source\\compiler\\harbour.sly"
    { (yyval.string) = ( (yyvsp[(1) - (1)].string) == hb_compExpr_IDs.GLOBAL_ ? (char *) "*" : (yyvsp[(1) - (1)].string) ); ;}
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 3463 "source\\compiler\\harbour.sly"
    {
                                   if( hb_comp_functions.pLast )
                                   {
                                       hb_comp_functions.pLast->bFlags |= FUN_SEALED;
                                   }

                                   if( ( ( (yyvsp[(1) - (3)].iNumber) & NSTYPE_IMPLEMENTS ) == NSTYPE_IMPLEMENTS ) && hb_comp_Namespaces.pCurrent )
                                   {
                                      hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_IMPLEMENTS_IN_NAMESPACE, hb_comp_Namespaces.pCurrent->szName, NULL );
                                   }

                                   hb_compNamespaceNew( (yyvsp[(2) - (3)].string), (yyvsp[(1) - (3)].iNumber) );
                                 ;}
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 3478 "source\\compiler\\harbour.sly"
    {
                                   if( hb_comp_functions.pLast )
                                   {
                                       hb_comp_functions.pLast->bFlags |= FUN_SEALED;
                                   }

                                   hb_compNamespaceEnd();
                                 ;}
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 3491 "source\\compiler\\harbour.sly"
    {
                                   if( hb_comp_functions.pLast )
                                   {
                                       hb_comp_functions.pLast->bFlags |= FUN_SEALED;
                                   }

                                   if( hb_comp_Namespaces.pCurrent )
                                   {
                                      hb_compNamespaceNew( (yyvsp[(2) - (3)].string), NSTYPE_EXTERNAL | NSTYPE_SPACE );
                                      hb_compNamespaceEnd();
                                   }
                                   else
                                   {
                                      hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_NAMESPACE, (yyvsp[(2) - (3)].string), NULL );
                                   }
                                 ;}
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 3508 "source\\compiler\\harbour.sly"
    {
                                   if( hb_comp_functions.pLast )
                                   {
                                       hb_comp_functions.pLast->bFlags |= FUN_SEALED;
                                   }

                                   if( hb_comp_Namespaces.pCurrent )
                                   {
                                      hb_compNamespaceNew( (yyvsp[(2) - (3)].string), ( NSTYPE_EXTERNAL | NSTYPE_MEMBER ) );
                                      hb_comp_Namespaces.pLast->pOuter = hb_comp_Namespaces.pCurrent;

                                      hb_compSymbolAdd( (yyvsp[(2) - (3)].string), NULL, (void *) hb_comp_Namespaces.pCurrent, SYMF_NS_EXPLICITPTR );
                                   }
                                   else
                                   {
                                      hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_NAMESPACE, (yyvsp[(2) - (3)].string), NULL );
                                   }
                                 ;}
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 3529 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = NSTYPE_SPACE; ;}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 3530 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = NSTYPE_RUNTIME; ;}
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 3531 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = NSTYPE_OPTIONAL; ;}
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 3532 "source\\compiler\\harbour.sly"
    { (yyval.iNumber) = NSTYPE_IMPLEMENTS; ;}
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 3536 "source\\compiler\\harbour.sly"
    {
                                   hb_compUsedNamespaceNew( (yyvsp[(2) - (3)].string), NSTYPE_SPACE );
                                 ;}
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 3541 "source\\compiler\\harbour.sly"
    {
                                   hb_compUsedNamespaceEnd();
                                 ;}
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 3561 "source\\compiler\\harbour.sly"
    {
                                   hb_compUsedNamespaceNew( (yyvsp[(2) - (3)].string), NSTYPE_MEMBER );
                                 ;}
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 3568 "source\\compiler\\harbour.sly"
    {
                                                 if( (yyvsp[(2) - (3)].pVoid) )
                                                 {
                                                    ( (PNAMESPACE) (yyvsp[(2) - (3)].pVoid) )->type |= NSTYPE_USED;
                                                 }
                                               ;}
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 3578 "source\\compiler\\harbour.sly"
    {
                       if( hb_comp_UsedNamespaces.pFirst )
                       {
                          (yyval.pVoid) = (void *) hb_compNamespaceFind( hb_comp_UsedNamespaces.pFirst, (yyvsp[(1) - (1)].string), NSTYPE_SPACE );
                       }
                       else
                       {
                          (yyval.pVoid) = NULL;
                       }

                       if( (yyval.pVoid) == NULL )
                       {
                          hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNKNOWN_NAMESPACE, (yyvsp[(1) - (1)].string), NULL );
                          (yyval.pVoid) = NULL;
                       }
                    ;}
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 3595 "source\\compiler\\harbour.sly"
    {
                                     if( (yyvsp[(1) - (3)].pVoid) )
                                     {
                                        if( ( (PNAMESPACE) (yyvsp[(1) - (3)].pVoid) )->pNext == NULL )
                                        {
                                           hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EMPTY_NAMESPACE, ( (PNAMESPACE) (yyvsp[(1) - (3)].pVoid) )->szName, NULL );
                                        }

                                        (yyval.pVoid) = (void *) hb_compNamespaceFindMember( ( (PNAMESPACE) (yyvsp[(1) - (3)].pVoid) )->pNext, (yyvsp[(3) - (3)].string), NSTYPE_SPACE );

                                        if( (yyval.pVoid) == NULL )
                                        {
                                           hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_NONMEMBER_NAMESPACE, (yyvsp[(3) - (3)].string), ( (PNAMESPACE) (yyvsp[(1) - (3)].pVoid) )->szName );
                                        }
                                     }
                                  ;}
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 3614 "source\\compiler\\harbour.sly"
    { hb_comp_bError = FALSE; ;}
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 3615 "source\\compiler\\harbour.sly"
    { hb_comp_bDontGenLineNum = TRUE; ;}
    break;



/* Line 1455 of yacc.c  */
#line 12306 "obj\\63\\harboury.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



/* Line 1675 of yacc.c  */
#line 3618 "source\\compiler\\harbour.sly"


/*
 ** ------------------------------------------------------------------------ **
 */

#if 0
int hb_compYACCMain( char * szName )
{
   /* Generate the starting procedure frame */
   if( hb_comp_bStartProc )
      hb_compFunctionAdd( hb_strupr( hb_strdup( szName ) ), HB_FS_PUBLIC, FUN_PROCEDURE );
   else
         /* Don't pass the name of module if the code for starting procedure
         * will be not generated. The name cannot be placed as first symbol
         * because this symbol can be used as function call or memvar's name.
         */
      hb_compFunctionAdd( hb_strupr( hb_strdup( "" ) ), HB_FS_PUBLIC, FUN_PROCEDURE );

   yyparse();

   /* fix all previous function returns offsets */
   hb_compFinalizeFunction();

   hb_compExternGen();       /* generates EXTERN symbols names */

   if( hb_comp_pInitFunc )
   {
      PCOMSYMBOL pSym;

      /* Fix the number of static variables */
      hb_comp_pInitFunc->pCode[ 3 ] = HB_LOBYTE( hb_comp_iStaticCnt );
      hb_comp_pInitFunc->pCode[ 4 ] = HB_HIBYTE( hb_comp_iStaticCnt );
      hb_comp_pInitFunc->iStaticsBase = hb_comp_iStaticCnt;

      pSym = hb_compSymbolAdd( hb_comp_pInitFunc->szName, NULL, NULL, SYMF_FUNCALL );
      pSym->cScope |= hb_comp_pInitFunc->cScope;

      hb_comp_functions.pLast->pNext = hb_comp_pInitFunc;
      hb_comp_functions.pLast = hb_comp_pInitFunc;

      hb_compGenPCode1( HB_P_ENDPROC );
      ++hb_comp_functions.iCount;
   }

   if( hb_comp_szAnnounce )
      hb_compAnnounce( hb_comp_szAnnounce );

   /* Close processed file (it is opened in hb_compInclude() function )
   */
   fclose( yyin );

   while( hb_comp_files.pLast )
   {
     PFILE pFile = hb_comp_files.pLast;
     if( pFile->pBuffer )
        hb_xfree( (void *) pFile->pBuffer );
     hb_xfree( (void *) pFile->szFileName );
     hb_comp_files.pLast = pFile->pPrev;
     hb_xfree( pFile );
   }
   hb_comp_files.pLast = NULL;

   return 0;
}
#endif

/* ------------------------------------------------------------------------ */

void yyerror( char * s )
{
   //printf( "Error: %i Line: %i Error at '%s'\n", hb_comp_bError, hb_comp_iLine, yytext );

   if( yytext[ 0 ] == '\n' )
   {
      if( yychar == 0 )
      {
         if( s_iControlLevel )
         {
            char LineAsString[32];

            hb_snprintf( LineAsString, sizeof( LineAsString ), "at line %i", s_iLastControlLine - 1 );
            hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, LineAsString, NULL );
         }
         else
         {
            hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
         }
      }
      else
      {
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_INCOMPLETE_STMT, NULL, NULL );
      }
   }
   else
   {
      if( hb_comp_wForCounter == 0 && ( yychar == NEXT || yychar == LOOP ) )
      {
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_NEXTFOR, NULL, NULL );
      }
      else if( yychar == EXIT && hb_comp_wForCounter == 0 && hb_comp_wSwitchCounter == 0 )
      {
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, yytext, NULL );
      }
      else if( yychar == ENDDO && hb_comp_wWhileCounter == 0 )
      {
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_ENDDO, NULL, NULL );
      }
      else if( yychar == ENDCASE && hb_comp_wCaseCounter == 0 )
      {
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_ENDCASE, NULL, NULL );
      }
      else if( yychar == ENDIF && hb_comp_wIfCounter == 0 )
      {
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_ENDIF, NULL, NULL );
      }

      if( s_iControlLevel )
      {
         if( yychar == NEXT || yychar == ENDDO || yychar == ENDCASE )
         {
            if( hb_comp_wSeqCounter )
            {
               hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, yytext, NULL );
            }
            else
            {
               char LineAsString[32];
               hb_snprintf( LineAsString, sizeof( LineAsString ), "at line %i", s_iLastControlLine - 1 );
               hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNCLOSED_STRU, LineAsString, NULL );
            }
         }
         else
         {
            hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, yytext );
         }

         /*
          hb_comp_wForCounter
          hb_comp_wIfCounter
          hb_comp_wWhileCounter
          hb_comp_wCaseCounter
          hb_comp_wWithObjCounter
          hb_comp_wSwitchCounter
          */

          hb_comp_pLoops = NULL;

         //printf( "Token: %s (%i)\n", yytext, yychar );
      }
      else
      {
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_YACC, s, yytext );
      }
   }
}

#if 0
BOOL hb_compInclude( char * szFileName, HB_PATHNAMES * pSearch )
{
   PFILE pFile;

   yyin = hb_fopen( szFileName, "r" );
   if( ! yyin )
   {
      if( pSearch )
      {
         PHB_FNAME pFileName = hb_fsFNameSplit( szFileName );

         while( pSearch && !yyin )
         {
            char szFName[ HB_PATH_MAX ];    /* filename to parse */

            pFileName->szPath = pSearch->szPath;
            hb_fsFNameMerge( szFName, pFileName );
            yyin = hb_fopen( szFName, "r" );
            if( ! yyin )
            {
               pSearch = pSearch->pNext;
               if( ! pSearch )
                  return FALSE;
            }
         }

         hb_xfree( ( void * ) pFileName );
      }
      else
         return FALSE;
   }

   pFile = ( PFILE ) hb_xgrab( sizeof( _FILE ) );
   pFile->handle = yyin;
   pFile->pBuffer = hb_xgrab( HB_PP_BUFF_SIZE );
   pFile->iBuffer = pFile->lenBuffer = 10;
   pFile->szFileName = szFileName;
   pFile->iLine = 0;
   pFile->pPrev = hb_comp_files.pLast;

   hb_comp_files.pLast = pFile;

#ifdef __cplusplus
   yy_switch_to_buffer( ( YY_BUFFER_STATE ) ( hb_comp_buffer = ( char * ) yy_create_buffer( yyin, 8192 * 2 ) ) );
#else
   yy_switch_to_buffer( hb_comp_buffer = yy_create_buffer( yyin, 8192 * 2 ) );
#endif
   hb_comp_files.iFiles++;

   return TRUE;
}

int yywrap( void )   /* handles the EOF of the currently processed file */
{
   if( hb_comp_files.iFiles == 1 )
   {
      hb_xfree( hb_comp_files.pLast->pBuffer );
      hb_comp_files.pLast->pBuffer = NULL;
      return 1;      /* we have reached the main EOF */
   }

   return 0;
}
#endif

/* ************************************************************************* */

/*
 * This function stores the position in pcode buffer where the FOR/WHILE
 * loop starts. It will be used to fix any LOOP/EXIT statements
 */
static void hb_compLoopStart( BOOL fCanLoop )
{
   PTR_LOOPEXIT pLoop = ( PTR_LOOPEXIT ) hb_xgrab( sizeof( LOOPEXIT ) );

   if( hb_comp_pLoops )
   {
      PTR_LOOPEXIT pLast = hb_comp_pLoops;

      while( pLast->pNext )
         pLast = pLast->pNext;
      pLast->pNext = pLoop;
   }
   else
      hb_comp_pLoops = pLoop;

   pLoop->ulOffset        = hb_comp_functions.pLast->lPCodePos;  /* store the start position */
   pLoop->fCanLoop        = fCanLoop;   /* can we use LOOP inside */
   pLoop->iLine           = hb_comp_iLine;
   pLoop->wSeqCounter     = hb_comp_wSeqCounter;      /* store current SEQUENCE counter */
   pLoop->wWithObjCounter = hb_comp_wWithObjCounter;  /* store current WITH OBJECT counter */
   pLoop->wFinallyCounter = hb_comp_wFinallyCounter;  /* store current FINALLY counter */

   pLoop->pExitList       = NULL;
   pLoop->pLoopList       = NULL;
   pLoop->pNext           = NULL;
}

/*
 * return number of LOOP of EXIT statement in the top most structure
 */
static long hb_compLoopCount( void )
{
   PTR_LOOPEXIT pLastLoop, pLastExit, pLoop;
   long lCount = 0;

   pLastLoop = pLastExit = NULL;
   pLoop = hb_comp_pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLastLoop = pLoop;
      pLastExit = pLoop;
      pLoop = pLoop->pNext;
   }

   if( pLastLoop )
   {
      while( pLastLoop->pLoopList )
      {
         ++lCount;
         pLastLoop = pLastLoop->pLoopList;
      }
   }
   if( pLastExit )
   {
      while( pLastExit->pExitList )
      {
         ++lCount;
         pLastExit = pLastExit->pExitList;
      }
   }

   return lCount;
}

/*
 * Stores the position of LOOP statement to fix it later at the end of loop
 */
static void hb_compLoopLoop( void )
{
   PTR_LOOPEXIT pLast = NULL, pLoop;

   pLoop = hb_comp_pLoops;
   while( pLoop )
   {
      if( pLoop->fCanLoop )
         pLast = pLoop;
      pLoop = pLoop->pNext;
   }

   if( ! pLast )
   {
      hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "LOOP", NULL );
   }
   else
   {
      if( pLast->wSeqCounter != hb_comp_wSeqCounter )
      {
         /* Attempt to LOOP from BEGIN/END sequence
         * Current SEQUENCE counter is different then at the beginning of loop
         * Notice that LOOP is allowed in RECOVER code.
         */
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else if( pLast->wFinallyCounter != hb_comp_wFinallyCounter )
      {
         /* Attempt to LOOP from FINALLY block of TRY/END sequence
          */
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "LOOP", NULL );
      }
      else
      {
         USHORT wWithObjCounter = pLast->wWithObjCounter;

         pLoop = ( PTR_LOOPEXIT ) hb_xgrab( sizeof( LOOPEXIT ) );
         pLoop->pLoopList = NULL;

         while( pLast->pLoopList )
         {
            pLast = pLast->pLoopList;
         }

         pLast->pLoopList = pLoop;

         while( wWithObjCounter < hb_comp_wWithObjCounter )
         {
            hb_compGenPCode1( HB_P_ENDWITHOBJECT );
            wWithObjCounter++;
         }

         pLoop->ulOffset = hb_comp_functions.pLast->lPCodePos;  /* store the position to fix */
         hb_compGenJump( 0 );
      }
   }
}

/*
 * Stores the position of EXIT statement to fix it later at the end of loop
 */
static void hb_compLoopExit( void )
{
   if( ! hb_comp_pLoops )
   {
      hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_UNMATCHED_EXIT, "EXIT", NULL );
   }
   else
   {
      PTR_LOOPEXIT pLast, pLoop;

      pLast = hb_comp_pLoops;
      while( pLast->pNext )
         pLast = pLast->pNext;

      if( pLast->wSeqCounter != hb_comp_wSeqCounter )
      {
         /* Attempt to EXIT from BEGIN/END sequence
         * Current SEQUENCE counter is different then at the beginning of loop
         * Notice that LOOP is allowed in RECOVER code.
         */
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else if( pLast->wFinallyCounter != hb_comp_wFinallyCounter )
      {
         /* Attempt to EXIT from FINALLY block of TRY/END sequence
          */
         hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXIT_IN_SEQUENCE, "EXIT", NULL );
      }
      else
      {
         USHORT wWithObjCounter = pLast->wWithObjCounter;

         pLoop = ( PTR_LOOPEXIT ) hb_xgrab( sizeof( LOOPEXIT ) );
         pLoop->pExitList = NULL;
         while( pLast->pExitList )
         pLast = pLast->pExitList;
         pLast->pExitList = pLoop;

         while( wWithObjCounter < hb_comp_wWithObjCounter )
         {
            hb_compGenPCode1( HB_P_ENDWITHOBJECT );
            wWithObjCounter++;
         }

         pLoop->ulOffset = hb_comp_functions.pLast->lPCodePos;  /* store the position to fix */
         hb_compGenJump( 0 );
      }
   }
}

/*
 * Fixes the LOOP statement
 */
static void hb_compLoopHere( void )
{
   PTR_LOOPEXIT pLoop = hb_comp_pLoops, pFree, pLast;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLoop = pLoop->pNext;
      }

      pLast = pLoop;
      pLoop = pLoop->pLoopList;

      while( pLoop )
      {
         hb_compGenJumpHere( pLoop->ulOffset + 1 );
         pFree = pLoop;
         pLoop = pLoop->pLoopList;
         hb_xfree( ( void * ) pFree );
      }

      pLast->pLoopList = NULL;
   }
}

/*
 * Fixes the EXIT statements and releases memory allocated for current loop
 */
static void hb_compLoopEnd( void )
{
   PTR_LOOPEXIT pExit, pLoop = hb_comp_pLoops, pLast = hb_comp_pLoops, pFree;

   if( pLoop )
   {
      while( pLoop->pNext )
      {
         pLast = pLoop;
         pLoop = pLoop->pNext;
      }

      pExit = pLoop->pExitList;
      while( pExit )
      {
         hb_compGenJumpHere( pExit->ulOffset + 1 );
         pFree = pExit;
         pExit = pExit->pExitList;
         hb_xfree( ( void * ) pFree );
      }

      pLast->pNext = NULL;
      if( pLoop == hb_comp_pLoops )
         hb_comp_pLoops = NULL;
      hb_xfree( ( void * ) pLoop );
   }
}

void hb_compReleaseLoops( void )
{
   PTR_LOOPEXIT pLoop, pFree;

   while( hb_comp_pLoops )
   {
      pLoop = hb_comp_pLoops;
      while( pLoop->pExitList )
      {
         pFree = pLoop->pExitList;
         pLoop->pExitList = pFree->pExitList;
         hb_xfree( ( void * ) pFree );
      }
      while( pLoop->pLoopList )
      {
         pFree = pLoop->pLoopList;
         pLoop->pLoopList = pFree->pLoopList;
         hb_xfree( ( void * ) pFree );
      }
      hb_comp_pLoops = pLoop->pNext;
      hb_xfree( ( void * ) pLoop );
   }
}

static void * hb_compElseIfGen( void * pFirst, ULONG ulOffset )
{
   PELSEIF pElseIf = ( PELSEIF ) hb_xgrab( sizeof( _ELSEIF ) ), pLast;

   pElseIf->ulOffset = ulOffset;
   pElseIf->pNext = NULL;
   pElseIf->pPrevGroup = NULL;

   if( pFirst )
   {
      pLast = ( PELSEIF ) pFirst;

      while( pLast->pNext )
      {
         pLast = pLast->pNext;
      }

      pLast->pNext = pElseIf;
   }
   else
   {
      if( hb_comp_pElseIfs )
      {
         pElseIf->pPrevGroup = hb_comp_pElseIfs;
      }

      hb_comp_pElseIfs = pElseIf;

      pFirst = pElseIf;
   }

   return pFirst;
}

static void hb_compElseIfFix( void * pFixElseIfs )
{
   PELSEIF pFix = ( PELSEIF ) pFixElseIfs;

   while( pFix )
   {
      hb_compGenJumpHere( pFix->ulOffset );
      pFix = pFix->pNext;
   }
}

void hb_compReleaseElseIfs( void )
{
   PELSEIF pElseIf;
   PELSEIF pDel;

   while( hb_comp_pElseIfs )
   {
      pElseIf = hb_comp_pElseIfs;
      hb_comp_pElseIfs = pElseIf->pPrevGroup;

      while( pElseIf )
      {
         pDel = pElseIf;
         pElseIf = pElseIf->pNext;
         hb_xfree( pDel );
      }
   }
}

static void hb_compRTVariableAdd( HB_EXPR_PTR pVar, BOOL bPopInitValue )
{
   HB_RTVAR_PTR pRTvar = ( HB_RTVAR_PTR ) hb_xgrab( sizeof( HB_RTVAR ) );

   pRTvar->pVar = pVar;
   pRTvar->bPopValue = bPopInitValue;
   pRTvar->pNext = NULL;
   pRTvar->pPrev = NULL;

   if( hb_comp_rtvars )
   {
      HB_RTVAR_PTR pLast = hb_comp_rtvars;

      while( pLast->pNext )
      {
         pLast = pLast->pNext;
      }

      pLast->pNext = pRTvar;
      pRTvar->pPrev = pLast;
   }
   else
   {
      hb_comp_rtvars = pRTvar;
   }
}

static void hb_compRTVariableGen( char * szCreateFun )
{
   USHORT usCount = 0;
   HB_RTVAR_PTR pVar = hb_comp_rtvars;
   HB_RTVAR_PTR pDel;

   /* generate the function call frame */
   hb_compGenPushFunCall( szCreateFun, NULL );
   hb_compGenPushNil();

   /* push variable names to create */
   while( pVar->pNext )
   {
      hb_compExprGenPush( pVar->pVar );
      pVar = pVar->pNext;
      ++usCount;
   }

   hb_compExprGenPush( pVar->pVar );
   ++usCount;

   /* call function that will create either PUBLIC or PRIVATE variables */
   if( usCount > 255 )
   {
      hb_compGenPCode3( HB_P_DO, HB_LOBYTE( usCount ), HB_HIBYTE( usCount ), ( BOOL ) 1 );
   }
   else
   {
      hb_compGenPCode2( HB_P_DOSHORT, ( BYTE ) usCount, ( BOOL ) 1 );
   }

   /* pop initial values */
   while( pVar )
   {
      if( pVar->bPopValue )
      {
         hb_compExprDelete( hb_compExprGenPop( pVar->pVar ) );
      }
      else
      {
         hb_compExprDelete( pVar->pVar );
      }

      pDel = pVar;
      pVar = pVar->pPrev;

      hb_xfree( pDel );
   }

   hb_comp_rtvars = NULL;
}

static void hb_compVariableDim( char * szName, HB_EXPR_PTR pInitValue )
{
  if( hb_comp_iVarScope == VS_PUBLIC || hb_comp_iVarScope == VS_PRIVATE )
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );
     hb_compVariableAdd( szName, 'A' );
     hb_compExprDelete( hb_compExprGenPush( pInitValue ) );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), ( BOOL ) 1 );
     hb_compRTVariableAdd( hb_compExprNewRTVar( szName, NULL ), TRUE );
  }
  else if( hb_comp_iVarScope == VS_STATIC )
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );
     HB_EXPR_PTR pVar = hb_compExprNewVar( szName );
     HB_EXPR_PTR pAssign;

     /* create a static variable */
     hb_compVariableAdd( szName, 'A' );
     hb_compStaticDefStart();   /* switch to statics pcode buffer */
     /* create an array */
     hb_compExprGenPush( pInitValue );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), ( BOOL ) 1 );
     /* check if valid initializers were used but don't generate any code */
     pAssign = hb_compExprAssignStatic( pVar, pInitValue );
     /* now pop an array */
     hb_compExprGenPop( pVar );
     /* delete all used expressions */
     hb_compExprDelete( pAssign );
     hb_compStaticDefEnd();
     hb_compGenStaticName( szName );
  }
  else if( hb_comp_iVarScope == VS_GLOBAL )
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );
     HB_EXPR_PTR pVar = hb_compExprNewVar( szName );
     HB_EXPR_PTR pAssign;

     /* create a global variable */
     hb_compVariableAdd( szName, 'A' );
     hb_compGlobalsDefStart();   /* switch to globals pcode buffer */
     /* create an array */
     hb_compExprGenPush( pInitValue );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), ( BOOL ) 1 );
     /* check if valid initializers were used but don't generate any code */
     pAssign = hb_compExprAssignStatic( pVar, pInitValue );
     /* now pop an array */
     hb_compExprGenPop( pVar );
     /* delete all used expressions */
     hb_compExprDelete( pAssign );
     hb_compGlobalsDefEnd();
     hb_compGenGlobalName( szName );
  }
  else if( hb_comp_iVarScope == VS_EXTERNGLOBAL )
  {
     hb_compGenError( hb_comp_szErrors, 'E', HB_COMP_ERR_EXTERNGLOBAL_ASSIGN, szName, NULL );
  }
  else
  {
     USHORT uCount = (USHORT) hb_compExprListLen( pInitValue );

     hb_compVariableAdd( szName, 'A' );
     hb_compExprDelete( hb_compExprGenPush( pInitValue ) );
     hb_compGenPCode3( HB_P_ARRAYDIM, HB_LOBYTE( uCount ), HB_HIBYTE( uCount ), ( BOOL ) 1 );
     hb_compExprDelete( hb_compExprGenPop( hb_compExprNewVar( szName ) ) );
  }
}

void hb_compReleaseRTVars( void )
{
   HB_RTVAR_PTR pVar;

   while( hb_comp_rtvars )
   {
      pVar = hb_comp_rtvars;
      hb_compExprDelete( pVar->pVar );
      hb_comp_rtvars = pVar->pPrev;
      hb_xfree( pVar );
   }
}

