*******
* Multitheraded garbage collection test
*
* (C) 2003 Giancarlo Niccolai & Ron Pinkas
*
* $Id: mtgc.prg,v 1.8 2003/02/01 12:45:36 jonnymind Exp $
*
* This programs allocates Garbage Collectable objects in
* subthreads, and force the collection in a crossed thread
* fashon (thread 1 can collect the garbage generated by
* thread 3 etc.)
*
* This is both a speed and stability stress test for all
* the MT system.
*

#include "hbclass.ch"
#include "hbmemory.ch"

GLOBAL Mutex
PROCEDURE Main()

  LOCAL nStart := Seconds()

  set color to w+/b
  CLEAR SCREEN
  Mutex := CreateMutex()

  // 1st param is the Startup Function, 2nd. is Self if 1st param 
  // is a Method or NIL otherwise,
  // rest are paramaters to be passed to the Function/Method.
  StartThread ( @MyThreadFunc(), 2, "1st Thread:",     0,  5000 )
  StartThread ( @MyThreadFunc(), 4, "2nd Thread:",  5000, 10000 )
  StartThread ( @MyThreadFunc(), 6, "3rd Thread:", 10000, 15000 )

  WaitForThreads()
  @ 8, 0 SAY "Threads Time:" + Str( Seconds() - nStart )
  @ 9, 0 SAY "Press a key to continue"
  Inkey(0)

RETURN

PROCEDURE MyThreadFunc( nRow, cName, nStart, nMax )

  LOCAL i, aVar

  FOR i := nStart TO nMax
     @ nRow, 10 SAY cName + Str( i )


     IF nRow < 10
        aVar := { 1 }
        aVar[1] := Array( 50 )
        *aVar[1][1] := aVar
        aVar := NIL

        @ nRow, 40 SAY "Before:" + Str( Memory( HB_MEM_USED ) )
        IF nRow == 2
           HB_GCALL( .T. )
        ENDIF
        @ nRow, 60 SAY "After:" + Str( Memory( HB_MEM_USED ) )
     ENDIF

  NEXT

RETURN

